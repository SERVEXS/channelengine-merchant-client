{
  "openapi": "3.0.1",
  "info": {
    "title": "ChannelEngine Merchant API",
    "description": "ChannelEngine API for merchants",
    "version": "2.19.0"
  },
  "servers": [
    {
      "url": "https://demo.channelengine.net/api"
    }
  ],
  "paths": {
    "/v2/cancellations/merchant": {
      "get": {
        "tags": [
          "Cancellations"
        ],
        "summary": "Gets cancelations",
        "description": "Gets cancelations based on their creation date.",
        "operationId": "CancellationGetForMerchant",
        "parameters": [
          {
            "name": "createdSince",
            "in": "query",
            "description": "Filter on the create date of the cancellation in ChannelEngine, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantCancellationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/cancellations": {
      "post": {
        "tags": [
          "Cancellations"
        ],
        "summary": "Creates a cancelation",
        "description": "Marks an order as fully or partially canceled based on order line and quantity input.",
        "operationId": "CancellationCreate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantCancellationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantCancellationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantCancellationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Gets channels",
        "description": "Gets the complete list of channels available on ChannelEngine including their **Global channel ID**.",
        "operationId": "Channel PluginsGet",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfChannelGlobalChannelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/competitionprices/buyboxprices": {
      "get": {
        "tags": [
          "Competition prices"
        ],
        "summary": "Gets the price from the buy box winner",
        "description": "Gets the current price of the buy box winner per product for a marketplace.",
        "operationId": "CompetitionPricesGetBuyBoxPrices",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The id of the channel",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "gtinList",
            "in": "query",
            "description": "Search products by submitting a list of GTIN's. (optional) <br />Max. 2000.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "skuList",
            "in": "query",
            "description": "Search products by submitting a list of Sku's. (optional) <br />Max. 2000. If GtinList is already set, this one is ignored.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantProductWithBuyBoxPrice"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/custom-fields": {
      "get": {
        "tags": [
          "Custom fields"
        ],
        "summary": "Gets custom fields",
        "description": "Gets all custom fields in your ChannelEngine tenant, along with details on whether each field is public and actively in use.",
        "operationId": "CustomFieldsGetCustomFields",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "A page index to get the items (starts from 0)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items to return (default 100)",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfCustomFieldResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom fields"
        ],
        "summary": "Delete custom fields by a given list of custom field ids (product extra data ids)",
        "operationId": "CustomFieldsDeleteCustomFields",
        "parameters": [
          {
            "name": "customFieldsIds",
            "in": "query",
            "description": "List of your custom fields Ids that you want to remove.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/fulfillmentstock": {
      "get": {
        "tags": [
          "Fulfillment stock"
        ],
        "summary": "Gets product stock across all warehouses with stock locations - Channel Fulfillment location",
        "description": "Gets the stocks. The warehouses must be set up as stock locations on ChannelEngine.",
        "operationId": "FulfillmentStockGetFulfillmentStockWithStockLocations",
        "parameters": [
          {
            "name": "merchantProductNos",
            "in": "query",
            "description": "List of your products' MerchantProductNo's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "A page index to get the items (starts from 0)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items to return (default 100)",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantFulfillmentStockStockLocationsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/channels/{channelId}/products": {
      "get": {
        "tags": [
          "Listed products"
        ],
        "summary": "Gets products listed by channel",
        "description": "Gets the products listed per channel based on the **Channel ID**. <br /> <br />**NB:** not all marketplaces provide adequate options to retrieve the status of a product as seen on the marketplace.",
        "operationId": "ListedProductGetByFilter",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of a channel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "merchantProductNos",
            "in": "query",
            "description": "The unique product references used by the Merchant (SKUs)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfChannelListedProductResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Gets notifications",
        "description": "Gets ChannelEngine notifications based on the available filters.",
        "operationId": "NotificationIndex",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter on the notification date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter on the notification date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Notification type(s) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NotificationType"
              }
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "merchantReturnNos",
            "in": "query",
            "description": "Filter on unique return reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelReturnNos",
            "in": "query",
            "description": "Filter on unique return reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "merchantShipmentNos",
            "in": "query",
            "description": "Filter on unique shipment reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantNotificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/offer": {
      "put": {
        "tags": [
          "Offers"
        ],
        "summary": "Updates stock and price",
        "description": "Updates product stock and price.",
        "operationId": "OfferStockPriceUpdate",
        "requestBody": {
          "description": "References to the products that should be updated, and the new values <br />for the stock or price fields. It is possible to supply only one of the two fields <br />or both.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantStockPriceUpdateRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantStockPriceUpdateRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantStockPriceUpdateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "**Message** can be **\"Updates processed without warnings\"** or in case of validations **\"Updates processed, see 'Content' for warnings\"**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfDictionaryOfStringAndListOfString"
                }
              }
            }
          }
        }
      }
    },
    "/v2/offer/stock": {
      "put": {
        "tags": [
          "Offers"
        ],
        "summary": "Updates stock",
        "description": "Updates product stock.",
        "operationId": "OfferStockUpdate",
        "requestBody": {
          "description": "References to the new values for the stock fields.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantOfferStockUpdateRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantOfferStockUpdateRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantOfferStockUpdateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "**Message** can be **\"Updates processed without warnings\"** or in case of validations **\"Updates processed, see 'Content' for warnings\"**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfDictionaryOfStringAndListOfString"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Gets product stock across all warehouses",
        "description": "Gets the stock available in the warehouses. The warehouses must be set up as stock locations on ChannelEngine.",
        "operationId": "OfferGetStock",
        "parameters": [
          {
            "name": "skus",
            "in": "query",
            "description": "List of your products' sku's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "stockLocationIds",
            "in": "query",
            "description": "The ChannelEngine id of the stock location(s).",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "A page index to get the items (starts from 0)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items to return (default 100)",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantOfferGetStockResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/documents": {
      "get": {
        "tags": [
          "Order Documents"
        ],
        "summary": "Get documents by filters",
        "description": "Fetch collection of documents based on the provided filters",
        "operationId": "Order DocumentsGetDocumentsByFilter",
        "parameters": [
          {
            "name": "identifiers.identifierType",
            "in": "query",
            "description": "The type of identifier: which identifier to filter on",
            "schema": {
              "$ref": "#/components/schemas/DocumentIdentifierType"
            }
          },
          {
            "name": "identifiers.models",
            "in": "query",
            "description": "The value (of the selected type) to filter on",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "createdDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "onlyUnacknowledgedByMerchant",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderDocumentType"
            }
          },
          {
            "name": "linkedWith",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderDocumentLinkedWith"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfIDocumentByFilter"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/documents/file": {
      "get": {
        "tags": [
          "Order Documents"
        ],
        "summary": "Get document file for order.",
        "description": "Downloads the file of the order document.",
        "operationId": "Order DocumentsGetDocumentFileForOrder",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfIDocumentByFilter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/documents/acknowledge": {
      "post": {
        "tags": [
          "Order Documents"
        ],
        "summary": "Acknowledge a document.",
        "description": "Acknowledge a single document. By acknowledging the document the merchant can confirm that <br />the document has been received. These references will be used in the other API calls. <br />After a successful request, the document is marked as Merchant Acknowledged. <br />If the document is already acknowledged, you'll receive a 404 Bad request",
        "operationId": "Order DocumentsAcknowledgeDocument",
        "requestBody": {
          "description": "Relations between the id's returned by ChannelEngine and the references which the merchant uses.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAcknowledgeDocumentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAcknowledgeDocumentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAcknowledgeDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfIDocumentByFilter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Gets orders by filter",
        "description": "Gets orders based on the available filters.",
        "operationId": "OrderGetByFilter",
        "parameters": [
          {
            "name": "statuses",
            "in": "query",
            "description": "Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrderStatusView"
              }
            }
          },
          {
            "name": "emailAddresses",
            "in": "query",
            "description": "Client emailaddresses to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "commercialOrderNos",
            "in": "query",
            "description": "Filter on commercial order numbers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter on the order date, starting from this date. This date is inclusive. <br />The order date is based on the data we got from a channel.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter on the order date, until this date. This date is exclusive. <br />The order date is based on the data we got from a channel.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromCreatedAtDate",
            "in": "query",
            "description": "Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive. <br />The created date is set on the date and time when the order is created.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toCreatedAtDate",
            "in": "query",
            "description": "Filter on the created at date in ChannelEngine, until this date. This date is exclusive. <br />The created date is set on the date and time when the order is created.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "excludeMarketplaceFulfilledOrdersAndLines",
            "in": "query",
            "description": "Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "description": "Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace. <br />To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.",
            "schema": {
              "$ref": "#/components/schemas/FulfillmentType"
            }
          },
          {
            "name": "onlyWithCancellationRequests",
            "in": "query",
            "description": "Filter on orders containing cancellation requests. <br />Some channels allow a customer to cancel an order until it has been shipped. <br />When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter orders on channel(s).",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "stockLocationIds",
            "in": "query",
            "description": "Filter on stock locations",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "isAcknowledged",
            "in": "query",
            "description": "Filter on acknowledged value",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fromUpdatedAtDate",
            "in": "query",
            "description": "Filter on the order update date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUpdatedAtDate",
            "in": "query",
            "description": "Filter on the order update date, unitl this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromAcknowledgedDate",
            "in": "query",
            "description": "Filter on the order acknowledged date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toAcknowledgedDate",
            "in": "query",
            "description": "Filter on the order acknowledged date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromClosedAtDate",
            "in": "query",
            "description": "Filter on the order ClosedAt date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toClosedAtDate",
            "in": "query",
            "description": "Filter on the order ClosedAt date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/new": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Gets new orders",
        "description": "Gets orders with the status **New**.",
        "operationId": "OrderGetNew",
        "parameters": [
          {
            "name": "stockLocationId",
            "in": "query",
            "description": "The ChannelEngine id of the stock location.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/acknowledge": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Acknowledges orders",
        "description": "Acknowledges an order to confirm order import.",
        "operationId": "OrderAcknowledge",
        "requestBody": {
          "description": "Relations between the id's returned by ChannelEngine and the references which the merchant uses.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantOrderAcknowledgementRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantOrderAcknowledgementRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantOrderAcknowledgementRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{merchantOrderNo}/invoice": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Generates an order invoice",
        "description": "Generates the ChannelEngine sales tax invoice for an order in PDF.",
        "operationId": "OrderInvoice",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "description": "The unique order reference as used by the merchant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useCustomerCulture",
            "in": "query",
            "description": "Generate the invoice in the billing address' country's language.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice PDF",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "file",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Uploads an order invoice",
        "description": "Uploads the invoice for an order in PDF.",
        "operationId": "OrderUploadInvoice",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "description": "The unique order reference as used by the merchant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "invoice"
                ],
                "type": "object",
                "properties": {
                  "invoice": {
                    "type": "string",
                    "description": "PDF invoice file up to 1 MB with additional data.",
                    "format": "binary"
                  },
                  "invoiceNumber": {
                    "maxLength": 50,
                    "minLength": 0,
                    "type": "string",
                    "description": "The invoice number used in the invoice."
                  }
                }
              },
              "encoding": {
                "invoice": {
                  "style": "form"
                },
                "invoiceNumber": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{merchantOrderNo}/packingslip": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Generates a packing slip",
        "description": "Generates the ChannelEngine packing slip for an order in PDF.",
        "operationId": "OrderPackingSlip",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "description": "The unique order reference as used by the merchant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useCustomerCulture",
            "in": "query",
            "description": "Generate the invoice in the billing address' country's language.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packing Slip PDF",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "file",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/comment": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Updates an order comment",
        "description": "Updates the merchant comment for an order based on the ChannelEngine **Order ID** or the **Merchant order number**.",
        "operationId": "OrderUpdate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantOrderCommentUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantOrderCommentUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantOrderCommentUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{merchantOrderNo}/invoice-base64": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Uploads an order invoice PDF from Base64 string.",
        "description": "Uploads an order invoice PDF from Base64 string. <br />Invoice size must be less than 1 mb.",
        "operationId": "OrderUploadInvoiceAsString",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantInvoiceUploadRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantInvoiceUploadRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantInvoiceUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/mark-export-as-failed": {
      "post": {
        "tags": [
          "Orders"
        ],
        "operationId": "OrderMarkExportAsFailed",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMerchantMarkExportAsFailedForOrdersRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMerchantMarkExportAsFailedForOrdersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMerchantMarkExportAsFailedForOrdersRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/product-attribute-group": {
      "post": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Creates a custom attribute group",
        "description": "Creates a custom attribute group based on the set of custom attributes (a.k.a. extra data keys).",
        "operationId": "ProductAttributeGroupCreate",
        "requestBody": {
          "description": "Collection of product attribute groups with linked product extra data keys.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductAttributeGroupRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductAttributeGroupRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductAttributeGroupRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Gets custom attribute groups",
        "description": "Gets the custom attribute groups based on the **Group name** provided.",
        "operationId": "ProductAttributeGroupGetByFilter",
        "parameters": [
          {
            "name": "groupNames",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantProductAttributeGroupWithProductExtraDataResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/product-attribute-group/{groupName}": {
      "delete": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Deletes a custom attribute group",
        "description": "Deletes the custom attribute group based on the **Group name** provided. <br />**NB:** you can only delete a custom attribute group that does not have any markeplaces (a.k.a. channels) linked to it.",
        "operationId": "ProductAttributeGroupDelete",
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "description": "The group name of the product attribute group you wish to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/product-attribute-group/{groupName}/add": {
      "put": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Adds custom attributes to a group",
        "description": "Adds the provided custom attributes (a.k.a. extra data keys) to the custom attribute group. <br />**NB:** you can only add existing custom attributes to a group.",
        "operationId": "ProductAttributeGroupAddProductExtraData",
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "description": "The group name of the product attribute group you wish to add product extra data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product extra data keys to be added.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddProductExtraDataRequests"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddProductExtraDataRequests"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddProductExtraDataRequests"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/product-attribute-group/{groupName}/remove": {
      "put": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Deletes custom attributes from a group",
        "description": "Removes the custom attributes (a.k.a. extra data keys) from the custom attribute group. <br />**NB:** you can only remove existing custom attributes from a group.",
        "operationId": "ProductAttributeGroupRemoveProductExtraData",
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "description": "The group name of the product attribute group you wish to remove product extra data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product extra data keys to be removed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveProductExtraDataRequests"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveProductExtraDataRequests"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveProductExtraDataRequests"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/product-attribute-group/linked-channels": {
      "get": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Gets custom attribute groups and linked marketplaces",
        "description": "Gets all custom attribute groups and marketplaces (a.k.a. channels) linked to them.",
        "operationId": "ProductAttributeGroupGetWithChannelsByFilter",
        "parameters": [
          {
            "name": "groupNames",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantProductAttributeGroupWithLinkedChannelsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/product-attribute-group/rename": {
      "post": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Renames custom attribute groups",
        "description": "Renames the custom attribute groups.",
        "operationId": "ProductAttributeGroupRenameProductAttributeGroup",
        "requestBody": {
          "description": "List of old and new product attribute group names.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RenameProductAttributeGroupRequests"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RenameProductAttributeGroupRequests"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RenameProductAttributeGroupRequests"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/productbundles": {
      "get": {
        "tags": [
          "Product bundles"
        ],
        "summary": "Gets product bundles",
        "description": "Gets the product bundle details.",
        "operationId": "ProductBundleGetByFilter",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search product(s) by Name, MerchantProductNo, Ean or Brand <br />This search is applied to the result after applying the other filters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eanList",
            "in": "query",
            "description": "Search products by submitting a list of EAN's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "merchantProductNoList",
            "in": "query",
            "description": "Search products by submitting a list of MerchantProductNo's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantProductBundleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Updates or creates products",
        "description": "Updates or creates products. The endpoint is purge and replace. <br />If you do not include an attribute, it is overwritten with null. <br />Extra data arrays are not effected by purge and replace, and remain unchanged. <br />To exclude stock from the update, set the **Ignore stock** attribute to **true**. <br />To exclude price from the update, set the **Ignore price** attribute to **true**. <br /> <br />**NB:** the **Merchant product number** must be unique.",
        "operationId": "ProductCreate",
        "parameters": [
          {
            "name": "ignoreStock",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignorePrice",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "If products don't pass validations then **ProductMessages** in 'Content' are filled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfProductCreationResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Gets products",
        "description": "Retrieve all products. Apply available filters to narrow down your search.",
        "operationId": "ProductGetByFilter",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search product(s) by Name, MerchantProductNo, Ean or Brand <br />This search is applied to the result after applying the other filters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eanList",
            "in": "query",
            "description": "Search products by submitting a list of EAN's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "merchantProductNoList",
            "in": "query",
            "description": "Search products by submitting a list of MerchantProductNo's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantProductResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Updates products attributes",
        "description": "Updates specific attributes of product data. You can update single or multiple attributes for one or multiple products. <br />You can also add custom attributes via this endpoint. The format of this endpoint is JSON Patch. <br />Products are updated for the fields listed in the array **PropertiesToUpdate**: <br />[name, <br />description, <br />details, <br />brand, <br />size, <br />color, <br />ean, <br />groupno **or** ParentMerchantProductNo, <br />groupno2 **or** ParentMerchantProductNo2, <br />type, <br />merchantproductno, <br />manufacturerproductnumber, (vendorproductno) <br />stock, <br />price, <br />listprice **or** MSRP, <br />purchaseprice, <br />minprice, <br />maxprice, <br />discountrate, <br />vatrate, <br />margin, <br />shippingcost, <br />shippingtime, <br />url, <br />imageurl, <br />extraimageurl1, <br />extraimageurl2, <br />extraimageurl3, <br />extraimageurl4, <br />extraimageurl5, <br />extraimageurl6, <br />extraimageurl7, <br />extraimageurl8, <br />extraimageurl9, <br />categoryid, <br />vatratetype] <br /> <br />Sample request: <br /><pre> <br />PATCH /v2/products <br />{ <br /> \"PropertiesToUpdate\": [ <br /> \"name\", <br /> \"description\" <br /> ], <br /> \"MerchantProductRequestModels\": [ <br /> { <br /> \"MerchantProductNo\": \"testMerchantProductNo\", <br /> \"Name\": \"testName\", <br /> \"Description\": \"testDescription\", <br /> }, <br /> { <br /> \"MerchantProductNo\": \"testMerchantProductNo2\", <br /> \"Name\": \"testName3\", <br /> \"Description\": \"testDescription1\", <br /> } <br /> ] <br />} <br /></pre>",
        "operationId": "ProductBulkPatch",
        "requestBody": {
          "description": "1) PropertiesToUpdate: Fields to update <br />2) MerchantProductRequestModels: Products to be updated",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchMerchantProductDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchMerchantProductDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchMerchantProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfProductCreationResult"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products/{merchantProductNo}": {
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes a product",
        "description": "Deletes a product based on the **Merchant product number**. <br /> <br />**NB:** ChannelEngine deactivates but does not delete the product entirely, as it might be still referenced in orders. <br />Therefore, the references used for this product cannot be reused.",
        "operationId": "ProductDelete",
        "parameters": [
          {
            "name": "merchantProductNo",
            "in": "path",
            "description": "The MerchantProductNo of the product you wish to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Gets a product",
        "description": "Retrieves a product based on the **Merchant product number**.",
        "operationId": "ProductGetByMerchantProductNo",
        "parameters": [
          {
            "name": "merchantProductNo",
            "in": "path",
            "description": "The unique product reference used by the Merchant (sku).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfMerchantProductResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfMerchantProductResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Updates product attributes",
        "description": "Updates specific attributes of a single product based on the **Merchant product number**. The endpoint uses the [JSON Patch](http://jsonpatch.com/). <br /> <br />Sample request: <br /><pre> <br /> PATCH /v2/products/{merchantProductNo} <br /> { <br /> \"value\": \"Value\", <br /> \"path\": \"Name\", <br /> \"op\": \"replace\" <br /> } <br /></pre> <br />For adding, removing or replacing ExtraData, use PATCH v2/Products/extra-data endpoint",
        "operationId": "ProductPatch",
        "parameters": [
          {
            "name": "merchantProductNo",
            "in": "path",
            "description": "The MerchantProductNo of the product you wish to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The JsonPatchDocument providing the operations you wish to perform on the product. <br /> Value contains the value you wish to set on the property you're updating (used with operations \"add\" and \"replace\"). <br /> Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used. <br /> Op contains the operation you wish to perform (\"add\",\"replace\",\"remove\"). <br /> From is only used when using the \"move\" operation. It refers to the source path of the value to be moved.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfProductCreationResult"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products/bulkdelete": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes products",
        "description": "Deletes a products based on the **Merchant product number**. <br /> <br />**NB:** ChannelEngine deactivates but does not delete the products entirely, as they might be still referenced in orders. <br />Therefore, the references used for these products cannot be reused.",
        "operationId": "ProductBulkDelete",
        "requestBody": {
          "description": "The list of MerchantProductNo of the products you wish to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "**Message** can be **\"Items successfully deleted\"** or in case of validations **\"Items successfully deleted. Warning:...\"**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products/extra-data/bulk": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Adds, updates, or deletes custom attributes",
        "description": "Adds, updates, or deletes the custom attributes (a.k.a. extra data keys) for multiple products. <br />You can update single or multiple attributes for one or multiple products. The format of this endpoint is [JSON Patch](http://jsonpatch.com/). <br /> <br />**NB:** the **Merchant product number** must be unique. <br /> <br />Sample request: <br /><pre> <br />PATCH /v2/products/extra-data/bulk <br />[ <br /> { <br /> \"MerchantProductNo\": \"{merchantProductNo}\", <br /> \"Operations\": [ <br /> { <br /> \"Op\": \"add\", <br /> \"Key\": \"{Key}\", <br /> \"Value\": \"{Value}\" <br /> } <br /> ] <br /> }, <br /> { <br /> \"MerchantProductNo\": \"{merchantProductNo}\", <br /> \"Operations\": [ <br /> { <br /> \"Op\": \"replace\", <br /> \"Key\": \"{Key}\", <br /> \"Value\": \"{Value}\" <br /> }, <br /> { <br /> \"Op\": \"add\", <br /> \"Key\": \"{Key}\", <br /> \"Value\": \"{Value}\" <br /> } <br /> ] <br /> }, <br /> { <br /> \"MerchantProductNo\": \"{merchantProductNo}\", <br /> \"Operations\": [ <br /> { <br /> \"Op\": \"remove\", <br /> \"Key\": \"{Key}\", <br /> \"Value\": \"{Value}\" <br /> } <br /> ] <br /> } <br /> ] <br /></pre>",
        "operationId": "ProductBulkPatchExtraDataItems",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductExtraDataRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductExtraDataRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductExtraDataRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfProductCreationResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products/extra-data": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Adds, updates, or deletes a custom attribute",
        "description": "Adds, updates, or deletes the specific custom attribute (a.k.a. extra data key) for a single product. <br />You can update a single attribute for a product. The format of this endpoint is [JSON Patch](http://jsonpatch.com/). <br /> <br />**NB:** the **Merchant product number** must be unique. <br /> <br />Sample requests: <br /> <br />Adding ExtraData: <br /><pre> <br /> PATCH /v2/products/extra-data <br /> { <br /> \"MerchantProductNo\": \"{merchantProductNo}\", <br /> \"Operations\": [ <br /> { <br /> \"Op\": \"add\", <br /> \"Key\": \"{Key}\", <br /> \"Value\": \"{Value}\" <br /> } <br /> ] <br /> } <br /> </pre> <br />Updating ExtraData: <br /><pre> <br /> PATCH /v2/products/extra-data <br /> { <br /> \"MerchantProductNo\": \"{merchantProductNo}\", <br /> \"Operations\": [ <br /> { <br /> \"Op\": \"replace\", <br /> \"Key\": \"{Key}\", <br /> \"Value\": \"{Value}\" <br /> } <br /> ] <br /> } <br /></pre> <br />Removing ExtraData with key: <br /><pre> <br /> PATCH /v2/products/extra-data <br /> { <br /> \"MerchantProductNo\": \"{merchantProductNo}\", <br /> \"Operations\": [ <br /> { <br /> \"Op\": \"remove\", <br /> \"Key\": \"{Key}\", <br /> } <br /> ] <br /> } <br /></pre>",
        "operationId": "ProductPatchExtraDataItems",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantProductExtraDataRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantProductExtraDataRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantProductExtraDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfProductCreationResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products/freeze": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Updates selected products and sets them either to frozen or not-frozen status.",
        "description": "Changes state of products by updating it with FREEZE or UNFREEZE state. <br />All fields are required.",
        "operationId": "ProductFreeze",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FreezeProductRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FreezeProductRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FreezeProductRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchase-orders/invoice": {
      "post": {
        "tags": [
          "Purchase orders"
        ],
        "summary": "Creates a purchase order invoice",
        "description": "Creates invoice for a purchase order. <br />Request will be accepted and data persisted only if all validations passed. <br />Any validation messages and errors will be returned in a HTTP 4xx response.",
        "operationId": "Purchase OrdersCreateInvoice",
        "requestBody": {
          "description": "Model for purchase order invoice.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreatePurchaseOrderInvoiceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreatePurchaseOrderInvoiceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreatePurchaseOrderInvoiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchase-orders/invoice/bulk": {
      "post": {
        "tags": [
          "Purchase orders"
        ],
        "summary": "Creates a purchase order invoices in a bulk",
        "description": "Creates invoices for a purchase orders in a bulk. <br />Request will be accepted and data persisted only if all validations passed. <br />Any validation messages and errors will be returned in a HTTP 4xx response.",
        "operationId": "Purchase OrdersCreateInvoices",
        "requestBody": {
          "description": "Model for purchase order invoices.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMerchantCreatePurchaseOrderInvoicesRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMerchantCreatePurchaseOrderInvoicesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMerchantCreatePurchaseOrderInvoicesRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchase-orders/shipments/merchant": {
      "get": {
        "tags": [
          "Purchase orders"
        ],
        "summary": "Gets purchase order shipments by filter",
        "description": "Gets purchase order shipments based on the available filters.",
        "operationId": "GetByFilter",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The identifier of the channel",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifiers.identifierType",
            "in": "query",
            "description": "The type of identifier: which identifier to filter on",
            "schema": {
              "$ref": "#/components/schemas/PurchaseOrderShipmentIdentifierTypeValue"
            }
          },
          {
            "name": "identifiers.models",
            "in": "query",
            "description": "The value (of the selected type) to filter on",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "shippedDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "shippedDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "billOfLadingNumber",
            "in": "query",
            "description": "The Bill of Lading number. Multiple shipments can have the same Bill of Lading number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carrierName",
            "in": "query",
            "description": "The name of the carrier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfIPurchaseOrderShipmentByFilter"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchase-orders/shipments": {
      "post": {
        "tags": [
          "Purchase orders"
        ],
        "summary": "Create a purchase order shipment.",
        "description": "One shipments can ship (parts of) multiple orders",
        "operationId": "Create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreatePurchaseOrderShipmentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreatePurchaseOrderShipmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreatePurchaseOrderShipmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Purchase orders"
        ],
        "summary": "Update a purchase order shipment.",
        "operationId": "Update",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantUpdatePurchaseOrderShipmentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantUpdatePurchaseOrderShipmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantUpdatePurchaseOrderShipmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchase-orders": {
      "get": {
        "tags": [
          "Purchase orders"
        ],
        "summary": "Gets purchase orders by filter",
        "description": "Gets purchase orders based on the available filters.",
        "operationId": "GetByFilter",
        "parameters": [
          {
            "name": "identifiers.identifierType",
            "in": "query",
            "description": "The type of identifier: which identifier to filter on",
            "schema": {
              "$ref": "#/components/schemas/PurchaseOrderIdentifierType"
            }
          },
          {
            "name": "identifiers.models",
            "in": "query",
            "description": "The value (of the selected type) to filter on",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModulesPurchaseOrderStatus"
              }
            }
          },
          {
            "name": "orderDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "orderDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ModulesPurchaseOrderType"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfIPurchaseOrderByFilter"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchase-orders/lines/acknowledge": {
      "post": {
        "tags": [
          "Purchase orders"
        ],
        "summary": "Acknowledges lines of a purchase order",
        "description": "Creates line acknowledgements (i.e., accepted, backordered, rejected) for a purchase order. <br />Request will be accepted and data persisted only if all validations passed. <br />Any validation messages and errors will be returned in a HTTP 4xx response.",
        "operationId": "Acknowledge",
        "requestBody": {
          "description": "Model for purchase order and lines data to be acknowledged with the channel.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgePurchaseOrderLinesRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgePurchaseOrderLinesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgePurchaseOrderLinesRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2.1/refunds/merchant/{identifier}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "[CLOSED BETA] Get refund by identifier",
        "description": "Gets a single refund by the given identifier <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "RefundGet",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier to search for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Specify whether to search by ID, Merchant Refund No or Channel Refund No",
            "schema": {
              "$ref": "#/components/schemas/RefundIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfIRefund"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2.1/refunds/merchant": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "[CLOSED BETA] Get refunds by filter",
        "description": "Gets multiple refunds by the given filter <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "RefundGetByFilter",
        "parameters": [
          {
            "name": "identifiers.identifierType",
            "in": "query",
            "description": "The type of identifier: which identifier to filter on",
            "schema": {
              "$ref": "#/components/schemas/RefundByFilterIdentifier"
            }
          },
          {
            "name": "identifiers.models",
            "in": "query",
            "description": "The value (of the selected type) to filter on",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelExportStatus.statuses",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModuleChannelExportStatus"
              }
            }
          },
          {
            "name": "channelExportStatus.maxNumberOfExportAttempts",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reasons",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RefundReason"
              }
            }
          },
          {
            "name": "createdDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isAcknowledgedByMerchant",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isAcknowledgedByChannel",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ModuleFulfillmentType"
            }
          },
          {
            "name": "creatorType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CreatorType"
            }
          },
          {
            "name": "externalBatchNos",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfIRefund"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "[CLOSED BETA] Create a refund",
        "description": "Creates a new refund <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "RefundCreate",
        "requestBody": {
          "description": "The refund",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreateRefundRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreateRefundRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreateRefundRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2.1/refunds/merchant/acknowledge": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "[CLOSED BETA] Acknowledge a refund",
        "description": "Acknowledges a refund <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "RefundAcknowledge",
        "requestBody": {
          "description": "The refund to acknowledge",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgeRefundRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgeRefundRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgeRefundRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reports/settlements": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Creates a settlement report",
        "description": "Creates a settlement report based on the **Settlement ID** provided (maximum 10 IDs are allowed). There are 2 types of reports: <br />**DETAILED** - a detailed report containing all transactions. <br />**CUSTOM_JSON** - a report grouped by orders, you can name the csv columns with a JSON file. This JSON file should be defined <br />in the settlement export plugin. <br /> <br />All the settlements are automatically acknowledged if that was not already the case. <br />**NB:** depending on the number of transactions within the settlement, it can take a few minutes for the report to be generated.",
        "operationId": "ReportCreateSettlementsReport",
        "requestBody": {
          "description": "To provide settlementIds and type of report DETAILED or CUSTOM_JSON.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantCreateSettlementsReportRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantCreateSettlementsReportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantCreateSettlementsReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCreateReportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reports/{reportId}/status": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Gets the status of a report",
        "description": "Returns a report status based on the **Report ID** provided. There are four statuses: <br />**IN_PROGRESS** - the report is still being created. <br />**DONE** - the report has been created. <br />**FAILED** - the report creation failed. <br />**NOT_FOUND** - the Report ID was not found. <br /> <br />**NB:** if the status is **DONE**, the response contains a URL with a download path.",
        "operationId": "ReportGetStatus",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantGetReportStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reports/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Gets a report",
        "description": "Gets a report based on the **Report ID** provided. <br />In case of settlement reports the generated report is a CSV file with a semicolon (;) as a delimiter. <br />In case of product feeds the generated report is a JSON file. <br />If a field has a comma (,) then it is enclosed in quotes (\"\").",
        "operationId": "ReportGetReport",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2.1/returns/merchant/{identifier}": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "[CLOSED BETA] Get return by identifier",
        "description": "Gets a single return by the given identifier <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "ReturnGet",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier to search for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Specify whether to search by ID, Merchant Return No or Channel Return No",
            "schema": {
              "$ref": "#/components/schemas/ReturnIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfIReturn"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2.1/returns/merchant": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "[CLOSED BETA] Get returns by filter",
        "description": "Gets multiple returns by the given filter <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "ReturnGetByFilter",
        "parameters": [
          {
            "name": "identifiers.identifierType",
            "in": "query",
            "description": "The type of identifier: which identifier to filter on",
            "schema": {
              "$ref": "#/components/schemas/ReturnByFilterIdentifier"
            }
          },
          {
            "name": "identifiers.models",
            "in": "query",
            "description": "The value (of the selected type) to filter on",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelExportStatus.statuses",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModuleChannelExportStatus"
              }
            }
          },
          {
            "name": "channelExportStatus.maxNumberOfExportAttempts",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reasons",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModuleReturnReason"
              }
            }
          },
          {
            "name": "createdDateRange.fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdDateRange.toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModuleReturnStatus"
              }
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isAcknowledgedByMerchant",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isAcknowledgedByChannel",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ModuleFulfillmentType"
            }
          },
          {
            "name": "creatorType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CreatorType"
            }
          },
          {
            "name": "externalBatchNos",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfIReturn"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "[CLOSED BETA] Create a return",
        "description": "Creates a new return <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "ReturnCreate",
        "requestBody": {
          "description": "The return",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreateReturnRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreateReturnRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantCreateReturnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2.1/returns/merchant/handle": {
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "[CLOSED BETA] Handle a return",
        "description": "Handles a return <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "ReturnHandle",
        "requestBody": {
          "description": "The return to handle",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantHandleReturnRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantHandleReturnRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantHandleReturnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2.1/returns/merchant/acknowledge": {
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "[CLOSED BETA] Acknowledge a return",
        "description": "Acknowledges a return <br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.",
        "operationId": "ReturnAcknowledge",
        "requestBody": {
          "description": "The return to acknowledge",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgeReturnRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgeReturnRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMerchantAcknowledgeReturnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns/merchant": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Gets marketplace returns",
        "description": "Gets all returns created by the marketplace. <br /> <br />**NB:** this endpoint is used for both marketplace and marketplace-fulfilled returns.",
        "operationId": "ReturnGetDeclaredByChannel",
        "parameters": [
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter on Channel IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "description": "Filter on the fulfillment type of the order.",
            "schema": {
              "$ref": "#/components/schemas/FulfillmentType"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Return status(es) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReturnStatus"
              }
            }
          },
          {
            "name": "reasons",
            "in": "query",
            "description": "Return reason(s) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReturnReason"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter on the creation date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter on the creation date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isAcknowledged",
            "in": "query",
            "description": "Filters based on acknowledgements",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantReturnResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Creates merchant return",
        "description": "Marks an order as either fully or partially returned. <br /> <br />**NB:** this endpoint is used for merchant returns (i.e.: returns dealt with by the merchant).",
        "operationId": "ReturnDeclareForMerchant",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Gets returns by filter",
        "description": "Gets the returns based on the filter provided. <br /> <br />**NB:** this endpoint is used to retrieve all types of returns: merchant, marketplace, mixed, and marketplace-fulfilled.",
        "operationId": "ReturnGetReturns",
        "parameters": [
          {
            "name": "creatorType",
            "in": "query",
            "description": "Filter on the return's creator. Default is MIXED.",
            "schema": {
              "$ref": "#/components/schemas/CreatorFilter"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter on Channel IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "description": "Filter on the fulfillment type of the order.",
            "schema": {
              "$ref": "#/components/schemas/FulfillmentType"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Return status(es) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReturnStatus"
              }
            }
          },
          {
            "name": "reasons",
            "in": "query",
            "description": "Return reason(s) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReturnReason"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter on the creation date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter on the creation date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isAcknowledged",
            "in": "query",
            "description": "Filters based on acknowledgements",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantReturnResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Returns"
        ],
        "summary": "Marks returns as received",
        "description": "Marks a return as either fully or partially received. <br /> <br />**NB:** this endpoint is used for marketplace returns, and you can only accept or reject a return once.",
        "operationId": "ReturnUpdateForMerchant",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns/merchant/new": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Gets unhandled returns",
        "description": "Gets all marketplace returns with the status **In progress**.",
        "operationId": "ReturnGetUnhandled",
        "parameters": [
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter on Channel IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantReturnResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns/merchant/{merchantOrderNo}": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Gets a return",
        "description": "Gets the returns based on the **Merchant order number** provided. <br /> <br />**NB:** this endpoint is meant for merchants. Marketplaces should use the **GET /v2/returns/channel** call instead.",
        "operationId": "ReturnGetByMerchantOrderNo",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantSingleOrderReturnResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns/merchant/acknowledge": {
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Acknowledges a return",
        "description": "Acknowledges a return based on the **Return ID** provided. <br /> <br />**NB:** by acknowledging a return, you signal that it was registered in your system. <br />You can later filter your returns on the **Is acknowledged** parameter.",
        "operationId": "ReturnAcknowledge",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnAcknowledgeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnAcknowledgeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantReturnAcknowledgeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets settings",
        "description": "Gets the tenant details, settings, and tax number.",
        "operationId": "SettingsGet",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfMerchantSettingsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/settlements": {
      "get": {
        "tags": [
          "Settlements"
        ],
        "summary": "Gets settlements",
        "description": "Gets the settlements based on the available filters.",
        "operationId": "SettlementGetByFilter",
        "parameters": [
          {
            "name": "unExportedOnly",
            "in": "query",
            "description": "Filter on settlements that have not been exported before.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "settlementIds",
            "in": "query",
            "description": "Filter on settlement IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "channelSettlementNos",
            "in": "query",
            "description": "Filter on channel settlement nos.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter on channel id list.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "fromStartDate",
            "in": "query",
            "description": "Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toStartDate",
            "in": "query",
            "description": "Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromEndDate",
            "in": "query",
            "description": "Filter on the end date of the settlement in ChannelEngine, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toEndDate",
            "in": "query",
            "description": "Filter on the end date of the settlement in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromCreateDate",
            "in": "query",
            "description": "Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toCreateDate",
            "in": "query",
            "description": "Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromUpdateDate",
            "in": "query",
            "description": "Filter on the update date of the settlement in ChannelEngine, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUpdateDate",
            "in": "query",
            "description": "Filter on the update date of the settlement in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantSettlementReportsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/settlements/upload": {
      "post": {
        "tags": [
          "Settlements"
        ],
        "summary": "Uploads a settlement file to ChannelEngine.",
        "description": "Uploads a settlement file to ChannelEngine.",
        "operationId": "SettlementUploadSettlement",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The channel ID of the channel which the settlement is for.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "settlement"
                ],
                "type": "object",
                "properties": {
                  "settlement": {
                    "type": "string",
                    "description": "The settlement file must not exceed 1MB in size.\r\nUse the file format originally provided by the marketplace (usually CSV).",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "settlement": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments/merchant": {
      "get": {
        "tags": [
          "Shipments"
        ],
        "summary": "Gets shipments by filter",
        "description": "Gets the shipments based on the available filters. <br />Shipments are listed in chronological order, from old to new.",
        "operationId": "ShipmentIndex",
        "parameters": [
          {
            "name": "merchantShipmentNos",
            "in": "query",
            "description": "Filter on the unique references (ids) as used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on the unique references (ids) of order as used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "Filter on the shipping method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippedFromCountryCodes",
            "in": "query",
            "description": "2-digit Country code",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromShipmentDate",
            "in": "query",
            "description": "Filter on the shipment date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toShipmentDate",
            "in": "query",
            "description": "Filter on the shipment date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromCreateDate",
            "in": "query",
            "description": "Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toCreateDate",
            "in": "query",
            "description": "Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromUpdateDate",
            "in": "query",
            "description": "Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUpdateDate",
            "in": "query",
            "description": "Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "description": "Filter on the fulfillment type of the shipment.",
            "schema": {
              "$ref": "#/components/schemas/ShipmentFulfillmentType"
            }
          },
          {
            "name": "channelShipmentNos",
            "in": "query",
            "description": "Filter on the unique references (ids) as used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on the unique references (ids) of order as used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelExportStatus",
            "in": "query",
            "description": "Filter on the current status of the shipment.",
            "schema": {
              "$ref": "#/components/schemas/ChannelExportStatus"
            }
          },
          {
            "name": "channelExportAttempts",
            "in": "query",
            "description": "Filter on the amount of times the shipment has been attempted to be exported.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fromDeliveredAt",
            "in": "query",
            "description": "Filter on the delivery date of the shipment in ChannelEngine, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDeliveredAt",
            "in": "query",
            "description": "Filter on the delivery date of the shipment in ChannelEngine, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantShipmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments": {
      "post": {
        "tags": [
          "Shipments"
        ],
        "summary": "Creates shipments",
        "description": "Marks an order as fully or partially shipped, based on the order line and quantity input. <br />Indicate the **Stock location ID** if you make use of multiple stock locations.",
        "operationId": "ShipmentCreate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments/{merchantShipmentNo}": {
      "put": {
        "tags": [
          "Shipments"
        ],
        "summary": "Updates a shipment",
        "description": "Updates an existing shipment with tracking information and shipping method.",
        "operationId": "ShipmentUpdate",
        "parameters": [
          {
            "name": "merchantShipmentNo",
            "in": "path",
            "description": "The merchant's shipment reference.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated tracking information.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentTrackingRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentTrackingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentTrackingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/carriers/{merchantOrderNo}": {
      "post": {
        "tags": [
          "Shipments"
        ],
        "summary": "Gets carriers providing shipping labels",
        "description": "Posts a request to get the available marketplace carrier offers. <br /> <br />**NB:** this endpoint is used to buy a shipping label through the marketplace.",
        "operationId": "ShipmentGetShipmentLabelCarriers",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "description": "The merchant's order reference.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The parcel information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentLabelCarrierRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentLabelCarrierRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantShipmentLabelCarrierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantShipmentLabelCarrierResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments/channelmethod": {
      "post": {
        "tags": [
          "Shipments"
        ],
        "summary": "Creates a shipment and initiates shipping label generation",
        "description": "Marks an order as either fully or partially shipped, based on the order line and quantity input. <br />It also provides the marketplace with information necessary to generate a shipping label. <br />If you make use of multiple stock locations, indicate the **Stock location ID**. <br /> <br />**NB:** to request a shipping label, include information on the package size (i.e.: dimensions and weight).",
        "operationId": "ShipmentCreateForChannelMethod",
        "requestBody": {
          "description": "The shipment to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantChannelLabelShipmentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantChannelLabelShipmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantChannelLabelShipmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{merchantShipmentNo}/shippinglabel": {
      "get": {
        "tags": [
          "Shipments"
        ],
        "summary": "Gets a shipping label",
        "description": " Downloads the shipping label for the shipment. <br /> <br /> **NB:** it may take some time between the creation of the shipment and the availability of the label. <br />A \"404 not found\" error might indicate that the label is not available yet. <br />A \"410 gone\" the shipping label is not available anymore.",
        "operationId": "ShipmentShippingLabel",
        "parameters": [
          {
            "name": "merchantShipmentNo",
            "in": "path",
            "description": "The unique shipment reference as used by the merchant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "shippingLabel",
            "content": {
              "application/vnd.shippingLabel": {
                "schema": {
                  "type": "file",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/stocklocations": {
      "get": {
        "tags": [
          "Stock locations"
        ],
        "summary": "Gets stock locations",
        "description": "Gets the different stock locations in use. <br />**NB:** the response may include stock locations for 'marketplace fulfilment' solutions (e.g.: FBA, LVB, ZFS, etc.). <br />Use the retrieved IDs to get the stock of products in specific stock locations, such as the FBA stock.",
        "operationId": "StockLocationIndex",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantStockLocationWithCountryIsoResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stock locations"
        ],
        "summary": "Creates a stock location",
        "description": "Creates a stock location on ChannelEngine.",
        "operationId": "StockLocationCreate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantStockLocationCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantStockLocationCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantStockLocationCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/supportorder": {
      "post": {
        "tags": [
          "Support"
        ],
        "operationId": "SupportCreateTestOrders",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestOrdersRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestOrdersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestOrdersRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/v2/testshippinglabel": {
      "post": {
        "tags": [
          "Support"
        ],
        "operationId": "SupportCreateTestShippingLabels",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestShippingLabelsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestShippingLabelsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestShippingLabelsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/v2/targets": {
      "post": {
        "tags": [
          "Targets"
        ],
        "summary": "Creates multiple targets",
        "description": "Creates multiple targets on ChannelEngine.",
        "operationId": "TargetsCreateTargets",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateEditTargetRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateEditTargetRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateEditTargetRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfListOfTargetResponseVm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Targets"
        ],
        "summary": "Edits multiple targets",
        "description": "Edits multiple targets on ChannelEngine.",
        "operationId": "TargetsEditTargets",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateEditTargetRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateEditTargetRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateEditTargetRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfListOfTargetResponseVm"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Targets"
        ],
        "summary": "Deletes multiple targets",
        "description": "Deletes multiple targets on ChannelEngine.",
        "operationId": "TargetsDeleteTargets",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTargetRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTargetRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTargetRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfDeleteTargetsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Gets webhooks",
        "description": "Gets all webhooks created on ChannelEngine.",
        "operationId": "WebhooksGetAll",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantWebhookResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Creates a webhook or update a deleted webhook and undelete it",
        "description": "Creates a webhook on ChannelEngine. <br />If there is a deleted webhook with the introduced name , update it and undelete it.",
        "operationId": "WebhooksCreate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantWebhookRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantWebhookRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Updates a webhook",
        "description": "Updates a webhook on ChannelEngine.",
        "operationId": "WebhooksUpdate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantWebhookRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantWebhookRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/webhooks/{webhookName}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Deletes a webhook",
        "description": "Deletes a webhook from ChannelEngine.",
        "operationId": "WebhooksDelete",
        "parameters": [
          {
            "name": "webhookName",
            "in": "path",
            "description": "The unique name of a webhook you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddProductExtraDataRequests": {
        "type": "object",
        "properties": {
          "ProductExtraDataKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdvanceSettingsResponse": {
        "type": "object",
        "properties": {
          "ManageStock": {
            "type": "boolean"
          },
          "DisableAddressValidation": {
            "type": "boolean"
          },
          "SkipHouseNumberValidation": {
            "type": "boolean"
          },
          "SkipHouseNumberValidationForCountryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "SetOrdersToClosedOnImport": {
            "type": "boolean"
          },
          "DisableStockReservation": {
            "type": "boolean"
          },
          "DisableAutoOrderCancellation": {
            "type": "boolean"
          },
          "AutomaticallySetPhoneNumberIfEmpty": {
            "type": "string",
            "nullable": true
          },
          "DefaultVatRate": {
            "type": "number",
            "format": "decimal"
          },
          "OrderTooLongOnNewHoursOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkMerchantCreatePurchaseOrderInvoicesRequest": {
        "type": "object",
        "properties": {
          "Model": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPurchaseOrderInvoice"
            },
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkMerchantMarkExportAsFailedForOrdersRequest": {
        "type": "object",
        "properties": {
          "IdentifierType": {
            "$ref": "#/components/schemas/MerchantMarkExportAsFailedForOrderIdentifierTypeValue"
          },
          "Models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantMarkExportAsFailedForOrderIdentifier"
            },
            "description": "The value (of the selected type) to filter on",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePurchaseOrderShipmentLine": {
        "required": [
          "ChannelOrderNo",
          "MerchantProductNo"
        ],
        "type": "object",
        "properties": {
          "ChannelOrderNo": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Channel's identifier of the purchase order"
          },
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Merchant's identifier of the product.\r\nThe combination of ChannelOrderNo + MerchantProductNo identifies the order line this shipment line\r\nships."
          },
          "QuantityUnitOfMeasure": {
            "$ref": "#/components/schemas/PurchaseOrderLineUnitOfMeasure"
          },
          "Quantity": {
            "type": "integer",
            "description": "The quantity",
            "format": "int32"
          },
          "QuantityUnitSize": {
            "type": "integer",
            "description": "The case size, when QuantityUnitOfMeasure is 'CASES'. Otherwise, it is 1.",
            "format": "int32",
            "nullable": true
          },
          "ExpiryDate": {
            "type": "string",
            "description": "The date that determines the limit of consumption or use of a product.\r\nFor perishable products.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "For Create or Update"
      },
      "ChannelCarrierCollectionMethodApi": {
        "enum": [
          "DROP_OFF",
          "PICK_UP"
        ],
        "type": "string"
      },
      "ChannelCarrierRecommendationApi": {
        "enum": [
          "NEUTRAL",
          "RECOMMENDED",
          "DISCOMMENDED"
        ],
        "type": "string"
      },
      "ChannelChannelResponse": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "description": "The ID of the Channel.",
            "format": "int32",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "A boolean value indicating whether the Channel is enabled."
          },
          "ChannelName": {
            "type": "string",
            "description": "The name of the Channel.",
            "nullable": true
          },
          "Reference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelExportStatus": {
        "enum": [
          "AWAITING_EXPORT",
          "AWAITING_CHANNEL_RESPONSE",
          "SUCCEEDED",
          "FAILED_RETRY",
          "FAILED_NO_RETRY"
        ],
        "type": "string"
      },
      "ChannelGlobalChannelResponse": {
        "type": "object",
        "properties": {
          "CountryCode": {
            "type": "string",
            "description": "The country code of the Global Channel.",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The ID of the Global Channel.",
            "format": "int32",
            "nullable": true
          },
          "Channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelChannelResponse"
            },
            "description": "The status of the instances.",
            "nullable": true
          },
          "LanguageCode": {
            "type": "string",
            "description": "The language code of the Global Channel.",
            "nullable": true
          },
          "GlobalChannelName": {
            "type": "string",
            "description": "The name of the Global Channel.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelListedProductResponse": {
        "type": "object",
        "properties": {
          "ChannelProductNo": {
            "type": "string",
            "description": "The unique product reference used by the Channel",
            "nullable": true
          },
          "ChannelStatus": {
            "$ref": "#/components/schemas/ListedProductChannelStatus"
          },
          "Ean": {
            "type": "string",
            "description": "EAN",
            "nullable": true
          },
          "ExportStatus": {
            "$ref": "#/components/schemas/ListedProductExportStatus"
          },
          "MerchantProductNo": {
            "type": "string",
            "description": "Your product number (SKU)",
            "nullable": true
          },
          "LastExportedPrice": {
            "type": "number",
            "description": "Your product last exported price",
            "format": "decimal",
            "nullable": true
          },
          "LastExportedStock": {
            "type": "integer",
            "description": "Your product last exported stock",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfChannelGlobalChannelResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelGlobalChannelResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfChannelListedProductResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelListedProductResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfCustomFieldResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfIDocumentByFilter": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDocumentByFilter"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfIPurchaseOrderByFilter": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPurchaseOrderByFilter"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfIPurchaseOrderShipmentByFilter": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPurchaseOrderShipmentByFilter"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantCancellationResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantCancellationResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantFulfillmentStockStockLocationsResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantFulfillmentStockStockLocationsResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantNotificationResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantNotificationResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantOfferGetStockResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantOfferGetStockResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantOrderResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantOrderResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantProductAttributeGroupWithLinkedChannelsResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductAttributeGroupWithLinkedChannelsResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantProductAttributeGroupWithProductExtraDataResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductAttributeGroupWithProductExtraDataResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantProductBundleResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductBundleResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantProductResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantProductWithBuyBoxPrice": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductWithBuyBoxPrice"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantReturnResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantReturnResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantSettlementReportsResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantSettlementReportsResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantShipmentLabelCarrierResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLabelCarrierResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantShipmentResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantSingleOrderReturnResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantSingleOrderReturnResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantStockLocationWithCountryIsoResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantStockLocationWithCountryIsoResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantWebhookResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantWebhookResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of items in the current response.",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Condition": {
        "enum": [
          "NEW",
          "NEW_REFURBISHED",
          "USED_AS_NEW",
          "USED_GOOD",
          "USED_REASONABLE",
          "USED_MEDIOCRE",
          "UNKNOWN",
          "USED_VERY_GOOD"
        ],
        "type": "string"
      },
      "CreateEditTargetRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEditTargetView"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateEditTargetView": {
        "type": "object",
        "properties": {
          "TargetInclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "TargetExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "Month": {
            "type": "integer",
            "format": "int32"
          },
          "Year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreatePurchaseOrderShipment": {
        "type": "object",
        "properties": {
          "CarrierShipmentNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The field is also known as PRO number is a unique number assigned by the carrier.\r\nIt is used to identify and track the shipment that goes out for delivery.\r\nThis field is mandatory for US, CA, MX shipment confirmations of Amazon Vendor",
            "nullable": true
          },
          "CarrierName": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the carrier",
            "nullable": true
          },
          "MerchantShipmentNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The number the merchant uses to identify this PO shipment",
            "nullable": true
          },
          "ShipmentType": {
            "$ref": "#/components/schemas/ShipmentType"
          },
          "ShippedDate": {
            "type": "string",
            "description": "When the shipment will be/was shipped",
            "format": "date-time"
          },
          "EstimatedDeliveryDate": {
            "type": "string",
            "description": "Estimated delivery time in the channel's warehouse",
            "format": "date-time"
          },
          "SellingPartyId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The merchant's identifying 'selling party number' at the channel",
            "nullable": true
          },
          "ShipToPartyId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The destination's 'ship to party' number at the channel",
            "nullable": true
          },
          "BillOfLadingNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.",
            "nullable": true
          },
          "ShipmentWeightUnitOfMeasure": {
            "$ref": "#/components/schemas/WeightUnitOfMeasure"
          },
          "ShipmentWeight": {
            "type": "number",
            "description": "The shipment's weight",
            "format": "decimal",
            "nullable": true
          },
          "ShipmentVolumeUnitOfMeasure": {
            "$ref": "#/components/schemas/VolumeUnitOfMeasure"
          },
          "ShipmentVolume": {
            "type": "number",
            "description": "The shipment's volume",
            "format": "decimal",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangePurchaseOrderShipmentLine"
            },
            "description": "Shipment information for each shipped product",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTestExtraDataLine": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTestOrderLine": {
        "required": [
          "MerchantProductNo",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "minLength": 1,
            "type": "string"
          },
          "Quantity": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "FeeRate": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "format": "decimal"
          },
          "FeeFixed": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "format": "decimal"
          },
          "IsFulfillmentByMarketplace": {
            "type": "boolean",
            "nullable": true
          },
          "OverrideVatTax": {
            "type": "boolean",
            "nullable": true
          },
          "VatTaxAmount": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LatestDeliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExactDeliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExpectedShipmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LatestShipmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExactShipmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTestExtraDataLine"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTestOrderRequest": {
        "required": [
          "ChannelId",
          "CurrencyCode",
          "IsFulfillmentByMarketplace"
        ],
        "type": "object",
        "properties": {
          "ChannelId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "CurrencyCode": {
            "minLength": 1,
            "type": "string"
          },
          "CocNo": {
            "type": "string",
            "nullable": true
          },
          "VatNo": {
            "type": "string",
            "nullable": true
          },
          "ShippingCostsInclVat": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "nullable": true
          },
          "ChannelOrderNo": {
            "type": "string",
            "nullable": true
          },
          "CommercialOrderNo": {
            "type": "string",
            "nullable": true
          },
          "IsFulfillmentByMarketplace": {
            "type": "boolean"
          },
          "ChannelShipmentNo": {
            "type": "string",
            "nullable": true
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/SupportOrderAddress"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/SupportOrderAddress"
          },
          "PaymentMethod": {
            "type": "string",
            "nullable": true
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTestExtraDataLine"
            },
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTestOrderLine"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTestOrdersRequest": {
        "required": [
          "NumberOfOrdersCopies",
          "Order"
        ],
        "type": "object",
        "properties": {
          "NumberOfOrdersCopies": {
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "$ref": "#/components/schemas/CreateTestOrderRequest"
          }
        },
        "additionalProperties": false
      },
      "CreateTestShippingLabelsRequest": {
        "required": [
          "MerchantShipmentNos"
        ],
        "type": "object",
        "properties": {
          "MerchantShipmentNos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "CreatedByType": {
        "enum": [
          "MERCHANT",
          "CHANNEL"
        ],
        "type": "string"
      },
      "CreatorFilter": {
        "enum": [
          "ONLY_FROM_MERCHANT",
          "ONLY_FROM_CHANNEL",
          "MIXED"
        ],
        "type": "string"
      },
      "CreatorType": {
        "enum": [
          "MERCHANT",
          "CHANNEL",
          "BOTH"
        ],
        "type": "string"
      },
      "CustomFieldResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "nullable": true
          },
          "IsPublic": {
            "type": "boolean"
          },
          "IsUsed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DeleteTargetRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeleteTargetView"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteTargetResponseVm": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Month": {
            "type": "integer",
            "format": "int32"
          },
          "Year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DeleteTargetView": {
        "type": "object",
        "properties": {
          "Month": {
            "type": "integer",
            "format": "int32"
          },
          "Year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DeleteTargetsResponse": {
        "type": "object",
        "properties": {
          "DeletedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeleteTargetResponseVm"
            },
            "nullable": true
          },
          "NotExistingTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeleteTargetResponseVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentIdentifierType": {
        "enum": [
          "CHANNEL_ORDER_NO",
          "MERCHANT_ORDER_NO"
        ],
        "type": "string"
      },
      "ExtraDataType": {
        "enum": [
          "TEXT",
          "NUMBER",
          "URL",
          "IMAGEURL"
        ],
        "type": "string"
      },
      "FreezeProductRequest": {
        "required": [
          "Action",
          "MerchantProductNo",
          "Reason"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "minLength": 1,
            "type": "string"
          },
          "Reason": {
            "minLength": 1,
            "type": "string"
          },
          "Action": {
            "$ref": "#/components/schemas/FreezingActionRequest"
          }
        },
        "additionalProperties": false
      },
      "FreezingActionRequest": {
        "enum": [
          "FREEZE",
          "UNFREEZE"
        ],
        "type": "string"
      },
      "FulfillmentType": {
        "enum": [
          "ALL",
          "ONLY_MERCHANT",
          "ONLY_CHANNEL",
          "MIXED",
          "INCLUDES_MERCHANT",
          "INCLUDES_CHANNEL"
        ],
        "type": "string"
      },
      "Gender": {
        "enum": [
          "MALE",
          "FEMALE",
          "NOT_APPLICABLE"
        ],
        "type": "string"
      },
      "IDocumentByFilter": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "format": "int32"
          },
          "GlobalChannelId": {
            "type": "integer",
            "format": "int32"
          },
          "OrderId": {
            "type": "integer",
            "format": "int32"
          },
          "ChannelOrderNo": {
            "type": "string",
            "nullable": true
          },
          "MerchantOrderNo": {
            "type": "string",
            "nullable": true
          },
          "ReturnId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MerchantReturnNo": {
            "type": "string",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "DocumentNo": {
            "type": "string",
            "nullable": true
          },
          "Type": {
            "$ref": "#/components/schemas/OrderDocumentType"
          },
          "LinkedWith": {
            "$ref": "#/components/schemas/OrderDocumentLinkedWith"
          },
          "Source": {
            "$ref": "#/components/schemas/OrderDocumentSource"
          },
          "MediaType": {
            "$ref": "#/components/schemas/OrderDocumentMediaType"
          },
          "IsMerchantAcknowledged": {
            "type": "boolean"
          },
          "IsFileDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IImportInformation": {
        "type": "object",
        "properties": {
          "ImportContainers": {
            "type": "string",
            "nullable": true
          },
          "InternationalCommercialTerms": {
            "type": "string",
            "nullable": true
          },
          "MethodOfPayment": {
            "type": "string",
            "nullable": true
          },
          "PortOfDelivery": {
            "type": "string",
            "nullable": true
          },
          "ShippingInstructions": {
            "type": "string",
            "nullable": true
          },
          "DealCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPurchaseOrderByFilter": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "format": "int32"
          },
          "ChannelName": {
            "type": "string",
            "nullable": true
          },
          "GlobalChannelName": {
            "type": "string",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChannelPurchaseOrderNo": {
            "type": "string",
            "nullable": true
          },
          "MerchantPurchaseOrderNo": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/ModulesPurchaseOrderStatus"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Type": {
            "$ref": "#/components/schemas/ModulesPurchaseOrderType"
          },
          "FromShipDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ToShipDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "FromDeliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ToDeliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ImportInformation": {
            "$ref": "#/components/schemas/IImportInformation"
          },
          "SellingParty": {
            "$ref": "#/components/schemas/IVendorParty"
          },
          "ShipToParty": {
            "$ref": "#/components/schemas/IVendorParty"
          },
          "BuyingParty": {
            "$ref": "#/components/schemas/IVendorParty"
          },
          "BillingParty": {
            "$ref": "#/components/schemas/IVendorParty"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPurchaseOrderLineByFilter"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPurchaseOrderLineByFilter": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChannelOrderLineNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelProductNo": {
            "type": "string",
            "nullable": true
          },
          "MerchantProductNo": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          },
          "IsBackOrderAllowed": {
            "type": "boolean"
          },
          "UnitOfMeasure": {
            "$ref": "#/components/schemas/PurchaseOrderLineUnitOfMeasure"
          },
          "UnitSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "NetCostAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "NetCostCurrency": {
            "type": "string",
            "nullable": true
          },
          "ListPriceAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AcknowledgedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LineTotal": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPurchaseOrderShipmentByFilter": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ChannelEngine identifier of the shipment",
            "format": "int32",
            "nullable": true
          },
          "MerchantShipmentNo": {
            "type": "string",
            "description": "The number the merchant uses to id this PO shipment",
            "nullable": true
          },
          "ChannelShipmentNo": {
            "type": "string",
            "description": "The number the channel uses to id this PO shipment",
            "nullable": true
          },
          "ShipmentType": {
            "$ref": "#/components/schemas/ShipmentType"
          },
          "ShippedDate": {
            "type": "string",
            "description": "When the shipment was shipped",
            "format": "date-time"
          },
          "EstimatedDeliveryDate": {
            "type": "string",
            "description": "Estimated delivery time in the channel's warehouse",
            "format": "date-time"
          },
          "CarrierName": {
            "type": "string",
            "description": "Name of the carrier",
            "nullable": true
          },
          "CarrierShipmentNo": {
            "type": "string",
            "description": "The number the carrier uses to id this PO shipment",
            "nullable": true
          },
          "BillOfLadingNumber": {
            "type": "string",
            "description": "Bill of Lading number (not unique for a shipment)",
            "nullable": true
          },
          "ShipmentWeightUnitOfMeasure": {
            "$ref": "#/components/schemas/WeightUnitOfMeasure"
          },
          "ShipmentWeight": {
            "type": "number",
            "description": "The shipment's weight",
            "format": "decimal",
            "nullable": true
          },
          "ShipmentVolumeUnitOfMeasure": {
            "$ref": "#/components/schemas/VolumeUnitOfMeasure"
          },
          "ShipmentVolume": {
            "type": "number",
            "description": "The shipment's volume",
            "format": "decimal",
            "nullable": true
          },
          "LastMerchantUpdatedAt": {
            "type": "string",
            "description": "The last time the shipment was updated by the merchant",
            "format": "date-time"
          },
          "LastExportedAt": {
            "type": "string",
            "description": "The last time the shipment was exported to the channel",
            "format": "date-time",
            "nullable": true
          },
          "LastExportStatus": {
            "$ref": "#/components/schemas/PurchaseOrderRelatedItemExportStatus"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPurchaseOrderShipmentLineByFilter"
            },
            "description": "The products in this PO shipment",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPurchaseOrderShipmentLineByFilter": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ChannelEngine identifier of the shipment line",
            "format": "int32",
            "nullable": true
          },
          "ChannelOrderNo": {
            "type": "string",
            "description": "The number the channel uses to identify the purchase order,\r\nwhich this line (partially) ships.",
            "nullable": true
          },
          "ItemSequenceNumber": {
            "type": "string",
            "description": "Item sequence number for the item. The first item will be 001, the second 002, and so on.\r\nThis number is used as a reference to refer to this item from the carton or pallet level.",
            "nullable": true
          },
          "ChannelProductNo": {
            "type": "string",
            "description": "The number the channel uses to identify the product",
            "nullable": true
          },
          "MerchantProductNo": {
            "type": "string",
            "description": "The number the merchant uses to identify the product",
            "nullable": true
          },
          "QuantityUnitOfMeasure": {
            "$ref": "#/components/schemas/PurchaseOrderLineUnitOfMeasure"
          },
          "Quantity": {
            "type": "integer",
            "description": "The quantity",
            "format": "int32"
          },
          "QuantityUnitSize": {
            "type": "integer",
            "description": "The case size, in the event that we ordered using cases. Otherwise, it is 1.",
            "format": "int32",
            "nullable": true
          },
          "ExpiryDate": {
            "type": "string",
            "description": "The date that determines the limit of consumption or use of a product.\r\nFor perishable products.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IRefund": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Reason": {
            "$ref": "#/components/schemas/RefundReason"
          },
          "ChannelExportStatus": {
            "$ref": "#/components/schemas/ModuleChannelExportStatus"
          },
          "SubTotalInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalSubTotalInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalSubTotalTax": {
            "type": "number",
            "format": "decimal"
          },
          "ShippingCostInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "ShippingCostTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalShippingCostInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalShippingCostTax": {
            "type": "number",
            "format": "decimal"
          },
          "TotalInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "TotalTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalTotalInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalTotalTax": {
            "type": "number",
            "format": "decimal"
          },
          "MerchantComment": {
            "type": "string",
            "nullable": true
          },
          "MerchantRefundNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelRefundNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelOrderNo": {
            "type": "string",
            "nullable": true
          },
          "CommercialOrderNo": {
            "type": "string",
            "nullable": true
          },
          "CreatedByType": {
            "$ref": "#/components/schemas/CreatedByType"
          },
          "RefundDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExternalBatchNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelAcknowledgedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "MerchantAcknowledgedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "OrderId": {
            "type": "integer",
            "format": "int32"
          },
          "ChannelId": {
            "type": "integer",
            "format": "int32"
          },
          "ReturnId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChannelReturnNo": {
            "type": "string",
            "nullable": true
          },
          "Currency": {
            "$ref": "#/components/schemas/IRefundCurrency"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRefundLine"
            },
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IRefundCurrency": {
        "type": "object",
        "properties": {
          "TenantCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "OriginalCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "ExchangeRate": {
            "type": "number",
            "format": "decimal"
          }
        },
        "additionalProperties": false
      },
      "IRefundLine": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "LineAmountInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "LineAmountTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalLineAmountInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalLineAmountTax": {
            "type": "number",
            "format": "decimal"
          },
          "LineTotalInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "LineTotalTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalLineTotalInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "OriginalLineTotalTax": {
            "type": "number",
            "format": "decimal"
          },
          "CalculatedQuantity": {
            "type": "number",
            "format": "decimal"
          },
          "RefundId": {
            "type": "integer",
            "format": "int32"
          },
          "OrderLineId": {
            "type": "integer",
            "format": "int32"
          },
          "ReturnLineId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChannelOrderLineNo": {
            "type": "string",
            "nullable": true
          },
          "MerchantRefundLineNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelProductNo": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "MerchantProductNo": {
            "type": "string",
            "nullable": true
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IReturn": {
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IReturnLine"
            },
            "nullable": true
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IReturnExtraData"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "$ref": "#/components/schemas/ModuleReturnStatus"
          },
          "ChannelExportStatus": {
            "$ref": "#/components/schemas/ModuleChannelExportStatus"
          },
          "Reason": {
            "$ref": "#/components/schemas/ModuleReturnReason"
          },
          "MerchantComment": {
            "type": "string",
            "nullable": true
          },
          "MerchantReturnNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelReturnNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelOrderNo": {
            "type": "string",
            "nullable": true
          },
          "CreatedByType": {
            "$ref": "#/components/schemas/CreatedByType"
          },
          "ReturnDate": {
            "type": "string",
            "format": "date-time"
          },
          "OrderDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExternalBatchNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelAcknowledgedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "MerchantAcknowledgedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "OrderId": {
            "type": "integer",
            "format": "int32"
          },
          "ChannelId": {
            "type": "integer",
            "format": "int32"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IReturnExtraData": {
        "type": "object",
        "properties": {
          "ReturnId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          },
          "IsPublic": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IReturnLine": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ReturnId": {
            "type": "integer",
            "format": "int32"
          },
          "OrderLineId": {
            "type": "integer",
            "format": "int32"
          },
          "MerchantReturnLineNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelReturnLineNo": {
            "type": "string",
            "nullable": true
          },
          "MerchantOrderLineNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelOrderLineNo": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          },
          "HandlingResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IReturnLineHandlingResult"
            },
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "MerchantProductNo": {
            "type": "string",
            "nullable": true
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IReturnLineHandlingResult": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ReturnLineId": {
            "type": "integer",
            "format": "int32"
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          },
          "Action": {
            "$ref": "#/components/schemas/ReturnHandlingAction"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IVendorParty": {
        "type": "object",
        "properties": {
          "PartyId": {
            "type": "string",
            "nullable": true
          },
          "TaxRegistrationType": {
            "$ref": "#/components/schemas/ModulesTaxRegistrationType"
          },
          "TaxRegistrationNo": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "AddressLine1": {
            "type": "string",
            "nullable": true
          },
          "AddressLine2": {
            "type": "string",
            "nullable": true
          },
          "AddressLine3": {
            "type": "string",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": true
          },
          "County": {
            "type": "string",
            "nullable": true
          },
          "District": {
            "type": "string",
            "nullable": true
          },
          "StateOrRegion": {
            "type": "string",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "nullable": true
          },
          "CountryCode": {
            "type": "string",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JsonPatchDocument": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Operation"
        },
        "description": "Array of operations to perform"
      },
      "ListedProductChannelStatus": {
        "enum": [
          "NONE",
          "PUBLISHED",
          "NOT_PUBLISHED",
          "UNKNOWN",
          "UNDER_REVIEW",
          "INVALID_ON_CREATE"
        ],
        "type": "string"
      },
      "ListedProductExportStatus": {
        "enum": [
          "CREATED",
          "UPDATED",
          "DELETED",
          "CREATE_FAILED"
        ],
        "type": "string"
      },
      "MancoReason": {
        "enum": [
          "NOT_IN_STOCK",
          "DAMAGED",
          "INCOMPLETE",
          "CLIENT_CANCELLED",
          "INVALID_ADDRESS",
          "OTHER"
        ],
        "type": "string"
      },
      "MerchantAcknowledgeDocumentRequest": {
        "required": [
          "DocumentId"
        ],
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32"
          },
          "DocumentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantAcknowledgePurchaseOrder": {
        "type": "object",
        "properties": {
          "Identifier": {
            "type": "string",
            "nullable": true
          },
          "MerchantOrderNo": {
            "type": "string",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantAcknowledgePurchaseOrderLine"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantAcknowledgePurchaseOrderLine": {
        "type": "object",
        "properties": {
          "OrderLineIdentifier": {
            "type": "string",
            "nullable": true
          },
          "AcknowledgementCode": {
            "$ref": "#/components/schemas/PurchaseOrderAcknowledgementCode"
          },
          "AcknowledgedQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "RejectionReason": {
            "$ref": "#/components/schemas/PurchaseOrderRejectionReason"
          },
          "ScheduledShipDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantAcknowledgeRefund": {
        "type": "object",
        "properties": {
          "Identifier": {
            "type": "string",
            "nullable": true
          },
          "MerchantRefundNo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantAcknowledgeReturn": {
        "type": "object",
        "properties": {
          "Identifier": {
            "type": "string",
            "nullable": true
          },
          "MerchantReturnNo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantAddressResponse": {
        "type": "object",
        "properties": {
          "Line1": {
            "type": "string",
            "description": "The first address line, use this field if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "Line2": {
            "type": "string",
            "description": "The second address line, use this field if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "Line3": {
            "type": "string",
            "description": "The third address line, use this field if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "Gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "CompanyName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Company addressed too.",
            "nullable": true
          },
          "FirstName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the customer.",
            "nullable": true
          },
          "LastName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the customer (includes the surname prefix [tussenvoegsel] like 'de', 'van', 'du').",
            "nullable": true
          },
          "StreetName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the street (without house number information)\r\nThis field might be empty if address validation is disabled in ChannelEngine or Line1/Line2 is used.",
            "nullable": true
          },
          "HouseNr": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The house number\r\nThis field might be empty if address validation is disabled in ChannelEngine or Line1/Line2 is used.",
            "nullable": true
          },
          "HouseNrAddition": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Addition to the house number\r\nIf the address is: Groenhazengracht 2c, the address will be:\r\nStreetName: Groenhazengracht\r\nHouseNo: 2\r\nHouseNrAddition: c\r\nThis field might be empty if address validation is disabled in ChannelEngine or Line1/Line2 is used.",
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "The zip or postal code.",
            "nullable": true
          },
          "City": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the city.",
            "nullable": true
          },
          "Region": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. State/province/region.",
            "nullable": true
          },
          "CountryIso": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "For example: NL, BE, FR.",
            "nullable": true
          },
          "Original": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The address as a single string: use in case the address lines are entered\r\nas single lines and later parsed into street, house number and house number addition.",
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "MerchantBundleOrderLineResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantCancellationLineRequest": {
        "required": [
          "MerchantProductNo",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Quantity of the product to cancel.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantCancellationLineResponse": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique cancellation line identifier used by ChannelEngine.",
            "format": "int32"
          },
          "MerchantProductNo": {
            "type": "string",
            "description": "The unique product reference used by the Merchant.",
            "nullable": true
          },
          "ChannelProductNo": {
            "type": "string",
            "description": "The unique product reference used by the Channel.",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Quantity of the product to cancel.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantCancellationRequest": {
        "required": [
          "Lines",
          "MerchantCancellationNo",
          "MerchantOrderNo"
        ],
        "type": "object",
        "properties": {
          "MerchantCancellationNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The unique cancellation reference used by the Merchant (sku)."
          },
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique order reference used by the Merchant."
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantCancellationLineRequest"
            }
          },
          "Reason": {
            "type": "string",
            "description": "Reason for cancellation (text).",
            "nullable": true
          },
          "ReasonCode": {
            "$ref": "#/components/schemas/MancoReason"
          }
        },
        "additionalProperties": false
      },
      "MerchantCancellationResponse": {
        "required": [
          "Lines",
          "MerchantCancellationNo",
          "MerchantOrderNo"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique cancellation identifier used by ChannelEngine.",
            "format": "int32"
          },
          "MerchantCancellationNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The unique cancellation reference used by the Merchant (sku)."
          },
          "MerchantOrderNo": {
            "minLength": 1,
            "type": "string",
            "description": "The unique order reference used by the Merchant."
          },
          "ChannelOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Channel.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantCancellationLineResponse"
            }
          },
          "CreatedAt": {
            "type": "string",
            "description": "The date at which the cancellation was created in ChannelEngine.",
            "format": "date-time"
          },
          "Reason": {
            "type": "string",
            "description": "Reason for cancellation (text).",
            "nullable": true
          },
          "ReasonCode": {
            "$ref": "#/components/schemas/MancoReason"
          }
        },
        "additionalProperties": false
      },
      "MerchantChannelLabelShipmentRequest": {
        "required": [
          "ChannelMethodCode",
          "Dimensions",
          "Lines",
          "MerchantOrderNo",
          "MerchantShipmentNo",
          "Weight"
        ],
        "type": "object",
        "properties": {
          "Dimensions": {
            "$ref": "#/components/schemas/MerchantShipmentPackageDimensionsRequest"
          },
          "Weight": {
            "$ref": "#/components/schemas/MerchantShipmentPackageWeightRequest"
          },
          "ChannelMethodCode": {
            "minLength": 1,
            "type": "string"
          },
          "MerchantShipmentNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipment reference used by the Merchant."
          },
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique order reference used by the Merchant."
          },
          "ShippedFromCountryCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The code of the country from where the package is being shipped.",
            "nullable": true
          },
          "ShippedFromStockLocationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLineRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "MerchantCreateRefund": {
        "type": "object",
        "properties": {
          "OrderIdentifier": {
            "type": "string",
            "nullable": true
          },
          "MerchantRefundNo": {
            "type": "string",
            "nullable": true
          },
          "Reason": {
            "$ref": "#/components/schemas/RefundReason"
          },
          "MerchantComment": {
            "type": "string",
            "nullable": true
          },
          "ShippingAmountInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "RefundDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantCreateRefundLine"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantCreateRefundLine": {
        "type": "object",
        "properties": {
          "OrderLineIdentifier": {
            "type": "string",
            "nullable": true
          },
          "LineAmountInclTax": {
            "type": "number",
            "format": "decimal"
          },
          "MerchantRefundLineNo": {
            "type": "string",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantCreateReportResponse": {
        "type": "object",
        "properties": {
          "ReportId": {
            "type": "string",
            "format": "uuid"
          },
          "Status": {
            "$ref": "#/components/schemas/ReportStatus"
          }
        },
        "additionalProperties": false
      },
      "MerchantCreateReturn": {
        "type": "object",
        "properties": {
          "OrderIdentifier": {
            "type": "string",
            "nullable": true
          },
          "MerchantReturnNo": {
            "type": "string",
            "nullable": true
          },
          "Reason": {
            "$ref": "#/components/schemas/ModuleReturnReason"
          },
          "MerchantComment": {
            "type": "string",
            "nullable": true
          },
          "ReturnDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantCreateReturnLine"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantCreateReturnLine": {
        "type": "object",
        "properties": {
          "OrderLineIdentifier": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          },
          "MerchantReturnLineNo": {
            "type": "string",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantCreateSettlementsReportRequest": {
        "required": [
          "SettlementIds",
          "Type"
        ],
        "type": "object",
        "properties": {
          "SettlementIds": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/ReportType"
          }
        },
        "additionalProperties": false
      },
      "MerchantFulfillmentStockLocationItemResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The ChannelEngine id of the stock location.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The ChannelEngine name of the stock location.",
            "nullable": true
          },
          "ReservedQuantity": {
            "type": "integer",
            "description": "Total quantity reserved for orders.",
            "format": "int32"
          },
          "AvailableQuantity": {
            "type": "integer",
            "description": "The quantity that is available for fulfillment orders.",
            "format": "int32"
          },
          "AllocatedQuantity": {
            "type": "integer",
            "description": "Quantity pending customer order",
            "format": "int32"
          },
          "InTransitQuantity": {
            "type": "integer",
            "description": "Quantity in transit / 'transshipment' (Amazon)",
            "format": "int32"
          },
          "FulfillmentCenterProcessingQuantity": {
            "type": "integer",
            "description": "Quantity that is in processing at the fulfillment warehouse (center)",
            "format": "int32"
          },
          "DefectiveQuantity": {
            "type": "integer",
            "description": "The number of units in defective disposition.",
            "format": "int32"
          },
          "ExpiredQuantity": {
            "type": "integer",
            "description": "The number of units in expired disposition.",
            "format": "int32"
          },
          "WarehouseDamagedQuantity": {
            "type": "integer",
            "description": "The number of units in warehouse damaged disposition.",
            "format": "int32"
          },
          "CustomerDamagedQuantity": {
            "type": "integer",
            "description": "The number of units in customer damaged disposition.",
            "format": "int32"
          },
          "CarrierDamagedQuantity": {
            "type": "integer",
            "description": "The number of units in carrier damaged disposition.",
            "format": "int32"
          },
          "PendingPickupQuantity": {
            "type": "integer",
            "description": "The number of units in pending pickup disposition.",
            "format": "int32"
          },
          "InboundQuantity": {
            "type": "integer",
            "description": "Total quantity that is inbound (in inbound [aka fulfillment] shipment from the seller to the fulfillment warehouse)",
            "format": "int32"
          },
          "ReturnQuantity": {
            "type": "integer",
            "description": "Total quantity in on going returns",
            "format": "int32"
          },
          "ResearchingQuantity": {
            "type": "integer",
            "description": "Quantity that is being researched",
            "format": "int32"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The timestamp of the last stock update for the stock location.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MerchantFulfillmentStockStockLocationsResponse": {
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "description": "The product SKU.",
            "nullable": true
          },
          "StockLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantFulfillmentStockLocationItemResponse"
            },
            "description": "The ChannelEngine id of the stock location.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantGetReportStatusResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/ReportStatus"
          },
          "ResourceUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantHandleReturn": {
        "type": "object",
        "properties": {
          "ReturnIdentifier": {
            "type": "string",
            "nullable": true
          },
          "ReturnLineIdentifier": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          },
          "Action": {
            "$ref": "#/components/schemas/ReturnHandlingAction"
          }
        },
        "additionalProperties": false
      },
      "MerchantInvoiceUploadRequest": {
        "required": [
          "InvoiceContent",
          "InvoiceNumber"
        ],
        "type": "object",
        "properties": {
          "InvoiceContent": {
            "minLength": 1,
            "type": "string",
            "description": "Data needed to upload an invoice."
          },
          "InvoiceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "The invoice number used in the invoice."
          }
        },
        "additionalProperties": false
      },
      "MerchantMarkExportAsFailedForOrderIdentifier": {
        "type": "object",
        "properties": {
          "Identifier": {
            "type": "string",
            "nullable": true
          },
          "FailExportMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantMarkExportAsFailedForOrderIdentifierTypeValue": {
        "enum": [
          "ORDER_ID"
        ],
        "type": "string"
      },
      "MerchantNotificationResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier used by ChannelEngine.",
            "format": "int32"
          },
          "Read": {
            "type": "boolean",
            "description": "Indicating whether the notification is already read using the backoffice."
          },
          "CreatedAt": {
            "type": "string",
            "description": "Get the created date time.",
            "format": "date-time"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "Type": {
            "$ref": "#/components/schemas/NotificationType"
          }
        },
        "additionalProperties": false
      },
      "MerchantOfferGetStockResponse": {
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "description": "The product SKU.",
            "nullable": true
          },
          "StockLocationId": {
            "type": "integer",
            "description": "The ChannelEngine id of the stock location.",
            "format": "int32"
          },
          "Stock": {
            "type": "integer",
            "description": "The quantity of products in stock at the stock location.",
            "format": "int32"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The timestamp of the last stock update for the stock location.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MerchantOfferStockUpdateRequest": {
        "required": [
          "MerchantProductNo",
          "StockLocations"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "StockLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantStockLocationUpdateRequest"
            },
            "description": "Stock locations data"
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderAcknowledgementRequest": {
        "required": [
          "MerchantOrderNo",
          "OrderId"
        ],
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Your own order reference, this will be used in consecutive order processing API calls."
          },
          "OrderId": {
            "type": "integer",
            "description": "The ChannelEngine order ID of the order you would like to acknowledge.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderCommentUpdateRequest": {
        "required": [
          "MerchantComment"
        ],
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Your own order reference for the order you would like to update the comment for.\r\nEither this field or OrderId is required",
            "nullable": true
          },
          "OrderId": {
            "type": "integer",
            "description": "The ChannelEngine order ID of the order you would like to update the comment for.\r\nEither this field or MerchantOrderNo is required",
            "format": "int32",
            "nullable": true
          },
          "MerchantComment": {
            "minLength": 1,
            "type": "string",
            "description": "The merchant comment you would like add / update for the order."
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderLineExtraDataResponse": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderLineResponse": {
        "required": [
          "ChannelProductNo",
          "Quantity",
          "UnitPriceInclVat"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier used by ChannelEngine.",
            "format": "int32"
          },
          "ChannelOrderLineNo": {
            "type": "string",
            "description": "The order line reference used by the channel.",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/OrderStatusView"
          },
          "IsFulfillmentByMarketplace": {
            "type": "boolean",
            "description": "Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?."
          },
          "Gtin": {
            "type": "string",
            "description": "Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The product description (or title) provided by the channel.",
            "nullable": true
          },
          "StockLocation": {
            "$ref": "#/components/schemas/MerchantStockLocationResponse"
          },
          "UnitVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the value of a single unit of the ordered product\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "LineTotalInclVat": {
            "type": "number",
            "description": "The total value of the order line (quantity * unit price) including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "LineVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the total value of the order line (quantity * unit price)\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalUnitPriceInclVat": {
            "type": "number",
            "description": "The value of a single unit of the ordered product including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalUnitVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the value of a single unit of the ordered product\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalLineTotalInclVat": {
            "type": "number",
            "description": "The total value of the order line (quantity * unit price) including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalLineVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the total value of the order line (quantity * unit price)\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalFeeFixed": {
            "type": "number",
            "description": "A percentage fee that is charged by the Channel for this orderline.\r\nThis fee rate is based on the currency of client\r\nThis field is optional, send 0 if not applicable.",
            "format": "decimal"
          },
          "BundleProductMerchantProductNo": {
            "type": "string",
            "description": "If the product is ordered part of a bundle, this field contains the MerchantProductNo of\r\nthe product bundle.",
            "nullable": true
          },
          "BundleOrderLineId": {
            "type": "integer",
            "description": "If the product is ordered part of a bundle",
            "format": "int32",
            "nullable": true
          },
          "JurisCode": {
            "type": "string",
            "description": "State assigned code identifying the jurisdiction.",
            "nullable": true
          },
          "JurisName": {
            "type": "string",
            "description": "Name of a tax jurisdiction.",
            "nullable": true
          },
          "VatRate": {
            "type": "number",
            "description": "VAT rate of the orderline.",
            "format": "decimal"
          },
          "UnitPriceExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "LineTotalExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "OriginalUnitPriceExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "OriginalLineTotalExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantOrderLineExtraDataResponse"
            },
            "nullable": true
          },
          "ChannelProductNo": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the channel."
          },
          "MerchantProductNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the merchant.",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items of the product.",
            "format": "int32"
          },
          "CancellationRequestedQuantity": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items for which cancellation was requested by the customer.\r\nSome channels allow a customer to cancel an order until it has been shipped.\r\nWhen an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.\r\nUse this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine.",
            "format": "int32"
          },
          "UnitPriceInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "The value of a single unit of the ordered product including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal"
          },
          "FeeFixed": {
            "minimum": 0,
            "type": "number",
            "description": "A fixed fee that is charged by the Channel for this orderline.\r\nThis fee rate is based on the currency of the Channel\r\nThis field is optional, send 0 if not applicable.",
            "format": "decimal"
          },
          "FeeRate": {
            "minimum": 0,
            "type": "number",
            "description": "A percentage fee that is charged by the Channel for this orderline.\r\nThis field is optional, send 0 if not applicable.",
            "format": "decimal"
          },
          "Condition": {
            "$ref": "#/components/schemas/Condition"
          },
          "ExactDeliveryDate": {
            "type": "string",
            "description": "The exact date when the order (line) must be delivered. Delivery cannot occur before or after this date.\r\nThis can be empty if the channel does not provide this info.",
            "format": "date-time",
            "nullable": true
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "description": "The date when the order should be delivered. This field must always contain a value, either the exact date or the latest possible date.\r\nIf this value is not set, the system defaults to using the order date plus two days as the expected delivery date.\r\nThis field is used for backwards compatibility.",
            "format": "date-time",
            "nullable": true
          },
          "LatestDeliveryDate": {
            "type": "string",
            "description": "The latest possible date when the order (line) must be delivered. Delivery can occur on or before this date, but not after.\r\nThis can be empty if the channel does not provide this info.",
            "format": "date-time",
            "nullable": true
          },
          "ExactShipmentDate": {
            "type": "string",
            "description": "The exact date when the order (line) must be shipped. Shipment cannot occur before or after this date.\r\nThis can be empty if the channel does not provide this info.",
            "format": "date-time",
            "nullable": true
          },
          "ExpectedShipmentDate": {
            "type": "string",
            "description": "The date when when the order (line) should be shipped.\r\nThis can be empty if the channel does not provide this info.",
            "format": "date-time",
            "nullable": true
          },
          "LatestShipmentDate": {
            "type": "string",
            "description": "The latest possible date when the order (line) must be shipped. Shipment can occur on or before this date, but not after.\r\nThis can be empty if the channel does not provide this info.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderResponse": {
        "required": [
          "CurrencyCode",
          "Email",
          "OrderDate"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier used by ChannelEngine. This identifier does\r\nnot have to be saved. It should only be used in a call to acknowledge the order.",
            "format": "int32"
          },
          "ChannelName": {
            "type": "string",
            "description": "The name of the channel for this specific environment/account.",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "description": "The unique ID of the channel for this specific environment/account.",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelName": {
            "type": "string",
            "description": "The name of the channel across all of ChannelEngine.",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The unique ID of the channel across all of ChannelEngine.",
            "format": "int32",
            "nullable": true
          },
          "ChannelOrderSupport": {
            "$ref": "#/components/schemas/OrderSupport"
          },
          "ChannelOrderNo": {
            "type": "string",
            "description": "The order reference used by the channel.\r\nThis number is not guaranteed to be unique accross all orders,\r\nbecause different channels can use the same order number format.",
            "nullable": true
          },
          "CommercialOrderNo": {
            "type": "string",
            "description": "The order reference used by the channel for commercial purposes (e.g. on the invoice). Can be different from the ChannelOrderNo.\r\nFor example when the internal unique order reference is a unique id or guid, while the commercial order reference is (usually) a human readable reference that can be reused or used for multiple sellers by the channel.",
            "nullable": true
          },
          "MerchantOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Merchant",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/OrderStatusView"
          },
          "IsBusinessOrder": {
            "type": "boolean",
            "description": "Indicating whether the order is a business order."
          },
          "IsTest": {
            "type": "boolean",
            "description": "Indicating whether the order is a test order."
          },
          "AcknowledgedDate": {
            "type": "string",
            "description": "The date the order was acknowledged in ChannelEngine.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "description": "The date the order was created in ChannelEngine.",
            "format": "date-time",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The date the order was last updated in ChannelEngine.",
            "format": "date-time",
            "nullable": true
          },
          "ClosedAt": {
            "type": "string",
            "description": "The date the order was last updated in ChannelEngine.",
            "format": "date-time",
            "nullable": true
          },
          "MerchantComment": {
            "type": "string",
            "description": "The optional comment a merchant can add to an order.",
            "nullable": true
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/MerchantAddressResponse"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/MerchantAddressResponse"
          },
          "SubTotalInclVat": {
            "type": "number",
            "description": "The total value of the order lines including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "SubTotalVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the order lines\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "ShippingCostsInclVat": {
            "type": "number",
            "format": "decimal"
          },
          "ShippingCostsVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the shipping fee\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "TotalInclVat": {
            "type": "number",
            "description": "The total value of the order including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal"
          },
          "TotalVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the total value of te order\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalSubTotalInclVat": {
            "type": "number",
            "description": "The total value of the order lines including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalSubTotalVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the order lines\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalShippingCostsInclVat": {
            "type": "number",
            "description": "The shipping fee including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalShippingCostsVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the shipping fee\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalTotalInclVat": {
            "type": "number",
            "description": "The total value of the order including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalTotalVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the total value of te order\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "SubTotalExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "TotalExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "ShippingCostsExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "OriginalSubTotalExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "OriginalShippingCostsExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "OriginalTotalExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "OriginalSubTotalFee": {
            "type": "number",
            "description": "The sum of the fees on the order lines\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal"
          },
          "SubTotalFee": {
            "type": "number",
            "description": "The sum of the fees on the order lines\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal"
          },
          "OriginalOrderFee": {
            "type": "number",
            "description": "The fee on order itself (besides the fees on the order lines)\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal"
          },
          "OrderFee": {
            "type": "number",
            "description": "The fee on order itself (besides the fees on the order lines)\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal"
          },
          "OriginalTotalFee": {
            "type": "number",
            "description": "The total fee: the fees on the order lines + the fee on the order itself\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal"
          },
          "TotalFee": {
            "type": "number",
            "description": "The total fee: the fees on the order lines + the fee on the order itself\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantOrderLineResponse"
            },
            "nullable": true
          },
          "BundleOrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantBundleOrderLineResponse"
            },
            "description": "Show only when order contain bundle products",
            "nullable": true
          },
          "Phone": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The customer's telephone number.",
            "nullable": true
          },
          "Email": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The customer's email."
          },
          "LanguageCode": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "The language of the order. Has to be a 2-letter ISO language code.",
            "nullable": true
          },
          "CompanyRegistrationNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. A company's chamber of commerce number.",
            "nullable": true
          },
          "VatNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. A company's VAT number.",
            "nullable": true
          },
          "PaymentMethod": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The payment method used on the order.",
            "nullable": true
          },
          "PaymentReferenceNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "Reference or transaction id for the payment",
            "nullable": true
          },
          "CurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The currency code for the amounts of the order."
          },
          "OrderDate": {
            "type": "string",
            "description": "The date the order was created at the channel.",
            "format": "date-time"
          },
          "ChannelCustomerNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique customer reference used by the channel.",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the order.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductAttributeGroupChannelInfoResponse": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChannelName": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "GlobalChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductAttributeGroupWithLinkedChannelsResponse": {
        "type": "object",
        "properties": {
          "ProductAttributeGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "nullable": true
          },
          "LinkedChannels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductAttributeGroupChannelInfoResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductAttributeGroupWithProductExtraDataResponse": {
        "type": "object",
        "properties": {
          "ProductAttributeGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "nullable": true
          },
          "LinkedProductExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductExtraDataResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductBundlePartResponse": {
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "nullable": true
          },
          "Ean": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          },
          "PricePercentage": {
            "type": "number",
            "format": "decimal"
          }
        },
        "additionalProperties": false
      },
      "MerchantProductBundleResponse": {
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "nullable": true
          },
          "Ean": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "format": "decimal"
          },
          "Parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductBundlePartResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductExtraDataItemRequest": {
        "required": [
          "Key"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the extra data field."
          },
          "Value": {
            "type": "string",
            "description": "Value of the extra data field.",
            "nullable": true
          },
          "Type": {
            "$ref": "#/components/schemas/ExtraDataType"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Add this field to the export of the product feed to the channel."
          },
          "LanguageIsoCode": {
            "type": "string",
            "description": "The 2-letter ISO code of the extra data",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductExtraDataItemResponse": {
        "required": [
          "Key"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the extra data field."
          },
          "Value": {
            "type": "string",
            "description": "Value of the extra data field.",
            "nullable": true
          },
          "Type": {
            "$ref": "#/components/schemas/ExtraDataType"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Add this field to the export of the product feed to the channel."
          },
          "LanguageIsoCode": {
            "type": "string",
            "description": "The 2-letter ISO code of the extra data",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductExtraDataRequest": {
        "required": [
          "MerchantProductNo",
          "Operations"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "minLength": 1,
            "type": "string"
          },
          "Operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductExtraDataRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "MerchantProductExtraDataResponse": {
        "type": "object",
        "properties": {
          "ProductExtraDataId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Key": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductRequest": {
        "required": [
          "MerchantProductNo"
        ],
        "type": "object",
        "properties": {
          "ParentMerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "If this product is a different version of another\r\nproduct (for example, all fields are the same except\r\nsize), then this field should contain\r\nthe 'MerchantProductNo' of the parent. The parent\r\nshould already exist (or be present between the products\r\nin the content of the API call, it does not matter whether\r\nthe parent is behind the child in the list).",
            "nullable": true
          },
          "ParentMerchantProductNo2": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "If this product is a different version of another\r\nproduct (for example, all fields are the same except\r\ncolor) and itself is a parent with child products (e.g. of sizes),\r\nthen this field should contain the 'MerchantProductNo' of the grandparent. The grandparent\r\nshould already exist (or be present between the products\r\nin the content of the API call, it does not matter whether\r\nthe grandparent is behind the child in the list).\r\nWhen you set this field, the ParentMerchantProductNo should be left empty.\r\n            \r\nUse this field in case of three level product hierarchy,\r\ne.g. model - color - size.\r\nThis is required for channels like Otto.",
            "nullable": true
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductExtraDataItemRequest"
            },
            "description": "An optional list of key-value pairs containing\r\nextra data about this product. This data can be\r\nsent to channels or used for filtering products.",
            "nullable": true
          },
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The name of the product.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "A description of the product. Can contain these HTML tags:\r\ndiv, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.",
            "nullable": true
          },
          "Brand": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The brand of the product.",
            "nullable": true
          },
          "Size": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..",
            "nullable": true
          },
          "Color": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The color of the product (variant).",
            "nullable": true
          },
          "Ean": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The EAN of GTIN of the product.",
            "nullable": true
          },
          "ManufacturerProductNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the manufacturer/vendor of the product.",
            "nullable": true
          },
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "A unique identifier of the product. (sku)."
          },
          "Stock": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items in stock.",
            "format": "int32",
            "deprecated": true
          },
          "Price": {
            "minimum": 0,
            "type": "number",
            "description": "Price, including VAT.",
            "format": "decimal"
          },
          "MinPrice": {
            "minimum": 0,
            "type": "number",
            "description": "Min price, including VAT.",
            "format": "decimal",
            "nullable": true
          },
          "MaxPrice": {
            "minimum": 0,
            "type": "number",
            "description": "Max price, including VAT.",
            "format": "decimal",
            "nullable": true
          },
          "MSRP": {
            "type": "number",
            "description": "Manufacturer's suggested retail price.",
            "format": "decimal",
            "nullable": true
          },
          "PurchasePrice": {
            "type": "number",
            "description": "Optional. The purchase price of the product. Useful for repricing.",
            "format": "decimal",
            "nullable": true
          },
          "VatRateType": {
            "$ref": "#/components/schemas/VatRateType"
          },
          "ShippingCost": {
            "type": "number",
            "description": "Shipping cost of the product.",
            "format": "decimal",
            "nullable": true
          },
          "ShippingTime": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "A textual representation of the shippingtime.\r\nFor example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.",
            "nullable": true
          },
          "Url": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "A URL pointing to the merchant's webpage\r\nwhich displays this product.",
            "nullable": true
          },
          "ImageUrl": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "A URL at which an image of this product\r\ncan be found.",
            "nullable": true
          },
          "ExtraImageUrl1": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (1).",
            "nullable": true
          },
          "ExtraImageUrl2": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (2).",
            "nullable": true
          },
          "ExtraImageUrl3": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (3).",
            "nullable": true
          },
          "ExtraImageUrl4": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (4).",
            "nullable": true
          },
          "ExtraImageUrl5": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (5).",
            "nullable": true
          },
          "ExtraImageUrl6": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (6).",
            "nullable": true
          },
          "ExtraImageUrl7": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (7).",
            "nullable": true
          },
          "ExtraImageUrl8": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (8).",
            "nullable": true
          },
          "ExtraImageUrl9": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (9).",
            "nullable": true
          },
          "IsFrozen": {
            "type": "boolean",
            "description": "Specifies whether Product is disabled on all channels."
          },
          "CategoryTrail": {
            "type": "string",
            "description": "The category to which this product belongs.\r\nPlease supply this field in the following format:\r\n'maincategory > category > subcategory'\r\nFor example:\r\n'vehicles > bikes > mountainbike'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductResponse": {
        "required": [
          "MerchantProductNo"
        ],
        "type": "object",
        "properties": {
          "IsActive": {
            "type": "boolean",
            "description": "Is the product active for the Merchant?."
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductExtraDataItemResponse"
            },
            "nullable": true
          },
          "ParentMerchantProductNo": {
            "type": "string",
            "description": "A unique identifier of the parent product. (parent sku).",
            "nullable": true
          },
          "ParentMerchantProductNo2": {
            "type": "string",
            "description": "A unique identifier of the grandparent product. (grandparent sku).",
            "nullable": true
          },
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The name of the product.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "A description of the product. Can contain these HTML tags:\r\ndiv, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.",
            "nullable": true
          },
          "Brand": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The brand of the product.",
            "nullable": true
          },
          "Size": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..",
            "nullable": true
          },
          "Color": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The color of the product (variant).",
            "nullable": true
          },
          "Ean": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The EAN of GTIN of the product.",
            "nullable": true
          },
          "ManufacturerProductNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the manufacturer/vendor of the product.",
            "nullable": true
          },
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "A unique identifier of the product. (sku)."
          },
          "Stock": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items in stock.",
            "format": "int32",
            "deprecated": true
          },
          "Price": {
            "minimum": 0,
            "type": "number",
            "description": "Price, including VAT.",
            "format": "decimal"
          },
          "MinPrice": {
            "minimum": 0,
            "type": "number",
            "description": "Min price, including VAT.",
            "format": "decimal",
            "nullable": true
          },
          "MaxPrice": {
            "minimum": 0,
            "type": "number",
            "description": "Max price, including VAT.",
            "format": "decimal",
            "nullable": true
          },
          "MSRP": {
            "type": "number",
            "description": "Manufacturer's suggested retail price.",
            "format": "decimal",
            "nullable": true
          },
          "PurchasePrice": {
            "type": "number",
            "description": "Optional. The purchase price of the product. Useful for repricing.",
            "format": "decimal",
            "nullable": true
          },
          "VatRateType": {
            "$ref": "#/components/schemas/VatRateType"
          },
          "ShippingCost": {
            "type": "number",
            "description": "Shipping cost of the product.",
            "format": "decimal",
            "nullable": true
          },
          "ShippingTime": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "A textual representation of the shippingtime.\r\nFor example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.",
            "nullable": true
          },
          "Url": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "A URL pointing to the merchant's webpage\r\nwhich displays this product.",
            "nullable": true
          },
          "ImageUrl": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "A URL at which an image of this product\r\ncan be found.",
            "nullable": true
          },
          "ExtraImageUrl1": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (1).",
            "nullable": true
          },
          "ExtraImageUrl2": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (2).",
            "nullable": true
          },
          "ExtraImageUrl3": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (3).",
            "nullable": true
          },
          "ExtraImageUrl4": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (4).",
            "nullable": true
          },
          "ExtraImageUrl5": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (5).",
            "nullable": true
          },
          "ExtraImageUrl6": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (6).",
            "nullable": true
          },
          "ExtraImageUrl7": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (7).",
            "nullable": true
          },
          "ExtraImageUrl8": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (8).",
            "nullable": true
          },
          "ExtraImageUrl9": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (9).",
            "nullable": true
          },
          "IsFrozen": {
            "type": "boolean",
            "description": "Specifies whether Product is disabled on all channels."
          },
          "CategoryTrail": {
            "type": "string",
            "description": "The category to which this product belongs.\r\nPlease supply this field in the following format:\r\n'maincategory > category > subcategory'\r\nFor example:\r\n'vehicles > bikes > mountainbike'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductWithBuyBoxPrice": {
        "type": "object",
        "properties": {
          "Sku": {
            "type": "string",
            "description": "Product SKU number",
            "nullable": true
          },
          "Gtin": {
            "type": "string",
            "description": "Product GTIN",
            "nullable": true
          },
          "BuyBoxPrice": {
            "type": "number",
            "description": "Price of Buy box winner (excl. shipping cost)\r\nNote: not all channels have a separate shipping cost field (e.g. bol.com), so can be the same as BuyBoxPriceInclShipping",
            "format": "decimal",
            "nullable": true
          },
          "BuyBoxPriceInclShipping": {
            "type": "number",
            "description": "Price of Buy box winner (incl. shipping cost).\r\nIf null, then there is no data or no Buy box winner",
            "format": "decimal",
            "nullable": true
          },
          "IsMerchantBuyBoxWinner": {
            "type": "boolean",
            "description": "Are you the Buy box winner or not?"
          }
        },
        "additionalProperties": false
      },
      "MerchantPurchaseOrderInvoice": {
        "type": "object",
        "properties": {
          "InvoiceNo": {
            "type": "string",
            "nullable": true
          },
          "InvoiceType": {
            "$ref": "#/components/schemas/ModulesPurchaseOrderInvoiceType"
          },
          "InvoiceTotalAmount": {
            "type": "number",
            "format": "decimal"
          },
          "InvoiceTotalCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "RemitToParty": {
            "$ref": "#/components/schemas/MerchantVendorParty"
          },
          "ShipToPartyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "BillToPartyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AdditionalDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderInvoiceAdditionalDetails"
            },
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPurchaseOrderInvoiceLine"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantPurchaseOrderInvoiceLine": {
        "type": "object",
        "properties": {
          "ChannelPurchaseOrderNo": {
            "type": "string",
            "nullable": true
          },
          "MerchantPurchaseOrderNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelProductNo": {
            "type": "string",
            "nullable": true
          },
          "MerchantProductNo": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          },
          "NetCostCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "NetCostAmount": {
            "type": "number",
            "format": "decimal"
          },
          "HsnCode": {
            "type": "string",
            "nullable": true
          },
          "CnReferenceInvoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "CnDebitNoteNumber": {
            "type": "string",
            "nullable": true
          },
          "CnReturnsReferenceNumber": {
            "type": "string",
            "nullable": true
          },
          "CnRmaId": {
            "type": "string",
            "nullable": true
          },
          "CnGoodsReturnDate": {
            "type": "string",
            "format": "date-time"
          },
          "CnCoopReferenceNumber": {
            "type": "string",
            "nullable": true
          },
          "CnConsignorsReferenceNumber": {
            "type": "string",
            "nullable": true
          },
          "AllowanceDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderInvoiceAllowanceDetails"
            },
            "nullable": true
          },
          "TaxDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderInvoiceTaxDetails"
            },
            "nullable": true
          },
          "ChargeDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderInvoiceChargeDetails"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnAcknowledgeRequest": {
        "required": [
          "MerchantReturnNo"
        ],
        "type": "object",
        "properties": {
          "ReturnId": {
            "type": "integer",
            "format": "int32"
          },
          "MerchantReturnNo": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnLineRequest": {
        "required": [
          "MerchantProductNo",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "OrderLineId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in this return.",
            "format": "int32"
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the returnline. Each item must have an unqiue key",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnLineResponse": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku).",
            "nullable": true
          },
          "OrderLine": {
            "$ref": "#/components/schemas/MerchantOrderLineResponse"
          },
          "ShipmentStatus": {
            "$ref": "#/components/schemas/ShipmentLineStatus"
          },
          "StockLocation": {
            "$ref": "#/components/schemas/MerchantStockLocationResponse"
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in this return.",
            "format": "int32"
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the returnline. Each item must have an unqiue key",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnLineUpdateRequest": {
        "required": [
          "AcceptedQuantity",
          "MerchantProductNo",
          "RejectedQuantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "AcceptedQuantity": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount of items that have been accepted.",
            "format": "int32"
          },
          "RejectedQuantity": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount of items that have been rejected.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnRequest": {
        "required": [
          "Lines",
          "MerchantOrderNo",
          "MerchantReturnNo"
        ],
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique order reference used by the Merchant (sku)."
          },
          "MerchantReturnNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique return reference used by the Merchant (sku)."
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantReturnLineRequest"
            }
          },
          "Id": {
            "type": "integer",
            "description": "The unique return reference used by ChannelEngine.",
            "format": "int32"
          },
          "Reason": {
            "$ref": "#/components/schemas/ReturnReason"
          },
          "CustomerComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of customer on the (reason of) the return.",
            "nullable": true
          },
          "MerchantComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of merchant on the return.",
            "nullable": true
          },
          "RefundInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount incl. VAT.",
            "format": "decimal"
          },
          "RefundExclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount excl. VAT.",
            "format": "decimal"
          },
          "ReturnDate": {
            "type": "string",
            "description": "The date at which the return was originally created in the source system (if available).",
            "format": "date-time",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the return. Each item must have an unqiue key",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnResponse": {
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Merchant.",
            "nullable": true
          },
          "ChannelOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Channel.",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "description": "The id of the channel.",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The id of the Global Channel.",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelName": {
            "type": "string",
            "description": "The name of the Global Channel.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantReturnLineResponse"
            },
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "description": "The date at which the return was created in ChannelEngine.",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The date at which the return was last modified in ChannelEngine.",
            "format": "date-time"
          },
          "MerchantReturnNo": {
            "type": "string",
            "description": "The unique return reference used by the Merchant, will be empty in case of a channel or unacknowledged return.",
            "nullable": true
          },
          "ChannelReturnNo": {
            "type": "string",
            "description": "The unique return reference used by the Channel, will be empty in case of a merchant return.",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/ReturnStatus"
          },
          "AcknowledgedDate": {
            "type": "string",
            "description": "Date of acknowledgement",
            "format": "date-time",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "description": "The unique return reference used by ChannelEngine.",
            "format": "int32"
          },
          "Reason": {
            "$ref": "#/components/schemas/ReturnReason"
          },
          "CustomerComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of customer on the (reason of) the return.",
            "nullable": true
          },
          "MerchantComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of merchant on the return.",
            "nullable": true
          },
          "RefundInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount incl. VAT.",
            "format": "decimal"
          },
          "RefundExclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount excl. VAT.",
            "format": "decimal"
          },
          "ReturnDate": {
            "type": "string",
            "description": "The date at which the return was originally created in the source system (if available).",
            "format": "date-time",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the return. Each item must have an unqiue key",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnUpdateRequest": {
        "required": [
          "Lines",
          "ReturnId"
        ],
        "type": "object",
        "properties": {
          "ReturnId": {
            "type": "integer",
            "description": "The ChannelEngine return ID of the return you would like to update.",
            "format": "int32"
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantReturnLineUpdateRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "MerchantSettingsResponse": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "nullable": true
          },
          "CurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "DefaultCultureCode": {
            "type": "string",
            "nullable": true
          },
          "Settings": {
            "$ref": "#/components/schemas/SettingsResponse"
          },
          "Vat": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VatSettingsResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantSettlementReportsResponse": {
        "type": "object",
        "properties": {
          "SettlementId": {
            "type": "integer",
            "format": "int32"
          },
          "ChannelSettlementNo": {
            "type": "string",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CurrentReserveAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "PreviousReserveAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "PaymentAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentLabelCarrierRequest": {
        "required": [
          "Dimensions",
          "Lines",
          "Weight"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLineRequest"
            }
          },
          "Dimensions": {
            "$ref": "#/components/schemas/MerchantShipmentPackageDimensionsRequest"
          },
          "Weight": {
            "$ref": "#/components/schemas/MerchantShipmentPackageWeightRequest"
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentLabelCarrierResponse": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The channel's name for the shipping label carrier",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "description": "The channel's code for the shipping label carrier",
            "nullable": true
          },
          "Restrictions": {
            "type": "string",
            "description": "Optional. Any restrictions on this carriers, e.g. weight and/or dimensions",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "description": "Optional. Price for this shipping label",
            "format": "decimal",
            "nullable": true
          },
          "Recommendation": {
            "$ref": "#/components/schemas/ChannelCarrierRecommendationApi"
          },
          "CollectionMethod": {
            "$ref": "#/components/schemas/ChannelCarrierCollectionMethodApi"
          },
          "HandoverDateTime": {
            "type": "string",
            "description": "Optional. When to handover the package to the carrier\r\nIt is in the ISO format including the timezone offset.\r\nE.g. 2020-10-03T18:00:00+02:00\r\nwhich is 3rd Oct 2020, at 18:00 PM in Amsterdam (Summer Time aka CEST: UTC +2:00 )",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentLineRequest": {
        "required": [
          "MerchantProductNo",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "OrderLineId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the order. Each item must have an unqiue key",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in the shipment.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentLineResponse": {
        "required": [
          "MerchantProductNo",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "minLength": 1,
            "type": "string",
            "description": "The unique product reference used by the Merchant."
          },
          "MerchantBundleProductNo": {
            "type": "string",
            "description": "The unique bundle product reference used by the Merchant.",
            "nullable": true
          },
          "ChannelProductNo": {
            "type": "string",
            "description": "The unique product reference used by the Channel.",
            "nullable": true
          },
          "OrderLine": {
            "$ref": "#/components/schemas/MerchantOrderLineResponse"
          },
          "ShipmentStatus": {
            "$ref": "#/components/schemas/ShipmentLineStatus"
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the shipment line. Each item must have an unqiue key",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in the shipment.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentPackageDimensionsRequest": {
        "type": "object",
        "properties": {
          "Height": {
            "type": "number",
            "format": "decimal"
          },
          "Width": {
            "type": "number",
            "format": "decimal"
          },
          "Length": {
            "type": "number",
            "format": "decimal"
          },
          "Unit": {
            "$ref": "#/components/schemas/PackageDimensionsUnit"
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentPackageWeightRequest": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "number",
            "format": "decimal"
          },
          "Unit": {
            "$ref": "#/components/schemas/PackageWeightUnit"
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentRequest": {
        "required": [
          "Lines",
          "MerchantOrderNo",
          "MerchantShipmentNo"
        ],
        "type": "object",
        "properties": {
          "MerchantShipmentNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipment reference used by the Merchant."
          },
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique order reference used by the Merchant."
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLineRequest"
            }
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the order. Each item must have an unqiue key",
            "nullable": true
          },
          "TrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipping reference used by the Shipping carrier (track&trace number).",
            "nullable": true
          },
          "TrackTraceUrl": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "A link to a page of the carrier where the customer can track the shipping of her package.",
            "nullable": true
          },
          "ReturnTrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique return shipping reference that may be used by the Shipping carrier (track & trace number) if the shipment is returned.",
            "nullable": true
          },
          "Method": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Shipment method: the carrier used for shipping the package. E.g. DHL, postNL.",
            "nullable": true
          },
          "ShippedFromCountryCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The code of the country from where the package is being shipped.",
            "nullable": true
          },
          "ShippedFromStockLocationId": {
            "type": "integer",
            "description": "The id of the stock location where you ship the package from",
            "format": "int32",
            "nullable": true
          },
          "ShipmentDate": {
            "type": "string",
            "description": "The date at which the shipment was originally created in the source system (if available).",
            "format": "date-time",
            "nullable": true
          },
          "ReturnMethod": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Return method: the return carrier used for returning the package. E.g. DHL, postNL.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentResponse": {
        "required": [
          "MerchantShipmentNo"
        ],
        "type": "object",
        "properties": {
          "MerchantShipmentNo": {
            "minLength": 1,
            "type": "string",
            "description": "The unique shipment reference used by the Merchant."
          },
          "MerchantOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Merchant.",
            "nullable": true
          },
          "ChannelShipmentNo": {
            "type": "string",
            "description": "The unique shipment reference used by the Channel.",
            "nullable": true
          },
          "ChannelOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Channel.",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "description": "The unique ID of the channel for this specific environment/account.",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The unique ID of the channel across all of ChannelEngine.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLineResponse"
            },
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "description": "The date at which the shipment was created in ChannelEngine.",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The date at which the shipment was last modified in ChannelEngine.",
            "format": "date-time"
          },
          "ChannelExportStatus": {
            "$ref": "#/components/schemas/ChannelExportStatus"
          },
          "ChannelExportAttempts": {
            "type": "integer",
            "description": "The amount of times the shipment has been attempted to be exported.",
            "format": "int32"
          },
          "DeliveredAt": {
            "type": "string",
            "description": "The date at which the shipment was delivered",
            "format": "date-time",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the order. Each item must have an unqiue key",
            "nullable": true
          },
          "TrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipping reference used by the Shipping carrier (track&trace number).",
            "nullable": true
          },
          "TrackTraceUrl": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "A link to a page of the carrier where the customer can track the shipping of her package.",
            "nullable": true
          },
          "ReturnTrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique return shipping reference that may be used by the Shipping carrier (track & trace number) if the shipment is returned.",
            "nullable": true
          },
          "Method": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Shipment method: the carrier used for shipping the package. E.g. DHL, postNL.",
            "nullable": true
          },
          "ShippedFromCountryCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The code of the country from where the package is being shipped.",
            "nullable": true
          },
          "ShippedFromStockLocationId": {
            "type": "integer",
            "description": "The id of the stock location where you ship the package from",
            "format": "int32",
            "nullable": true
          },
          "ShipmentDate": {
            "type": "string",
            "description": "The date at which the shipment was originally created in the source system (if available).",
            "format": "date-time",
            "nullable": true
          },
          "ReturnMethod": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Return method: the return carrier used for returning the package. E.g. DHL, postNL.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentTrackingRequest": {
        "required": [
          "Method",
          "TrackTraceNo"
        ],
        "type": "object",
        "properties": {
          "Method": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Shipment method (carrier)."
          },
          "TrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipping reference used by the Shipping carrier (track & trace number)."
          },
          "ReturnTrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique return shipping reference that may be used by the Shipping carrier (track & trace number) if the shipment is returned.",
            "nullable": true
          },
          "TrackTraceUrl": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "A link to a page of the carrier where the customer can track the shipping of her package.",
            "nullable": true
          },
          "ShippedFromCountryCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The code of the country from where the package is being shipped.",
            "nullable": true
          },
          "ReturnMethod": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Return method (return carrier).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantSingleOrderReturnLineResponse": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku).",
            "nullable": true
          },
          "AcceptedQuantity": {
            "type": "integer",
            "description": "The accepted quantity of returned products in this orderline.",
            "format": "int32",
            "nullable": true
          },
          "RejectedQuantity": {
            "type": "integer",
            "description": "The rejected quantity of returned products in this orderline.",
            "format": "int32",
            "nullable": true
          },
          "OrderLine": {
            "$ref": "#/components/schemas/MerchantOrderLineResponse"
          },
          "ShipmentStatus": {
            "$ref": "#/components/schemas/ShipmentLineStatus"
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in this return.",
            "format": "int32"
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the returnline. Each item must have an unqiue key",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantSingleOrderReturnResponse": {
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Merchant.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantSingleOrderReturnLineResponse"
            },
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "description": "The date at which the return was created in ChannelEngine.",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The date at which the return was last modified in ChannelEngine.",
            "format": "date-time"
          },
          "MerchantReturnNo": {
            "type": "string",
            "description": "The unique return reference used by the Merchant, will be empty in case of a channel or unacknowledged return.",
            "nullable": true
          },
          "ChannelReturnNo": {
            "type": "string",
            "description": "The unique return reference used by the Channel, will be empty in case of a merchant return.",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "description": "The id of the channel.",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The id of the Global Channel.",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelName": {
            "type": "string",
            "description": "The name of the Global Channel.",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/ReturnStatus"
          },
          "Id": {
            "type": "integer",
            "description": "The unique return reference used by ChannelEngine.",
            "format": "int32"
          },
          "Reason": {
            "$ref": "#/components/schemas/ReturnReason"
          },
          "CustomerComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of customer on the (reason of) the return.",
            "nullable": true
          },
          "MerchantComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of merchant on the return.",
            "nullable": true
          },
          "RefundInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount incl. VAT.",
            "format": "decimal"
          },
          "RefundExclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount excl. VAT.",
            "format": "decimal"
          },
          "ReturnDate": {
            "type": "string",
            "description": "The date at which the return was originally created in the source system (if available).",
            "format": "date-time",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Extra data on the return. Each item must have an unqiue key",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantStockLocationAddressRequest": {
        "required": [
          "CountryIso"
        ],
        "type": "object",
        "properties": {
          "CountryIso": {
            "minLength": 1,
            "type": "string"
          },
          "StreetName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "nullable": true
          },
          "HouseNr": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "HouseNrAddition": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "City": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Region": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantStockLocationCreateRequest": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "FallBackToDefault": {
            "type": "boolean",
            "description": "If false: only use fulfillment by channel, else (also) use merchant fulfillment."
          },
          "Address": {
            "$ref": "#/components/schemas/MerchantStockLocationAddressRequest"
          },
          "PhoneNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantStockLocationResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The ChannelEngine id of the stock location.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The ChannelEngine name of the stock location.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantStockLocationUpdateRequest": {
        "type": "object",
        "properties": {
          "Stock": {
            "minimum": 0,
            "type": "integer",
            "description": "The stock of the product. Should not be negative.",
            "format": "int32"
          },
          "StockLocationId": {
            "type": "integer",
            "description": "The stock location id of the updated stock. If not provided, the stock from the default stock location will be updated.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantStockLocationWithCountryIsoResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The ChannelEngine id of the stock location.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The ChannelEngine name of the stock location.",
            "nullable": true
          },
          "CountryIso": {
            "type": "string",
            "description": "For example: NL, BE, FR.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantStockPriceUpdateRequest": {
        "required": [
          "MerchantProductNo"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "Stock": {
            "minimum": 0,
            "type": "integer",
            "description": "The stock of the product. Should not be negative.",
            "format": "int32",
            "nullable": true
          },
          "Price": {
            "minimum": 0,
            "type": "number",
            "description": "The price of the product. Should not be negative.",
            "format": "decimal",
            "nullable": true
          },
          "StockLocationId": {
            "type": "integer",
            "description": "The stock location id of the updated stock. If not provided, the stock from the default stock location will be updated.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantVendorParty": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "AddressLine1": {
            "type": "string",
            "nullable": true
          },
          "AddressLine2": {
            "type": "string",
            "nullable": true
          },
          "AddressLine3": {
            "type": "string",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": true
          },
          "County": {
            "type": "string",
            "nullable": true
          },
          "District": {
            "type": "string",
            "nullable": true
          },
          "StateOrRegion": {
            "type": "string",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "nullable": true
          },
          "CountryCode": {
            "type": "string",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "nullable": true
          },
          "TaxRegistrationType": {
            "$ref": "#/components/schemas/ModulesTaxRegistrationType"
          },
          "TaxRegistrationNo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantWebhookRequest": {
        "required": [
          "Events",
          "Name",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The unique name of a webhook."
          },
          "Url": {
            "maxLength": 1028,
            "minLength": 0,
            "type": "string",
            "description": "The callback URL used by a webhook. E.g.: https://test-store.com/callback."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Determines if a webhook is active, and callbacks should proceed."
          },
          "RequestType": {
            "$ref": "#/components/schemas/WebhookRequestType"
          },
          "Events": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "description": "The events supported by the webhook."
          }
        },
        "additionalProperties": false
      },
      "MerchantWebhookResponse": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean"
          },
          "RequestType": {
            "$ref": "#/components/schemas/WebhookRequestType"
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ModuleChannelExportStatus": {
        "enum": [
          "AWAITING_EXPORT",
          "AWAITING_CHANNEL_RESPONSE",
          "SUCCEEDED",
          "FAILED_RETRY",
          "FAILED_NO_RETRY"
        ],
        "type": "string"
      },
      "ModuleFulfillmentType": {
        "enum": [
          "ALL",
          "ONLY_MERCHANT",
          "ONLY_CHANNEL",
          "MIXED",
          "INCLUDES_MERCHANT",
          "INCLUDES_CHANNEL"
        ],
        "type": "string"
      },
      "ModuleReturnReason": {
        "enum": [
          "PRODUCT_DEFECT",
          "PRODUCT_UNSATISFACTORY",
          "WRONG_PRODUCT",
          "TOO_MANY_PRODUCTS",
          "REFUSED",
          "REFUSED_DAMAGED",
          "WRONG_ADDRESS",
          "NOT_COLLECTED",
          "WRONG_SIZE",
          "OTHER"
        ],
        "type": "string"
      },
      "ModuleReturnStatus": {
        "enum": [
          "NEW",
          "HANDLED",
          "CANCELLED",
          "IN_PROGRESS"
        ],
        "type": "string"
      },
      "ModulesAdditionalDetailsType": {
        "enum": [
          "SUR",
          "OCR",
          "CARTON_COUNT"
        ],
        "type": "string"
      },
      "ModulesAllowanceDetailsType": {
        "enum": [
          "DISCOUNT",
          "DISCOUNT_INCENTIVE",
          "DEFECTIVE",
          "PROMOTIONAL",
          "UNSALEABLE_MERCHANDISE",
          "SPECIAL"
        ],
        "type": "string"
      },
      "ModulesChargeDetailsType": {
        "enum": [
          "FREIGHT",
          "PACKING",
          "DUTY",
          "SERVICE",
          "SMALL_ORDER",
          "INSURANCE_PLACEMENT_COST",
          "INSURANCE_FEE",
          "SPECIAL_HANDLING_SERVICE",
          "COLLECTION_AND_RECYCLING_SERVICE",
          "ENVIRONMENTAL_PROTECTION_SERVICE",
          "TAX_COLLECTED_AT_SOURCE"
        ],
        "type": "string"
      },
      "ModulesPurchaseOrderInvoiceType": {
        "enum": [
          "INVOICE",
          "CREDIT_NOTE"
        ],
        "type": "string"
      },
      "ModulesPurchaseOrderStatus": {
        "enum": [
          "NEW",
          "IN_PROGRESS",
          "CLOSED"
        ],
        "type": "string"
      },
      "ModulesPurchaseOrderType": {
        "enum": [
          "REGULAR_ORDER",
          "CONSIGNED_ORDER",
          "NEW_PRODUCT_INTRODUCTION",
          "RUSH_ORDER"
        ],
        "type": "string"
      },
      "ModulesTaxRegistrationType": {
        "enum": [
          "VAT",
          "GST"
        ],
        "type": "string"
      },
      "ModulesTaxType": {
        "enum": [
          "CGST",
          "SGST",
          "CESS",
          "UTGST",
          "IGST",
          "MWST",
          "PST",
          "TVA",
          "VAT",
          "GST",
          "ST",
          "CONSUMPTION",
          "MUTUALLY_DEFINED",
          "DOMESTIC_VAT"
        ],
        "type": "string"
      },
      "NotificationType": {
        "enum": [
          "CHANNEL_ORDER_ANONYMIZED_BY_REQUEST",
          "CHANNEL_ORDER_ANONYMIZED_AUTOMATICALLY",
          "CHANNEL_ORDER_CANCELLATION_REQUEST_NEW",
          "CHANNEL_ORDER_CORRECTION_NEEDED",
          "CHANNEL_ORDER_DUPLICATE_LINE",
          "CHANNEL_ORDER_INVOICE_SEND_FAILED",
          "CHANNEL_ORDER_IMPORT_FAILED",
          "CHANNEL_ORDER_NEW",
          "CHANNEL_ORDER_OVERDUE",
          "CHANNEL_PRODUCT_DATA_EXPORT_FAILED",
          "CHANNEL_PRODUCT_DATA_IMPORT_FAILED",
          "CHANNEL_RETURN_EXPORT_FAILED",
          "CHANNEL_RETURN_IMPORT_FAILED",
          "CHANNEL_RETURN_NEW",
          "CHANNEL_RETURN_OVERDUE",
          "CHANNEL_REFUND_EXPORT_FAILED",
          "CHANNEL_SHIPMENT_IMPORT_FAILED",
          "CHANNEL_SHIPMENT_IMPORT_STATUS_FAILED",
          "CHANNEL_SHIPMENT_EXPORT_FAILED",
          "CHANNEL_SHIPMENT_IMPORT_MISSING_LINE_FAILED",
          "CHANNEL_FULFILLMENT_SHIPMENT_IMPORT_STATUS_FAILED",
          "CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_FAILED",
          "CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_SUCCEEDED",
          "CHANNEL_FULFILLMENT_SHIPMENT_LINE_FOR_CLOSED_ORDER",
          "CHANNELENGINE_SUPPORT_NOTIFICATION",
          "CHANNELENGINE_WEBHOOK_RQUEST_FAILED",
          "FEED_NO_PRODUCTS_FAILED",
          "FEED_IMPORT_FAILED",
          "GLOBAL_MESSAGE",
          "MERCHANT_ORDER_EXPORT_FAILED",
          "PLUGIN_INVALID_SETTING",
          "PLUGIN_DEACTIVATED",
          "PRODUCT_BUNDLE_IMPORT_FAILED",
          "CHANNEL_REFUND_LINE_ITEMS_ERROR",
          "CHANNEL_CANCELLATION_EXPORT_FAILED",
          "MERCHANT_ORDER_EXPORT_LINES_CANCELLED",
          "OAUTH_REFRESH_TOKEN_ABOUT_TO_EXPIRE",
          "MERCHANT_CANCELLATION_IMPORT_FAILED",
          "CHANNEL_ORDER_TOO_LONG_ON_NEW",
          "MERCHANT_STOCK_UPDATE_FAILED",
          "FEED_INVALID_PRODUCTS_OCCURED",
          "CHANNEL_SHIPMENT_EXPORT_INVALID_MERCHANTSHIPMENTNO",
          "CHANNEL_PRODUCT_OFFER_EXPORT_FAILED",
          "TRANSLATION_IMAGE_TAGS_BROKEN",
          "CHANNEL_RETURN_DELETED",
          "TAX_PROVIDER_NOT_ACTIVATED",
          "STOCK_LOCATION_NOT_FOUND",
          "CUSTOM_VAT_RATE_OVERLAPPING_RATES",
          "TRANSLATION_FAILED",
          "ORDER_FALLBACK_TO_DEFAULT_STOCKLOCATION",
          "CHANNEL_FULFILLMENT_SHIPMENT_RECEIVED",
          "TRANSLATION_RETRY",
          "PLUGIN_SALES_CHANNEL_DEACTIVATED",
          "PLUGIN_CATEGORIES_CHANGED",
          "PLUGIN_ATTRIBUTES_CHANGED",
          "ORDER_WITH_BACKORDER_STATUS",
          "ORDER_WITH_BACKORDER_STATUS_FULFILLED",
          "ORDERS_GOT_REJECTED_BY_MCF",
          "PLUGIN_VALIDATION_FAILED",
          "UPDATE_STOCK_SWITCHED_OFF_FOR_PLUGIN",
          "CHANNEL_RETURN_REQUIRED_ATTENTION",
          "CHANNEL_PURCHASE_ORDER_NEW",
          "CHANNEL_PURCHASE_ORDER_LINE_CHANGED",
          "CHANNEL_PURCHASE_ORDER_LINE_CANCELLED",
          "CHANNEL_PURCHASE_ORDER_ACKNOWLEDGEMENT_FAILED",
          "CHANNEL_PURCHASE_ORDER_SHIPMENT_EXPORT_FAILED",
          "CHANNEL_PURCHASE_ORDER_INVOICE_CREATION_FAILED",
          "CHANNEL_KPI_TARGET_MISSED",
          "LATE_UNSHIPPED_ORDERS",
          "FEED_ENABLED",
          "FEED_DISABLED",
          "PRODUCT_IMPORT_FEEDS_SUCCESS",
          "SETTLEMENT_EXPORT_FAILED",
          "CHANNEL_SHIPMENT_UPDATE_FAILED",
          "PLUGIN_DSA_INFO"
        ],
        "type": "string"
      },
      "Operation": {
        "type": "object",
        "properties": {
          "op": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "nullable": true
          },
          "path": {
            "type": "string"
          }
        }
      },
      "OrderDocumentLinkedWith": {
        "enum": [
          "ORDER",
          "RETURN"
        ],
        "type": "string"
      },
      "OrderDocumentMediaType": {
        "enum": [
          "NONE",
          "APPLICATION_PDF",
          "APPLICATION_XML"
        ],
        "type": "string"
      },
      "OrderDocumentSource": {
        "enum": [
          "UPLOADED_BY_MERCHANT",
          "GENERATED_BY_CHANNEL_ENGINE",
          "IMPORTED_FROM_MARKETPLACE"
        ],
        "type": "string"
      },
      "OrderDocumentType": {
        "enum": [
          "MERCHANT_INVOICE",
          "FISCAL_NOTE"
        ],
        "type": "string"
      },
      "OrderIdentifier": {
        "enum": [
          "ORDER_ID",
          "CHANNEL_ORDER_NO",
          "MERCHANT_ORDER_NO"
        ],
        "type": "string"
      },
      "OrderLineIdentifier": {
        "enum": [
          "ORDER_LINE_ID",
          "CHANNEL_ORDER_LINE_NO",
          "MERCHANT_ORDER_LINE_NO",
          "PRODUCT_ID",
          "PRODUCT_GTIN",
          "CHANNEL_PRODUCT_NO",
          "MERCHANT_PRODUCT_NO"
        ],
        "type": "string"
      },
      "OrderStatusView": {
        "enum": [
          "IN_PROGRESS",
          "SHIPPED",
          "IN_BACKORDER",
          "MANCO",
          "CANCELED",
          "IN_COMBI",
          "CLOSED",
          "NEW",
          "RETURNED",
          "REQUIRES_CORRECTION",
          "AWAITING_PAYMENT"
        ],
        "type": "string"
      },
      "OrderSupport": {
        "enum": [
          "NONE",
          "ORDERS",
          "SPLIT_ORDERS",
          "SPLIT_ORDER_LINES"
        ],
        "type": "string"
      },
      "PackageDimensionsUnit": {
        "enum": [
          "CM",
          "INCH"
        ],
        "type": "string"
      },
      "PackageWeightUnit": {
        "enum": [
          "GRAM",
          "OUNCE"
        ],
        "type": "string"
      },
      "PatchMerchantProductDto": {
        "type": "object",
        "properties": {
          "PropertiesToUpdate": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fields to update",
            "nullable": true
          },
          "MerchantProductRequestModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductRequest"
            },
            "description": "Products to be updated",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductAttributeGroupRequest": {
        "required": [
          "GroupName",
          "ProductExtraDataKeys"
        ],
        "type": "object",
        "properties": {
          "GroupName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "ProductExtraDataKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "ProductCreationResult": {
        "type": "object",
        "properties": {
          "RejectedCount": {
            "type": "integer",
            "format": "int32"
          },
          "AcceptedCount": {
            "type": "integer",
            "format": "int32"
          },
          "ProductMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMessage"
            },
            "description": "Messages about the rejected products.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductExtraDataRequest": {
        "required": [
          "Key",
          "Op"
        ],
        "type": "object",
        "properties": {
          "Op": {
            "minLength": 1,
            "type": "string"
          },
          "Key": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductMessage": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Reference": {
            "type": "string",
            "nullable": true
          },
          "KeyReference": {
            "type": "string",
            "nullable": true
          },
          "Warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderAcknowledgementCode": {
        "enum": [
          "REJECTED",
          "ACCEPTED",
          "BACKORDERED"
        ],
        "type": "string"
      },
      "PurchaseOrderIdentifierType": {
        "enum": [
          "PURCHASE_ORDER_ID",
          "CHANNEL_PURCHASE_ORDER_NO",
          "MERCHANT_PURCHASE_ORDER_NO"
        ],
        "type": "string"
      },
      "PurchaseOrderInvoiceAdditionalDetails": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ModulesAdditionalDetailsType"
          },
          "Detail": {
            "type": "string",
            "nullable": true
          },
          "LanguageCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderInvoiceAllowanceDetails": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ModulesAllowanceDetailsType"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "ChargeAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "ChargeAmountCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "TaxDetails": {
            "$ref": "#/components/schemas/PurchaseOrderInvoiceTaxDetails"
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderInvoiceChargeDetails": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ModulesChargeDetailsType"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "ChargeAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "ChargeAmountCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "TaxDetails": {
            "$ref": "#/components/schemas/PurchaseOrderInvoiceTaxDetails"
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderInvoiceTaxDetails": {
        "type": "object",
        "properties": {
          "TaxType": {
            "$ref": "#/components/schemas/ModulesTaxType"
          },
          "TaxRate": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "TaxAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "TaxAmountCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "TaxableAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "TaxableAmountCurrencyCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderLineIdentifierType": {
        "enum": [
          "PURCHASE_ORDER_LINE_ID",
          "CHANNEL_PRODUCT_NO",
          "MERCHANT_PRODUCT_NO"
        ],
        "type": "string"
      },
      "PurchaseOrderLineUnitOfMeasure": {
        "enum": [
          "CASES",
          "EACHES"
        ],
        "type": "string"
      },
      "PurchaseOrderRejectionReason": {
        "enum": [
          "INVALID_PRODUCT",
          "OBSOLETE_PRODUCT",
          "TEMPORARILY_UNAVAILABLE"
        ],
        "type": "string"
      },
      "PurchaseOrderRelatedItemExportStatus": {
        "enum": [
          "NONE",
          "IN_PROGRESS",
          "SUCCESS",
          "FAILURE"
        ],
        "type": "string"
      },
      "PurchaseOrderShipmentIdentifierTypeValue": {
        "enum": [
          "MERCHANT_SHIPMENT_NO",
          "CHANNEL_PURCHASE_ORDER_NO",
          "MERCHANT_PURCHASE_ORDER_NO"
        ],
        "type": "string"
      },
      "RefundByFilterIdentifier": {
        "enum": [
          "REFUND_ID",
          "CHANNEL_REFUND_NO",
          "MERCHANT_REFUND_NO",
          "ORDER_ID",
          "CHANNEL_ORDER_NO",
          "MERCHANT_ORDER_NO",
          "RETURN_ID",
          "CHANNEL_RETURN_NO",
          "MERCHANT_RETURN_NO"
        ],
        "type": "string"
      },
      "RefundIdentifier": {
        "enum": [
          "REFUND_ID",
          "CHANNEL_REFUND_NO",
          "MERCHANT_REFUND_NO"
        ],
        "type": "string"
      },
      "RefundReason": {
        "enum": [
          "PRODUCT_DEFECT",
          "PRODUCT_UNSATISFACTORY",
          "WRONG_PRODUCT",
          "TOO_MANY_PRODUCTS",
          "REFUSED",
          "REFUSED_DAMAGED",
          "WRONG_ADDRESS",
          "NOT_COLLECTED",
          "WRONG_SIZE",
          "OTHER"
        ],
        "type": "string"
      },
      "RemoveProductExtraDataRequests": {
        "type": "object",
        "properties": {
          "ProductExtraDataKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RenameProductAttributeGroupRequests": {
        "type": "object",
        "properties": {
          "OldName": {
            "type": "string",
            "nullable": true
          },
          "NewName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportStatus": {
        "enum": [
          "IN_PROGRESS",
          "DONE",
          "FAILED",
          "NOT_FOUND"
        ],
        "type": "string"
      },
      "ReportType": {
        "enum": [
          "DETAILED",
          "CUSTOM_JSON"
        ],
        "type": "string"
      },
      "ReturnByFilterIdentifier": {
        "enum": [
          "RETURN_ID",
          "CHANNEL_RETURN_NO",
          "MERCHANT_RETURN_NO",
          "ORDER_ID",
          "CHANNEL_ORDER_NO",
          "MERCHANT_ORDER_NO"
        ],
        "type": "string"
      },
      "ReturnHandlingAction": {
        "enum": [
          "REFUND",
          "EXCHANGE",
          "REPAIR",
          "KEEP",
          "REJECT"
        ],
        "type": "string"
      },
      "ReturnIdentifier": {
        "enum": [
          "RETURN_ID",
          "CHANNEL_RETURN_NO",
          "MERCHANT_RETURN_NO"
        ],
        "type": "string"
      },
      "ReturnLineIdentifier": {
        "enum": [
          "RETURN_LINE_ID"
        ],
        "type": "string"
      },
      "ReturnReason": {
        "enum": [
          "PRODUCT_DEFECT",
          "PRODUCT_UNSATISFACTORY",
          "WRONG_PRODUCT",
          "TOO_MANY_PRODUCTS",
          "REFUSED",
          "REFUSED_DAMAGED",
          "WRONG_ADDRESS",
          "NOT_COLLECTED",
          "WRONG_SIZE",
          "OTHER"
        ],
        "type": "string"
      },
      "ReturnStatus": {
        "enum": [
          "IN_PROGRESS",
          "RECEIVED",
          "CANCELLED"
        ],
        "type": "string"
      },
      "SettingsResponse": {
        "type": "object",
        "properties": {
          "Shipment": {
            "$ref": "#/components/schemas/ShipmentSettingsResponse"
          },
          "Advanced": {
            "$ref": "#/components/schemas/AdvanceSettingsResponse"
          }
        },
        "additionalProperties": false
      },
      "ShipmentFulfillmentType": {
        "enum": [
          "ALL",
          "ONLY_MERCHANT",
          "ONLY_CHANNEL"
        ],
        "type": "string",
        "description": "Shipment is fully fulfilled by channel or merchant\r\nso no make sense to use FulfillmentType for orders\r\nIt is created to keep it consistent with others"
      },
      "ShipmentLineStatus": {
        "enum": [
          "SHIPPED",
          "IN_BACKORDER",
          "MANCO"
        ],
        "type": "string"
      },
      "ShipmentSettingsResponse": {
        "type": "object",
        "properties": {
          "DefaultTrackedShipmentMethod": {
            "type": "string",
            "nullable": true
          },
          "DefaultUntrackedShipmentMethod": {
            "type": "string",
            "nullable": true
          },
          "AutomaticallySetShipmentMethodAfterMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipmentType": {
        "enum": [
          "TRUCK_LOAD",
          "LESS_THAN_TRUCK_LOAD",
          "SMALL_PARCEL"
        ],
        "type": "string"
      },
      "SingleMerchantAcknowledgePurchaseOrderLinesRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "LineIdentifierType": {
            "$ref": "#/components/schemas/PurchaseOrderLineIdentifierType"
          },
          "IdentifierType": {
            "$ref": "#/components/schemas/PurchaseOrderIdentifierType"
          },
          "Model": {
            "$ref": "#/components/schemas/MerchantAcknowledgePurchaseOrder"
          }
        },
        "additionalProperties": false
      },
      "SingleMerchantAcknowledgeRefundRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IdentifierType": {
            "$ref": "#/components/schemas/RefundIdentifier"
          },
          "Model": {
            "$ref": "#/components/schemas/MerchantAcknowledgeRefund"
          }
        },
        "additionalProperties": false
      },
      "SingleMerchantAcknowledgeReturnRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IdentifierType": {
            "$ref": "#/components/schemas/ReturnIdentifier"
          },
          "Model": {
            "$ref": "#/components/schemas/MerchantAcknowledgeReturn"
          }
        },
        "additionalProperties": false
      },
      "SingleMerchantCreatePurchaseOrderInvoiceRequest": {
        "type": "object",
        "properties": {
          "Models": {
            "$ref": "#/components/schemas/MerchantPurchaseOrderInvoice"
          },
          "Model": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPurchaseOrderInvoice"
            },
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleMerchantCreatePurchaseOrderShipmentRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "description": "The identifier of the channel",
            "format": "int32"
          },
          "Model": {
            "$ref": "#/components/schemas/CreatePurchaseOrderShipment"
          }
        },
        "additionalProperties": false
      },
      "SingleMerchantCreateRefundRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "LineIdentifierType": {
            "$ref": "#/components/schemas/OrderLineIdentifier"
          },
          "IdentifierType": {
            "$ref": "#/components/schemas/OrderIdentifier"
          },
          "Model": {
            "$ref": "#/components/schemas/MerchantCreateRefund"
          }
        },
        "additionalProperties": false
      },
      "SingleMerchantCreateReturnRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "LineIdentifierType": {
            "$ref": "#/components/schemas/OrderLineIdentifier"
          },
          "IdentifierType": {
            "$ref": "#/components/schemas/OrderIdentifier"
          },
          "Model": {
            "$ref": "#/components/schemas/MerchantCreateReturn"
          }
        },
        "additionalProperties": false
      },
      "SingleMerchantHandleReturnRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "LineIdentifierType": {
            "$ref": "#/components/schemas/ReturnLineIdentifier"
          },
          "IdentifierType": {
            "$ref": "#/components/schemas/ReturnIdentifier"
          },
          "Model": {
            "$ref": "#/components/schemas/MerchantHandleReturn"
          }
        },
        "additionalProperties": false
      },
      "SingleMerchantUpdatePurchaseOrderShipmentRequest": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "description": "The identifier of the channel",
            "format": "int32"
          },
          "Model": {
            "$ref": "#/components/schemas/UpdatePurchaseOrderShipment"
          }
        },
        "additionalProperties": false
      },
      "SingleOfApiResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/ApiResponse"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfDeleteTargetsResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/DeleteTargetsResponse"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfDictionaryOfStringAndListOfString": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfIRefund": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/IRefund"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfIReturn": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/IReturn"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfListOfTargetResponseVm": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetResponseVm"
            },
            "nullable": true
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfMerchantProductResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/MerchantProductResponse"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfMerchantSettingsResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/MerchantSettingsResponse"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfProductCreationResult": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/ProductCreationResult"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "RequestId": {
            "type": "string",
            "nullable": true
          },
          "LogId": {
            "type": "string",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ExceptionType": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SupportOrderAddress": {
        "type": "object",
        "properties": {
          "Gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "CompanyName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Company addressed too.",
            "nullable": true
          },
          "FirstName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the customer.",
            "nullable": true
          },
          "LastName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the customer (includes the surname prefix [tussenvoegsel] like 'de', 'van', 'du').",
            "nullable": true
          },
          "StreetName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the street (without house number information)\r\nThis field might be empty if address validation is disabled in ChannelEngine or Line1/Line2 is used.",
            "nullable": true
          },
          "HouseNr": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The house number\r\nThis field might be empty if address validation is disabled in ChannelEngine or Line1/Line2 is used.",
            "nullable": true
          },
          "HouseNrAddition": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Addition to the house number\r\nIf the address is: Groenhazengracht 2c, the address will be:\r\nStreetName: Groenhazengracht\r\nHouseNo: 2\r\nHouseNrAddition: c\r\nThis field might be empty if address validation is disabled in ChannelEngine or Line1/Line2 is used.",
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "The zip or postal code.",
            "nullable": true
          },
          "City": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the city.",
            "nullable": true
          },
          "Region": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. State/province/region.",
            "nullable": true
          },
          "CountryIso": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "For example: NL, BE, FR.",
            "nullable": true
          },
          "Original": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The address as a single string: use in case the address lines are entered\r\nas single lines and later parsed into street, house number and house number addition.",
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "TargetResponseVm": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TargetInclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "TargetExclVat": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Month": {
            "type": "integer",
            "format": "int32"
          },
          "Year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdatePurchaseOrderShipment": {
        "type": "object",
        "properties": {
          "MerchantShipmentNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The number the merchant uses to identify this PO shipment",
            "nullable": true
          },
          "ShipmentType": {
            "$ref": "#/components/schemas/ShipmentType"
          },
          "ShippedDate": {
            "type": "string",
            "description": "When the shipment will be/was shipped",
            "format": "date-time"
          },
          "EstimatedDeliveryDate": {
            "type": "string",
            "description": "Estimated delivery time in the channel's warehouse",
            "format": "date-time"
          },
          "SellingPartyId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The merchant's identifying 'selling party number' at the channel",
            "nullable": true
          },
          "ShipToPartyId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The destination's 'ship to party' number at the channel",
            "nullable": true
          },
          "BillOfLadingNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.",
            "nullable": true
          },
          "ShipmentWeightUnitOfMeasure": {
            "$ref": "#/components/schemas/WeightUnitOfMeasure"
          },
          "ShipmentWeight": {
            "type": "number",
            "description": "The shipment's weight",
            "format": "decimal",
            "nullable": true
          },
          "ShipmentVolumeUnitOfMeasure": {
            "$ref": "#/components/schemas/VolumeUnitOfMeasure"
          },
          "ShipmentVolume": {
            "type": "number",
            "description": "The shipment's volume",
            "format": "decimal",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangePurchaseOrderShipmentLine"
            },
            "description": "Shipment information for each shipped product",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VatRateType": {
        "enum": [
          "STANDARD",
          "REDUCED",
          "SUPER_REDUCED",
          "EXEMPT"
        ],
        "type": "string"
      },
      "VatSettingsResponse": {
        "type": "object",
        "properties": {
          "CountryIso": {
            "type": "string",
            "nullable": true
          },
          "No": {
            "type": "string",
            "nullable": true
          },
          "StandardRate": {
            "type": "number",
            "format": "decimal"
          },
          "ReducedRate": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "SuperReducedRate": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VolumeUnitOfMeasure": {
        "enum": [
          "CUBIC_FEET",
          "CUBIC_INCHES",
          "CUBIC_METER",
          "CUBIC_YARD"
        ],
        "type": "string"
      },
      "WebhookEventType": {
        "enum": [
          "ORDERS_CREATE",
          "PRODUCTS_CHANGE",
          "RETURNS_CHANGE",
          "SHIPMENTS_CHANGE",
          "NOTIFICATIONS_CREATE",
          "BUNDLE_PRODUCTS_CHANGE",
          "ORDERS_CHANGE"
        ],
        "type": "string"
      },
      "WebhookRequestType": {
        "enum": [
          "GET",
          "POST"
        ],
        "type": "string"
      },
      "WeightUnitOfMeasure": {
        "enum": [
          "GRAMS",
          "KILOGRAMS",
          "OUNCES",
          "POUNDS"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "description": "API Key Authentication",
        "name": "apikey",
        "in": "query"
      }
    }
  },
  "security": [
    {
      "apiKey": [ ]
    }
  ],
  "x-version": "2.19.0"
}
