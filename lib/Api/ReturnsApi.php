<?php
/**
 * ReturnsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.19.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChannelEngine\Merchant\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ChannelEngine\Merchant\ApiClient\ApiException;
use ChannelEngine\Merchant\ApiClient\Configuration;
use ChannelEngine\Merchant\ApiClient\HeaderSelector;
use ChannelEngine\Merchant\ApiClient\ObjectSerializer;

/**
 * ReturnsApi Class Doc Comment
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReturnsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'returnAcknowledge' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'returnAcknowledge_0' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'returnCreate' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'returnDeclareForMerchant' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'returnGet' => [
            'application/json',
        ],
        'returnGetByFilter' => [
            'application/json',
        ],
        'returnGetByMerchantOrderNo' => [
            'application/json',
        ],
        'returnGetDeclaredByChannel' => [
            'application/json',
        ],
        'returnGetReturns' => [
            'application/json',
        ],
        'returnGetUnhandled' => [
            'application/json',
        ],
        'returnHandle' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'returnUpdateForMerchant' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation returnAcknowledge
     *
     * [CLOSED BETA] Acknowledge a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantAcknowledgeReturnRequest|null $singleMerchantAcknowledgeReturnRequest The return to acknowledge (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function returnAcknowledge($singleMerchantAcknowledgeReturnRequest = null, string $contentType = self::contentTypes['returnAcknowledge'][0])
    {
        list($response) = $this->returnAcknowledgeWithHttpInfo($singleMerchantAcknowledgeReturnRequest, $contentType);
        return $response;
    }

    /**
     * Operation returnAcknowledgeWithHttpInfo
     *
     * [CLOSED BETA] Acknowledge a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantAcknowledgeReturnRequest|null $singleMerchantAcknowledgeReturnRequest The return to acknowledge (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnAcknowledgeWithHttpInfo($singleMerchantAcknowledgeReturnRequest = null, string $contentType = self::contentTypes['returnAcknowledge'][0])
    {
        $request = $this->returnAcknowledgeRequest($singleMerchantAcknowledgeReturnRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnAcknowledgeAsync
     *
     * [CLOSED BETA] Acknowledge a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantAcknowledgeReturnRequest|null $singleMerchantAcknowledgeReturnRequest The return to acknowledge (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnAcknowledgeAsync($singleMerchantAcknowledgeReturnRequest = null, string $contentType = self::contentTypes['returnAcknowledge'][0])
    {
        return $this->returnAcknowledgeAsyncWithHttpInfo($singleMerchantAcknowledgeReturnRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnAcknowledgeAsyncWithHttpInfo
     *
     * [CLOSED BETA] Acknowledge a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantAcknowledgeReturnRequest|null $singleMerchantAcknowledgeReturnRequest The return to acknowledge (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnAcknowledgeAsyncWithHttpInfo($singleMerchantAcknowledgeReturnRequest = null, string $contentType = self::contentTypes['returnAcknowledge'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->returnAcknowledgeRequest($singleMerchantAcknowledgeReturnRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnAcknowledge'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantAcknowledgeReturnRequest|null $singleMerchantAcknowledgeReturnRequest The return to acknowledge (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnAcknowledgeRequest($singleMerchantAcknowledgeReturnRequest = null, string $contentType = self::contentTypes['returnAcknowledge'][0])
    {



        $resourcePath = '/v2.1/returns/merchant/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($singleMerchantAcknowledgeReturnRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($singleMerchantAcknowledgeReturnRequest));
            } else {
                $httpBody = $singleMerchantAcknowledgeReturnRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnAcknowledge_0
     *
     * Acknowledges a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnAcknowledgeRequest|null $merchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge_0'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function returnAcknowledge_0($merchantReturnAcknowledgeRequest = null, string $contentType = self::contentTypes['returnAcknowledge_0'][0])
    {
        list($response) = $this->returnAcknowledge_0WithHttpInfo($merchantReturnAcknowledgeRequest, $contentType);
        return $response;
    }

    /**
     * Operation returnAcknowledge_0WithHttpInfo
     *
     * Acknowledges a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnAcknowledgeRequest|null $merchantReturnAcknowledgeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge_0'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnAcknowledge_0WithHttpInfo($merchantReturnAcknowledgeRequest = null, string $contentType = self::contentTypes['returnAcknowledge_0'][0])
    {
        $request = $this->returnAcknowledge_0Request($merchantReturnAcknowledgeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnAcknowledge_0Async
     *
     * Acknowledges a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnAcknowledgeRequest|null $merchantReturnAcknowledgeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnAcknowledge_0Async($merchantReturnAcknowledgeRequest = null, string $contentType = self::contentTypes['returnAcknowledge_0'][0])
    {
        return $this->returnAcknowledge_0AsyncWithHttpInfo($merchantReturnAcknowledgeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnAcknowledge_0AsyncWithHttpInfo
     *
     * Acknowledges a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnAcknowledgeRequest|null $merchantReturnAcknowledgeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnAcknowledge_0AsyncWithHttpInfo($merchantReturnAcknowledgeRequest = null, string $contentType = self::contentTypes['returnAcknowledge_0'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->returnAcknowledge_0Request($merchantReturnAcknowledgeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnAcknowledge_0'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnAcknowledgeRequest|null $merchantReturnAcknowledgeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnAcknowledge_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnAcknowledge_0Request($merchantReturnAcknowledgeRequest = null, string $contentType = self::contentTypes['returnAcknowledge_0'][0])
    {



        $resourcePath = '/v2/returns/merchant/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantReturnAcknowledgeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantReturnAcknowledgeRequest));
            } else {
                $httpBody = $merchantReturnAcknowledgeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnCreate
     *
     * [CLOSED BETA] Create a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantCreateReturnRequest|null $singleMerchantCreateReturnRequest The return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCreate'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function returnCreate($singleMerchantCreateReturnRequest = null, string $contentType = self::contentTypes['returnCreate'][0])
    {
        list($response) = $this->returnCreateWithHttpInfo($singleMerchantCreateReturnRequest, $contentType);
        return $response;
    }

    /**
     * Operation returnCreateWithHttpInfo
     *
     * [CLOSED BETA] Create a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantCreateReturnRequest|null $singleMerchantCreateReturnRequest The return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCreate'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnCreateWithHttpInfo($singleMerchantCreateReturnRequest = null, string $contentType = self::contentTypes['returnCreate'][0])
    {
        $request = $this->returnCreateRequest($singleMerchantCreateReturnRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnCreateAsync
     *
     * [CLOSED BETA] Create a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantCreateReturnRequest|null $singleMerchantCreateReturnRequest The return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnCreateAsync($singleMerchantCreateReturnRequest = null, string $contentType = self::contentTypes['returnCreate'][0])
    {
        return $this->returnCreateAsyncWithHttpInfo($singleMerchantCreateReturnRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnCreateAsyncWithHttpInfo
     *
     * [CLOSED BETA] Create a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantCreateReturnRequest|null $singleMerchantCreateReturnRequest The return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnCreateAsyncWithHttpInfo($singleMerchantCreateReturnRequest = null, string $contentType = self::contentTypes['returnCreate'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->returnCreateRequest($singleMerchantCreateReturnRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnCreate'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantCreateReturnRequest|null $singleMerchantCreateReturnRequest The return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnCreateRequest($singleMerchantCreateReturnRequest = null, string $contentType = self::contentTypes['returnCreate'][0])
    {



        $resourcePath = '/v2.1/returns/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($singleMerchantCreateReturnRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($singleMerchantCreateReturnRequest));
            } else {
                $httpBody = $singleMerchantCreateReturnRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnDeclareForMerchant
     *
     * Creates merchant return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnRequest|null $merchantReturnRequest merchantReturnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnDeclareForMerchant'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function returnDeclareForMerchant($merchantReturnRequest = null, string $contentType = self::contentTypes['returnDeclareForMerchant'][0])
    {
        list($response) = $this->returnDeclareForMerchantWithHttpInfo($merchantReturnRequest, $contentType);
        return $response;
    }

    /**
     * Operation returnDeclareForMerchantWithHttpInfo
     *
     * Creates merchant return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnRequest|null $merchantReturnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnDeclareForMerchant'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnDeclareForMerchantWithHttpInfo($merchantReturnRequest = null, string $contentType = self::contentTypes['returnDeclareForMerchant'][0])
    {
        $request = $this->returnDeclareForMerchantRequest($merchantReturnRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnDeclareForMerchantAsync
     *
     * Creates merchant return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnRequest|null $merchantReturnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnDeclareForMerchant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnDeclareForMerchantAsync($merchantReturnRequest = null, string $contentType = self::contentTypes['returnDeclareForMerchant'][0])
    {
        return $this->returnDeclareForMerchantAsyncWithHttpInfo($merchantReturnRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnDeclareForMerchantAsyncWithHttpInfo
     *
     * Creates merchant return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnRequest|null $merchantReturnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnDeclareForMerchant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnDeclareForMerchantAsyncWithHttpInfo($merchantReturnRequest = null, string $contentType = self::contentTypes['returnDeclareForMerchant'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->returnDeclareForMerchantRequest($merchantReturnRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnDeclareForMerchant'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnRequest|null $merchantReturnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnDeclareForMerchant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnDeclareForMerchantRequest($merchantReturnRequest = null, string $contentType = self::contentTypes['returnDeclareForMerchant'][0])
    {



        $resourcePath = '/v2/returns/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantReturnRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantReturnRequest));
            } else {
                $httpBody = $merchantReturnRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnGet
     *
     * [CLOSED BETA] Get return by identifier
     *
     * @param  string $identifier The identifier to search for (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnIdentifier|null $type Specify whether to search by ID, Merchant Return No or Channel Return No (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGet'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function returnGet($identifier, $type = null, string $contentType = self::contentTypes['returnGet'][0])
    {
        list($response) = $this->returnGetWithHttpInfo($identifier, $type, $contentType);
        return $response;
    }

    /**
     * Operation returnGetWithHttpInfo
     *
     * [CLOSED BETA] Get return by identifier
     *
     * @param  string $identifier The identifier to search for (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnIdentifier|null $type Specify whether to search by ID, Merchant Return No or Channel Return No (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGet'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnGetWithHttpInfo($identifier, $type = null, string $contentType = self::contentTypes['returnGet'][0])
    {
        $request = $this->returnGetRequest($identifier, $type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnGetAsync
     *
     * [CLOSED BETA] Get return by identifier
     *
     * @param  string $identifier The identifier to search for (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnIdentifier|null $type Specify whether to search by ID, Merchant Return No or Channel Return No (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetAsync($identifier, $type = null, string $contentType = self::contentTypes['returnGet'][0])
    {
        return $this->returnGetAsyncWithHttpInfo($identifier, $type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnGetAsyncWithHttpInfo
     *
     * [CLOSED BETA] Get return by identifier
     *
     * @param  string $identifier The identifier to search for (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnIdentifier|null $type Specify whether to search by ID, Merchant Return No or Channel Return No (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetAsyncWithHttpInfo($identifier, $type = null, string $contentType = self::contentTypes['returnGet'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn';
        $request = $this->returnGetRequest($identifier, $type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnGet'
     *
     * @param  string $identifier The identifier to search for (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnIdentifier|null $type Specify whether to search by ID, Merchant Return No or Channel Return No (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnGetRequest($identifier, $type = null, string $contentType = self::contentTypes['returnGet'][0])
    {

        // verify the required parameter 'identifier' is set
        if ($identifier === null || (is_array($identifier) && count($identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier when calling returnGet'
            );
        }



        $resourcePath = '/v2.1/returns/merchant/{identifier}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'ReturnIdentifier', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'identifier' . '}',
                ObjectSerializer::toPathValue($identifier),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnGetByFilter
     *
     * [CLOSED BETA] Get returns by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnByFilterIdentifier|null $identifiersIdentifierType The type of identifier: which identifier to filter on (optional)
     * @param  string[]|null $identifiersModels The value (of the selected type) to filter on (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleChannelExportStatus[]|null $channelExportStatusStatuses channelExportStatusStatuses (optional)
     * @param  int|null $channelExportStatusMaxNumberOfExportAttempts channelExportStatusMaxNumberOfExportAttempts (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnReason[]|null $reasons reasons (optional)
     * @param  \DateTime|null $createdDateRangeFromDate createdDateRangeFromDate (optional)
     * @param  \DateTime|null $createdDateRangeToDate createdDateRangeToDate (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnStatus[]|null $statuses statuses (optional)
     * @param  int[]|null $channelIds channelIds (optional)
     * @param  string|null $search search (optional)
     * @param  bool|null $isAcknowledgedByMerchant isAcknowledgedByMerchant (optional)
     * @param  bool|null $isAcknowledgedByChannel isAcknowledgedByChannel (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleFulfillmentType|null $fulfillmentType fulfillmentType (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorType|null $creatorType creatorType (optional)
     * @param  string[]|null $externalBatchNos externalBatchNos (optional)
     * @param  int|null $page Page number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByFilter'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function returnGetByFilter($identifiersIdentifierType = null, $identifiersModels = null, $channelExportStatusStatuses = null, $channelExportStatusMaxNumberOfExportAttempts = null, $reasons = null, $createdDateRangeFromDate = null, $createdDateRangeToDate = null, $statuses = null, $channelIds = null, $search = null, $isAcknowledgedByMerchant = null, $isAcknowledgedByChannel = null, $fulfillmentType = null, $creatorType = null, $externalBatchNos = null, $page = null, string $contentType = self::contentTypes['returnGetByFilter'][0])
    {
        list($response) = $this->returnGetByFilterWithHttpInfo($identifiersIdentifierType, $identifiersModels, $channelExportStatusStatuses, $channelExportStatusMaxNumberOfExportAttempts, $reasons, $createdDateRangeFromDate, $createdDateRangeToDate, $statuses, $channelIds, $search, $isAcknowledgedByMerchant, $isAcknowledgedByChannel, $fulfillmentType, $creatorType, $externalBatchNos, $page, $contentType);
        return $response;
    }

    /**
     * Operation returnGetByFilterWithHttpInfo
     *
     * [CLOSED BETA] Get returns by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnByFilterIdentifier|null $identifiersIdentifierType The type of identifier: which identifier to filter on (optional)
     * @param  string[]|null $identifiersModels The value (of the selected type) to filter on (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleChannelExportStatus[]|null $channelExportStatusStatuses (optional)
     * @param  int|null $channelExportStatusMaxNumberOfExportAttempts (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnReason[]|null $reasons (optional)
     * @param  \DateTime|null $createdDateRangeFromDate (optional)
     * @param  \DateTime|null $createdDateRangeToDate (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnStatus[]|null $statuses (optional)
     * @param  int[]|null $channelIds (optional)
     * @param  string|null $search (optional)
     * @param  bool|null $isAcknowledgedByMerchant (optional)
     * @param  bool|null $isAcknowledgedByChannel (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleFulfillmentType|null $fulfillmentType (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorType|null $creatorType (optional)
     * @param  string[]|null $externalBatchNos (optional)
     * @param  int|null $page Page number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByFilter'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnGetByFilterWithHttpInfo($identifiersIdentifierType = null, $identifiersModels = null, $channelExportStatusStatuses = null, $channelExportStatusMaxNumberOfExportAttempts = null, $reasons = null, $createdDateRangeFromDate = null, $createdDateRangeToDate = null, $statuses = null, $channelIds = null, $search = null, $isAcknowledgedByMerchant = null, $isAcknowledgedByChannel = null, $fulfillmentType = null, $creatorType = null, $externalBatchNos = null, $page = null, string $contentType = self::contentTypes['returnGetByFilter'][0])
    {
        $request = $this->returnGetByFilterRequest($identifiersIdentifierType, $identifiersModels, $channelExportStatusStatuses, $channelExportStatusMaxNumberOfExportAttempts, $reasons, $createdDateRangeFromDate, $createdDateRangeToDate, $statuses, $channelIds, $search, $isAcknowledgedByMerchant, $isAcknowledgedByChannel, $fulfillmentType, $creatorType, $externalBatchNos, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnGetByFilterAsync
     *
     * [CLOSED BETA] Get returns by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnByFilterIdentifier|null $identifiersIdentifierType The type of identifier: which identifier to filter on (optional)
     * @param  string[]|null $identifiersModels The value (of the selected type) to filter on (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleChannelExportStatus[]|null $channelExportStatusStatuses (optional)
     * @param  int|null $channelExportStatusMaxNumberOfExportAttempts (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnReason[]|null $reasons (optional)
     * @param  \DateTime|null $createdDateRangeFromDate (optional)
     * @param  \DateTime|null $createdDateRangeToDate (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnStatus[]|null $statuses (optional)
     * @param  int[]|null $channelIds (optional)
     * @param  string|null $search (optional)
     * @param  bool|null $isAcknowledgedByMerchant (optional)
     * @param  bool|null $isAcknowledgedByChannel (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleFulfillmentType|null $fulfillmentType (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorType|null $creatorType (optional)
     * @param  string[]|null $externalBatchNos (optional)
     * @param  int|null $page Page number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetByFilterAsync($identifiersIdentifierType = null, $identifiersModels = null, $channelExportStatusStatuses = null, $channelExportStatusMaxNumberOfExportAttempts = null, $reasons = null, $createdDateRangeFromDate = null, $createdDateRangeToDate = null, $statuses = null, $channelIds = null, $search = null, $isAcknowledgedByMerchant = null, $isAcknowledgedByChannel = null, $fulfillmentType = null, $creatorType = null, $externalBatchNos = null, $page = null, string $contentType = self::contentTypes['returnGetByFilter'][0])
    {
        return $this->returnGetByFilterAsyncWithHttpInfo($identifiersIdentifierType, $identifiersModels, $channelExportStatusStatuses, $channelExportStatusMaxNumberOfExportAttempts, $reasons, $createdDateRangeFromDate, $createdDateRangeToDate, $statuses, $channelIds, $search, $isAcknowledgedByMerchant, $isAcknowledgedByChannel, $fulfillmentType, $creatorType, $externalBatchNos, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnGetByFilterAsyncWithHttpInfo
     *
     * [CLOSED BETA] Get returns by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnByFilterIdentifier|null $identifiersIdentifierType The type of identifier: which identifier to filter on (optional)
     * @param  string[]|null $identifiersModels The value (of the selected type) to filter on (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleChannelExportStatus[]|null $channelExportStatusStatuses (optional)
     * @param  int|null $channelExportStatusMaxNumberOfExportAttempts (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnReason[]|null $reasons (optional)
     * @param  \DateTime|null $createdDateRangeFromDate (optional)
     * @param  \DateTime|null $createdDateRangeToDate (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnStatus[]|null $statuses (optional)
     * @param  int[]|null $channelIds (optional)
     * @param  string|null $search (optional)
     * @param  bool|null $isAcknowledgedByMerchant (optional)
     * @param  bool|null $isAcknowledgedByChannel (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleFulfillmentType|null $fulfillmentType (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorType|null $creatorType (optional)
     * @param  string[]|null $externalBatchNos (optional)
     * @param  int|null $page Page number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetByFilterAsyncWithHttpInfo($identifiersIdentifierType = null, $identifiersModels = null, $channelExportStatusStatuses = null, $channelExportStatusMaxNumberOfExportAttempts = null, $reasons = null, $createdDateRangeFromDate = null, $createdDateRangeToDate = null, $statuses = null, $channelIds = null, $search = null, $isAcknowledgedByMerchant = null, $isAcknowledgedByChannel = null, $fulfillmentType = null, $creatorType = null, $externalBatchNos = null, $page = null, string $contentType = self::contentTypes['returnGetByFilter'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\SingleOfIReturn';
        $request = $this->returnGetByFilterRequest($identifiersIdentifierType, $identifiersModels, $channelExportStatusStatuses, $channelExportStatusMaxNumberOfExportAttempts, $reasons, $createdDateRangeFromDate, $createdDateRangeToDate, $statuses, $channelIds, $search, $isAcknowledgedByMerchant, $isAcknowledgedByChannel, $fulfillmentType, $creatorType, $externalBatchNos, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnGetByFilter'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnByFilterIdentifier|null $identifiersIdentifierType The type of identifier: which identifier to filter on (optional)
     * @param  string[]|null $identifiersModels The value (of the selected type) to filter on (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleChannelExportStatus[]|null $channelExportStatusStatuses (optional)
     * @param  int|null $channelExportStatusMaxNumberOfExportAttempts (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnReason[]|null $reasons (optional)
     * @param  \DateTime|null $createdDateRangeFromDate (optional)
     * @param  \DateTime|null $createdDateRangeToDate (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleReturnStatus[]|null $statuses (optional)
     * @param  int[]|null $channelIds (optional)
     * @param  string|null $search (optional)
     * @param  bool|null $isAcknowledgedByMerchant (optional)
     * @param  bool|null $isAcknowledgedByChannel (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ModuleFulfillmentType|null $fulfillmentType (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorType|null $creatorType (optional)
     * @param  string[]|null $externalBatchNos (optional)
     * @param  int|null $page Page number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnGetByFilterRequest($identifiersIdentifierType = null, $identifiersModels = null, $channelExportStatusStatuses = null, $channelExportStatusMaxNumberOfExportAttempts = null, $reasons = null, $createdDateRangeFromDate = null, $createdDateRangeToDate = null, $statuses = null, $channelIds = null, $search = null, $isAcknowledgedByMerchant = null, $isAcknowledgedByChannel = null, $fulfillmentType = null, $creatorType = null, $externalBatchNos = null, $page = null, string $contentType = self::contentTypes['returnGetByFilter'][0])
    {


















        $resourcePath = '/v2.1/returns/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identifiersIdentifierType,
            'identifiers.identifierType', // param base name
            'ReturnByFilterIdentifier', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identifiersModels,
            'identifiers.models', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelExportStatusStatuses,
            'channelExportStatus.statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelExportStatusMaxNumberOfExportAttempts,
            'channelExportStatus.maxNumberOfExportAttempts', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reasons,
            'reasons', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdDateRangeFromDate,
            'createdDateRange.fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdDateRangeToDate,
            'createdDateRange.toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelIds,
            'channelIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isAcknowledgedByMerchant,
            'isAcknowledgedByMerchant', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isAcknowledgedByChannel,
            'isAcknowledgedByChannel', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentType,
            'fulfillmentType', // param base name
            'ModuleFulfillmentType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creatorType,
            'creatorType', // param base name
            'CreatorType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalBatchNos,
            'externalBatchNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnGetByMerchantOrderNo
     *
     * Gets a return
     *
     * @param  string $merchantOrderNo merchantOrderNo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByMerchantOrderNo'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantSingleOrderReturnResponse
     */
    public function returnGetByMerchantOrderNo($merchantOrderNo, string $contentType = self::contentTypes['returnGetByMerchantOrderNo'][0])
    {
        list($response) = $this->returnGetByMerchantOrderNoWithHttpInfo($merchantOrderNo, $contentType);
        return $response;
    }

    /**
     * Operation returnGetByMerchantOrderNoWithHttpInfo
     *
     * Gets a return
     *
     * @param  string $merchantOrderNo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByMerchantOrderNo'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantSingleOrderReturnResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnGetByMerchantOrderNoWithHttpInfo($merchantOrderNo, string $contentType = self::contentTypes['returnGetByMerchantOrderNo'][0])
    {
        $request = $this->returnGetByMerchantOrderNoRequest($merchantOrderNo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantSingleOrderReturnResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantSingleOrderReturnResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantSingleOrderReturnResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantSingleOrderReturnResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantSingleOrderReturnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnGetByMerchantOrderNoAsync
     *
     * Gets a return
     *
     * @param  string $merchantOrderNo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByMerchantOrderNo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetByMerchantOrderNoAsync($merchantOrderNo, string $contentType = self::contentTypes['returnGetByMerchantOrderNo'][0])
    {
        return $this->returnGetByMerchantOrderNoAsyncWithHttpInfo($merchantOrderNo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnGetByMerchantOrderNoAsyncWithHttpInfo
     *
     * Gets a return
     *
     * @param  string $merchantOrderNo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByMerchantOrderNo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetByMerchantOrderNoAsyncWithHttpInfo($merchantOrderNo, string $contentType = self::contentTypes['returnGetByMerchantOrderNo'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantSingleOrderReturnResponse';
        $request = $this->returnGetByMerchantOrderNoRequest($merchantOrderNo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnGetByMerchantOrderNo'
     *
     * @param  string $merchantOrderNo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetByMerchantOrderNo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnGetByMerchantOrderNoRequest($merchantOrderNo, string $contentType = self::contentTypes['returnGetByMerchantOrderNo'][0])
    {

        // verify the required parameter 'merchantOrderNo' is set
        if ($merchantOrderNo === null || (is_array($merchantOrderNo) && count($merchantOrderNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantOrderNo when calling returnGetByMerchantOrderNo'
            );
        }


        $resourcePath = '/v2/returns/merchant/{merchantOrderNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantOrderNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantOrderNo' . '}',
                ObjectSerializer::toPathValue($merchantOrderNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnGetDeclaredByChannel
     *
     * Gets marketplace returns
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetDeclaredByChannel'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse
     */
    public function returnGetDeclaredByChannel($channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetDeclaredByChannel'][0])
    {
        list($response) = $this->returnGetDeclaredByChannelWithHttpInfo($channelIds, $merchantOrderNos, $channelOrderNos, $fulfillmentType, $statuses, $reasons, $fromDate, $toDate, $isAcknowledged, $page, $contentType);
        return $response;
    }

    /**
     * Operation returnGetDeclaredByChannelWithHttpInfo
     *
     * Gets marketplace returns
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetDeclaredByChannel'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnGetDeclaredByChannelWithHttpInfo($channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetDeclaredByChannel'][0])
    {
        $request = $this->returnGetDeclaredByChannelRequest($channelIds, $merchantOrderNos, $channelOrderNos, $fulfillmentType, $statuses, $reasons, $fromDate, $toDate, $isAcknowledged, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnGetDeclaredByChannelAsync
     *
     * Gets marketplace returns
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetDeclaredByChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetDeclaredByChannelAsync($channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetDeclaredByChannel'][0])
    {
        return $this->returnGetDeclaredByChannelAsyncWithHttpInfo($channelIds, $merchantOrderNos, $channelOrderNos, $fulfillmentType, $statuses, $reasons, $fromDate, $toDate, $isAcknowledged, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnGetDeclaredByChannelAsyncWithHttpInfo
     *
     * Gets marketplace returns
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetDeclaredByChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetDeclaredByChannelAsyncWithHttpInfo($channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetDeclaredByChannel'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse';
        $request = $this->returnGetDeclaredByChannelRequest($channelIds, $merchantOrderNos, $channelOrderNos, $fulfillmentType, $statuses, $reasons, $fromDate, $toDate, $isAcknowledged, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnGetDeclaredByChannel'
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetDeclaredByChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnGetDeclaredByChannelRequest($channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetDeclaredByChannel'][0])
    {












        $resourcePath = '/v2/returns/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelIds,
            'channelIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantOrderNos,
            'merchantOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelOrderNos,
            'channelOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentType,
            'fulfillmentType', // param base name
            'FulfillmentType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reasons,
            'reasons', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isAcknowledged,
            'isAcknowledged', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnGetReturns
     *
     * Gets returns by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorFilter|null $creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetReturns'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse
     */
    public function returnGetReturns($creatorType = null, $channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetReturns'][0])
    {
        list($response) = $this->returnGetReturnsWithHttpInfo($creatorType, $channelIds, $merchantOrderNos, $channelOrderNos, $fulfillmentType, $statuses, $reasons, $fromDate, $toDate, $isAcknowledged, $page, $contentType);
        return $response;
    }

    /**
     * Operation returnGetReturnsWithHttpInfo
     *
     * Gets returns by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorFilter|null $creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetReturns'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnGetReturnsWithHttpInfo($creatorType = null, $channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetReturns'][0])
    {
        $request = $this->returnGetReturnsRequest($creatorType, $channelIds, $merchantOrderNos, $channelOrderNos, $fulfillmentType, $statuses, $reasons, $fromDate, $toDate, $isAcknowledged, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnGetReturnsAsync
     *
     * Gets returns by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorFilter|null $creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetReturnsAsync($creatorType = null, $channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetReturns'][0])
    {
        return $this->returnGetReturnsAsyncWithHttpInfo($creatorType, $channelIds, $merchantOrderNos, $channelOrderNos, $fulfillmentType, $statuses, $reasons, $fromDate, $toDate, $isAcknowledged, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnGetReturnsAsyncWithHttpInfo
     *
     * Gets returns by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorFilter|null $creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetReturnsAsyncWithHttpInfo($creatorType = null, $channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetReturns'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse';
        $request = $this->returnGetReturnsRequest($creatorType, $channelIds, $merchantOrderNos, $channelOrderNos, $fulfillmentType, $statuses, $reasons, $fromDate, $toDate, $isAcknowledged, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnGetReturns'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\CreatorFilter|null $creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnStatus[]|null $statuses Return status(es) to filter on. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ReturnReason[]|null $reasons Return reason(s) to filter on. (optional)
     * @param  \DateTime|null $fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param  bool|null $isAcknowledged Filters based on acknowledgements (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnGetReturnsRequest($creatorType = null, $channelIds = null, $merchantOrderNos = null, $channelOrderNos = null, $fulfillmentType = null, $statuses = null, $reasons = null, $fromDate = null, $toDate = null, $isAcknowledged = null, $page = null, string $contentType = self::contentTypes['returnGetReturns'][0])
    {













        $resourcePath = '/v2/returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creatorType,
            'creatorType', // param base name
            'CreatorFilter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelIds,
            'channelIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantOrderNos,
            'merchantOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelOrderNos,
            'channelOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentType,
            'fulfillmentType', // param base name
            'FulfillmentType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reasons,
            'reasons', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isAcknowledged,
            'isAcknowledged', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnGetUnhandled
     *
     * Gets unhandled returns
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetUnhandled'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse
     */
    public function returnGetUnhandled($channelIds = null, $page = null, string $contentType = self::contentTypes['returnGetUnhandled'][0])
    {
        list($response) = $this->returnGetUnhandledWithHttpInfo($channelIds, $page, $contentType);
        return $response;
    }

    /**
     * Operation returnGetUnhandledWithHttpInfo
     *
     * Gets unhandled returns
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetUnhandled'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnGetUnhandledWithHttpInfo($channelIds = null, $page = null, string $contentType = self::contentTypes['returnGetUnhandled'][0])
    {
        $request = $this->returnGetUnhandledRequest($channelIds, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnGetUnhandledAsync
     *
     * Gets unhandled returns
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetUnhandled'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetUnhandledAsync($channelIds = null, $page = null, string $contentType = self::contentTypes['returnGetUnhandled'][0])
    {
        return $this->returnGetUnhandledAsyncWithHttpInfo($channelIds, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnGetUnhandledAsyncWithHttpInfo
     *
     * Gets unhandled returns
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetUnhandled'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnGetUnhandledAsyncWithHttpInfo($channelIds = null, $page = null, string $contentType = self::contentTypes['returnGetUnhandled'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantReturnResponse';
        $request = $this->returnGetUnhandledRequest($channelIds, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnGetUnhandled'
     *
     * @param  int[]|null $channelIds Filter on Channel IDs (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnGetUnhandled'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnGetUnhandledRequest($channelIds = null, $page = null, string $contentType = self::contentTypes['returnGetUnhandled'][0])
    {




        $resourcePath = '/v2/returns/merchant/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelIds,
            'channelIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnHandle
     *
     * [CLOSED BETA] Handle a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantHandleReturnRequest|null $singleMerchantHandleReturnRequest The return to handle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnHandle'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function returnHandle($singleMerchantHandleReturnRequest = null, string $contentType = self::contentTypes['returnHandle'][0])
    {
        list($response) = $this->returnHandleWithHttpInfo($singleMerchantHandleReturnRequest, $contentType);
        return $response;
    }

    /**
     * Operation returnHandleWithHttpInfo
     *
     * [CLOSED BETA] Handle a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantHandleReturnRequest|null $singleMerchantHandleReturnRequest The return to handle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnHandle'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnHandleWithHttpInfo($singleMerchantHandleReturnRequest = null, string $contentType = self::contentTypes['returnHandle'][0])
    {
        $request = $this->returnHandleRequest($singleMerchantHandleReturnRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnHandleAsync
     *
     * [CLOSED BETA] Handle a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantHandleReturnRequest|null $singleMerchantHandleReturnRequest The return to handle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnHandleAsync($singleMerchantHandleReturnRequest = null, string $contentType = self::contentTypes['returnHandle'][0])
    {
        return $this->returnHandleAsyncWithHttpInfo($singleMerchantHandleReturnRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnHandleAsyncWithHttpInfo
     *
     * [CLOSED BETA] Handle a return
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantHandleReturnRequest|null $singleMerchantHandleReturnRequest The return to handle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnHandleAsyncWithHttpInfo($singleMerchantHandleReturnRequest = null, string $contentType = self::contentTypes['returnHandle'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->returnHandleRequest($singleMerchantHandleReturnRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnHandle'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\SingleMerchantHandleReturnRequest|null $singleMerchantHandleReturnRequest The return to handle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnHandleRequest($singleMerchantHandleReturnRequest = null, string $contentType = self::contentTypes['returnHandle'][0])
    {



        $resourcePath = '/v2.1/returns/merchant/handle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($singleMerchantHandleReturnRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($singleMerchantHandleReturnRequest));
            } else {
                $httpBody = $singleMerchantHandleReturnRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnUpdateForMerchant
     *
     * Marks returns as received
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnUpdateRequest|null $merchantReturnUpdateRequest merchantReturnUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnUpdateForMerchant'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function returnUpdateForMerchant($merchantReturnUpdateRequest = null, string $contentType = self::contentTypes['returnUpdateForMerchant'][0])
    {
        list($response) = $this->returnUpdateForMerchantWithHttpInfo($merchantReturnUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation returnUpdateForMerchantWithHttpInfo
     *
     * Marks returns as received
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnUpdateRequest|null $merchantReturnUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnUpdateForMerchant'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnUpdateForMerchantWithHttpInfo($merchantReturnUpdateRequest = null, string $contentType = self::contentTypes['returnUpdateForMerchant'][0])
    {
        $request = $this->returnUpdateForMerchantRequest($merchantReturnUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnUpdateForMerchantAsync
     *
     * Marks returns as received
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnUpdateRequest|null $merchantReturnUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnUpdateForMerchant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnUpdateForMerchantAsync($merchantReturnUpdateRequest = null, string $contentType = self::contentTypes['returnUpdateForMerchant'][0])
    {
        return $this->returnUpdateForMerchantAsyncWithHttpInfo($merchantReturnUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnUpdateForMerchantAsyncWithHttpInfo
     *
     * Marks returns as received
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnUpdateRequest|null $merchantReturnUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnUpdateForMerchant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnUpdateForMerchantAsyncWithHttpInfo($merchantReturnUpdateRequest = null, string $contentType = self::contentTypes['returnUpdateForMerchant'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->returnUpdateForMerchantRequest($merchantReturnUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnUpdateForMerchant'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantReturnUpdateRequest|null $merchantReturnUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnUpdateForMerchant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnUpdateForMerchantRequest($merchantReturnUpdateRequest = null, string $contentType = self::contentTypes['returnUpdateForMerchant'][0])
    {



        $resourcePath = '/v2/returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantReturnUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantReturnUpdateRequest));
            } else {
                $httpBody = $merchantReturnUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
