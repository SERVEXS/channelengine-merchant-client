<?php
/**
 * ShipmentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.19.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChannelEngine\Merchant\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ChannelEngine\Merchant\ApiClient\ApiException;
use ChannelEngine\Merchant\ApiClient\Configuration;
use ChannelEngine\Merchant\ApiClient\HeaderSelector;
use ChannelEngine\Merchant\ApiClient\ObjectSerializer;

/**
 * ShipmentsApi Class Doc Comment
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShipmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'shipmentCreate' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'shipmentCreateForChannelMethod' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'shipmentGetShipmentLabelCarriers' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'shipmentIndex' => [
            'application/json',
        ],
        'shipmentShippingLabel' => [
            'application/json',
        ],
        'shipmentUpdate' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation shipmentCreate
     *
     * Creates shipments
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentRequest|null $merchantShipmentRequest merchantShipmentRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreate'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function shipmentCreate($merchantShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreate'][0])
    {
        list($response) = $this->shipmentCreateWithHttpInfo($merchantShipmentRequest, $contentType);
        return $response;
    }

    /**
     * Operation shipmentCreateWithHttpInfo
     *
     * Creates shipments
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentRequest|null $merchantShipmentRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreate'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentCreateWithHttpInfo($merchantShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreate'][0])
    {
        $request = $this->shipmentCreateRequest($merchantShipmentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentCreateAsync
     *
     * Creates shipments
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentRequest|null $merchantShipmentRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentCreateAsync($merchantShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreate'][0])
    {
        return $this->shipmentCreateAsyncWithHttpInfo($merchantShipmentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentCreateAsyncWithHttpInfo
     *
     * Creates shipments
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentRequest|null $merchantShipmentRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentCreateAsyncWithHttpInfo($merchantShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreate'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->shipmentCreateRequest($merchantShipmentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentCreate'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentRequest|null $merchantShipmentRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentCreateRequest($merchantShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreate'][0])
    {



        $resourcePath = '/v2/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantShipmentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantShipmentRequest));
            } else {
                $httpBody = $merchantShipmentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentCreateForChannelMethod
     *
     * Creates a shipment and initiates shipping label generation
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantChannelLabelShipmentRequest|null $merchantChannelLabelShipmentRequest The shipment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreateForChannelMethod'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function shipmentCreateForChannelMethod($merchantChannelLabelShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreateForChannelMethod'][0])
    {
        list($response) = $this->shipmentCreateForChannelMethodWithHttpInfo($merchantChannelLabelShipmentRequest, $contentType);
        return $response;
    }

    /**
     * Operation shipmentCreateForChannelMethodWithHttpInfo
     *
     * Creates a shipment and initiates shipping label generation
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantChannelLabelShipmentRequest|null $merchantChannelLabelShipmentRequest The shipment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreateForChannelMethod'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentCreateForChannelMethodWithHttpInfo($merchantChannelLabelShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreateForChannelMethod'][0])
    {
        $request = $this->shipmentCreateForChannelMethodRequest($merchantChannelLabelShipmentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentCreateForChannelMethodAsync
     *
     * Creates a shipment and initiates shipping label generation
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantChannelLabelShipmentRequest|null $merchantChannelLabelShipmentRequest The shipment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreateForChannelMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentCreateForChannelMethodAsync($merchantChannelLabelShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreateForChannelMethod'][0])
    {
        return $this->shipmentCreateForChannelMethodAsyncWithHttpInfo($merchantChannelLabelShipmentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentCreateForChannelMethodAsyncWithHttpInfo
     *
     * Creates a shipment and initiates shipping label generation
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantChannelLabelShipmentRequest|null $merchantChannelLabelShipmentRequest The shipment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreateForChannelMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentCreateForChannelMethodAsyncWithHttpInfo($merchantChannelLabelShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreateForChannelMethod'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->shipmentCreateForChannelMethodRequest($merchantChannelLabelShipmentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentCreateForChannelMethod'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantChannelLabelShipmentRequest|null $merchantChannelLabelShipmentRequest The shipment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentCreateForChannelMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentCreateForChannelMethodRequest($merchantChannelLabelShipmentRequest = null, string $contentType = self::contentTypes['shipmentCreateForChannelMethod'][0])
    {



        $resourcePath = '/v2/shipments/channelmethod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantChannelLabelShipmentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantChannelLabelShipmentRequest));
            } else {
                $httpBody = $merchantChannelLabelShipmentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentGetShipmentLabelCarriers
     *
     * Gets carriers providing shipping labels
     *
     * @param  string $merchantOrderNo The merchant&#39;s order reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentLabelCarrierRequest|null $merchantShipmentLabelCarrierRequest The parcel information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentGetShipmentLabelCarriers'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentLabelCarrierResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function shipmentGetShipmentLabelCarriers($merchantOrderNo, $merchantShipmentLabelCarrierRequest = null, string $contentType = self::contentTypes['shipmentGetShipmentLabelCarriers'][0])
    {
        list($response) = $this->shipmentGetShipmentLabelCarriersWithHttpInfo($merchantOrderNo, $merchantShipmentLabelCarrierRequest, $contentType);
        return $response;
    }

    /**
     * Operation shipmentGetShipmentLabelCarriersWithHttpInfo
     *
     * Gets carriers providing shipping labels
     *
     * @param  string $merchantOrderNo The merchant&#39;s order reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentLabelCarrierRequest|null $merchantShipmentLabelCarrierRequest The parcel information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentGetShipmentLabelCarriers'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentLabelCarrierResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentGetShipmentLabelCarriersWithHttpInfo($merchantOrderNo, $merchantShipmentLabelCarrierRequest = null, string $contentType = self::contentTypes['shipmentGetShipmentLabelCarriers'][0])
    {
        $request = $this->shipmentGetShipmentLabelCarriersRequest($merchantOrderNo, $merchantShipmentLabelCarrierRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentLabelCarrierResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentLabelCarrierResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentLabelCarrierResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentLabelCarrierResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentLabelCarrierResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentGetShipmentLabelCarriersAsync
     *
     * Gets carriers providing shipping labels
     *
     * @param  string $merchantOrderNo The merchant&#39;s order reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentLabelCarrierRequest|null $merchantShipmentLabelCarrierRequest The parcel information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentGetShipmentLabelCarriers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentGetShipmentLabelCarriersAsync($merchantOrderNo, $merchantShipmentLabelCarrierRequest = null, string $contentType = self::contentTypes['shipmentGetShipmentLabelCarriers'][0])
    {
        return $this->shipmentGetShipmentLabelCarriersAsyncWithHttpInfo($merchantOrderNo, $merchantShipmentLabelCarrierRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentGetShipmentLabelCarriersAsyncWithHttpInfo
     *
     * Gets carriers providing shipping labels
     *
     * @param  string $merchantOrderNo The merchant&#39;s order reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentLabelCarrierRequest|null $merchantShipmentLabelCarrierRequest The parcel information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentGetShipmentLabelCarriers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentGetShipmentLabelCarriersAsyncWithHttpInfo($merchantOrderNo, $merchantShipmentLabelCarrierRequest = null, string $contentType = self::contentTypes['shipmentGetShipmentLabelCarriers'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentLabelCarrierResponse';
        $request = $this->shipmentGetShipmentLabelCarriersRequest($merchantOrderNo, $merchantShipmentLabelCarrierRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentGetShipmentLabelCarriers'
     *
     * @param  string $merchantOrderNo The merchant&#39;s order reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentLabelCarrierRequest|null $merchantShipmentLabelCarrierRequest The parcel information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentGetShipmentLabelCarriers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentGetShipmentLabelCarriersRequest($merchantOrderNo, $merchantShipmentLabelCarrierRequest = null, string $contentType = self::contentTypes['shipmentGetShipmentLabelCarriers'][0])
    {

        // verify the required parameter 'merchantOrderNo' is set
        if ($merchantOrderNo === null || (is_array($merchantOrderNo) && count($merchantOrderNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantOrderNo when calling shipmentGetShipmentLabelCarriers'
            );
        }



        $resourcePath = '/v2/carriers/{merchantOrderNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantOrderNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantOrderNo' . '}',
                ObjectSerializer::toPathValue($merchantOrderNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantShipmentLabelCarrierRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantShipmentLabelCarrierRequest));
            } else {
                $httpBody = $merchantShipmentLabelCarrierRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentIndex
     *
     * Gets shipments by filter
     *
     * @param  string[]|null $merchantShipmentNos Filter on the unique references (ids) as used by the merchant. (optional)
     * @param  string[]|null $merchantOrderNos Filter on the unique references (ids) of order as used by the merchant. (optional)
     * @param  string|null $method Filter on the shipping method. (optional)
     * @param  string[]|null $shippedFromCountryCodes 2-digit Country code (optional)
     * @param  \DateTime|null $fromShipmentDate Filter on the shipment date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toShipmentDate Filter on the shipment date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromCreateDate Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toCreateDate Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromUpdateDate Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdateDate Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ShipmentFulfillmentType|null $fulfillmentType Filter on the fulfillment type of the shipment. (optional)
     * @param  string[]|null $channelShipmentNos Filter on the unique references (ids) as used by the channel. (optional)
     * @param  string[]|null $channelOrderNos Filter on the unique references (ids) of order as used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ChannelExportStatus|null $channelExportStatus Filter on the current status of the shipment. (optional)
     * @param  int|null $channelExportAttempts Filter on the amount of times the shipment has been attempted to be exported. (optional)
     * @param  \DateTime|null $fromDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentIndex'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentResponse
     */
    public function shipmentIndex($merchantShipmentNos = null, $merchantOrderNos = null, $method = null, $shippedFromCountryCodes = null, $fromShipmentDate = null, $toShipmentDate = null, $fromCreateDate = null, $toCreateDate = null, $fromUpdateDate = null, $toUpdateDate = null, $fulfillmentType = null, $channelShipmentNos = null, $channelOrderNos = null, $channelExportStatus = null, $channelExportAttempts = null, $fromDeliveredAt = null, $toDeliveredAt = null, $page = null, string $contentType = self::contentTypes['shipmentIndex'][0])
    {
        list($response) = $this->shipmentIndexWithHttpInfo($merchantShipmentNos, $merchantOrderNos, $method, $shippedFromCountryCodes, $fromShipmentDate, $toShipmentDate, $fromCreateDate, $toCreateDate, $fromUpdateDate, $toUpdateDate, $fulfillmentType, $channelShipmentNos, $channelOrderNos, $channelExportStatus, $channelExportAttempts, $fromDeliveredAt, $toDeliveredAt, $page, $contentType);
        return $response;
    }

    /**
     * Operation shipmentIndexWithHttpInfo
     *
     * Gets shipments by filter
     *
     * @param  string[]|null $merchantShipmentNos Filter on the unique references (ids) as used by the merchant. (optional)
     * @param  string[]|null $merchantOrderNos Filter on the unique references (ids) of order as used by the merchant. (optional)
     * @param  string|null $method Filter on the shipping method. (optional)
     * @param  string[]|null $shippedFromCountryCodes 2-digit Country code (optional)
     * @param  \DateTime|null $fromShipmentDate Filter on the shipment date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toShipmentDate Filter on the shipment date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromCreateDate Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toCreateDate Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromUpdateDate Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdateDate Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ShipmentFulfillmentType|null $fulfillmentType Filter on the fulfillment type of the shipment. (optional)
     * @param  string[]|null $channelShipmentNos Filter on the unique references (ids) as used by the channel. (optional)
     * @param  string[]|null $channelOrderNos Filter on the unique references (ids) of order as used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ChannelExportStatus|null $channelExportStatus Filter on the current status of the shipment. (optional)
     * @param  int|null $channelExportAttempts Filter on the amount of times the shipment has been attempted to be exported. (optional)
     * @param  \DateTime|null $fromDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentIndex'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentIndexWithHttpInfo($merchantShipmentNos = null, $merchantOrderNos = null, $method = null, $shippedFromCountryCodes = null, $fromShipmentDate = null, $toShipmentDate = null, $fromCreateDate = null, $toCreateDate = null, $fromUpdateDate = null, $toUpdateDate = null, $fulfillmentType = null, $channelShipmentNos = null, $channelOrderNos = null, $channelExportStatus = null, $channelExportAttempts = null, $fromDeliveredAt = null, $toDeliveredAt = null, $page = null, string $contentType = self::contentTypes['shipmentIndex'][0])
    {
        $request = $this->shipmentIndexRequest($merchantShipmentNos, $merchantOrderNos, $method, $shippedFromCountryCodes, $fromShipmentDate, $toShipmentDate, $fromCreateDate, $toCreateDate, $fromUpdateDate, $toUpdateDate, $fulfillmentType, $channelShipmentNos, $channelOrderNos, $channelExportStatus, $channelExportAttempts, $fromDeliveredAt, $toDeliveredAt, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentIndexAsync
     *
     * Gets shipments by filter
     *
     * @param  string[]|null $merchantShipmentNos Filter on the unique references (ids) as used by the merchant. (optional)
     * @param  string[]|null $merchantOrderNos Filter on the unique references (ids) of order as used by the merchant. (optional)
     * @param  string|null $method Filter on the shipping method. (optional)
     * @param  string[]|null $shippedFromCountryCodes 2-digit Country code (optional)
     * @param  \DateTime|null $fromShipmentDate Filter on the shipment date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toShipmentDate Filter on the shipment date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromCreateDate Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toCreateDate Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromUpdateDate Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdateDate Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ShipmentFulfillmentType|null $fulfillmentType Filter on the fulfillment type of the shipment. (optional)
     * @param  string[]|null $channelShipmentNos Filter on the unique references (ids) as used by the channel. (optional)
     * @param  string[]|null $channelOrderNos Filter on the unique references (ids) of order as used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ChannelExportStatus|null $channelExportStatus Filter on the current status of the shipment. (optional)
     * @param  int|null $channelExportAttempts Filter on the amount of times the shipment has been attempted to be exported. (optional)
     * @param  \DateTime|null $fromDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentIndexAsync($merchantShipmentNos = null, $merchantOrderNos = null, $method = null, $shippedFromCountryCodes = null, $fromShipmentDate = null, $toShipmentDate = null, $fromCreateDate = null, $toCreateDate = null, $fromUpdateDate = null, $toUpdateDate = null, $fulfillmentType = null, $channelShipmentNos = null, $channelOrderNos = null, $channelExportStatus = null, $channelExportAttempts = null, $fromDeliveredAt = null, $toDeliveredAt = null, $page = null, string $contentType = self::contentTypes['shipmentIndex'][0])
    {
        return $this->shipmentIndexAsyncWithHttpInfo($merchantShipmentNos, $merchantOrderNos, $method, $shippedFromCountryCodes, $fromShipmentDate, $toShipmentDate, $fromCreateDate, $toCreateDate, $fromUpdateDate, $toUpdateDate, $fulfillmentType, $channelShipmentNos, $channelOrderNos, $channelExportStatus, $channelExportAttempts, $fromDeliveredAt, $toDeliveredAt, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentIndexAsyncWithHttpInfo
     *
     * Gets shipments by filter
     *
     * @param  string[]|null $merchantShipmentNos Filter on the unique references (ids) as used by the merchant. (optional)
     * @param  string[]|null $merchantOrderNos Filter on the unique references (ids) of order as used by the merchant. (optional)
     * @param  string|null $method Filter on the shipping method. (optional)
     * @param  string[]|null $shippedFromCountryCodes 2-digit Country code (optional)
     * @param  \DateTime|null $fromShipmentDate Filter on the shipment date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toShipmentDate Filter on the shipment date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromCreateDate Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toCreateDate Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromUpdateDate Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdateDate Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ShipmentFulfillmentType|null $fulfillmentType Filter on the fulfillment type of the shipment. (optional)
     * @param  string[]|null $channelShipmentNos Filter on the unique references (ids) as used by the channel. (optional)
     * @param  string[]|null $channelOrderNos Filter on the unique references (ids) of order as used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ChannelExportStatus|null $channelExportStatus Filter on the current status of the shipment. (optional)
     * @param  int|null $channelExportAttempts Filter on the amount of times the shipment has been attempted to be exported. (optional)
     * @param  \DateTime|null $fromDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentIndexAsyncWithHttpInfo($merchantShipmentNos = null, $merchantOrderNos = null, $method = null, $shippedFromCountryCodes = null, $fromShipmentDate = null, $toShipmentDate = null, $fromCreateDate = null, $toCreateDate = null, $fromUpdateDate = null, $toUpdateDate = null, $fulfillmentType = null, $channelShipmentNos = null, $channelOrderNos = null, $channelExportStatus = null, $channelExportAttempts = null, $fromDeliveredAt = null, $toDeliveredAt = null, $page = null, string $contentType = self::contentTypes['shipmentIndex'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantShipmentResponse';
        $request = $this->shipmentIndexRequest($merchantShipmentNos, $merchantOrderNos, $method, $shippedFromCountryCodes, $fromShipmentDate, $toShipmentDate, $fromCreateDate, $toCreateDate, $fromUpdateDate, $toUpdateDate, $fulfillmentType, $channelShipmentNos, $channelOrderNos, $channelExportStatus, $channelExportAttempts, $fromDeliveredAt, $toDeliveredAt, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentIndex'
     *
     * @param  string[]|null $merchantShipmentNos Filter on the unique references (ids) as used by the merchant. (optional)
     * @param  string[]|null $merchantOrderNos Filter on the unique references (ids) of order as used by the merchant. (optional)
     * @param  string|null $method Filter on the shipping method. (optional)
     * @param  string[]|null $shippedFromCountryCodes 2-digit Country code (optional)
     * @param  \DateTime|null $fromShipmentDate Filter on the shipment date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toShipmentDate Filter on the shipment date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromCreateDate Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toCreateDate Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromUpdateDate Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdateDate Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ShipmentFulfillmentType|null $fulfillmentType Filter on the fulfillment type of the shipment. (optional)
     * @param  string[]|null $channelShipmentNos Filter on the unique references (ids) as used by the channel. (optional)
     * @param  string[]|null $channelOrderNos Filter on the unique references (ids) of order as used by the channel. (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\ChannelExportStatus|null $channelExportStatus Filter on the current status of the shipment. (optional)
     * @param  int|null $channelExportAttempts Filter on the amount of times the shipment has been attempted to be exported. (optional)
     * @param  \DateTime|null $fromDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toDeliveredAt Filter on the delivery date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentIndexRequest($merchantShipmentNos = null, $merchantOrderNos = null, $method = null, $shippedFromCountryCodes = null, $fromShipmentDate = null, $toShipmentDate = null, $fromCreateDate = null, $toCreateDate = null, $fromUpdateDate = null, $toUpdateDate = null, $fulfillmentType = null, $channelShipmentNos = null, $channelOrderNos = null, $channelExportStatus = null, $channelExportAttempts = null, $fromDeliveredAt = null, $toDeliveredAt = null, $page = null, string $contentType = self::contentTypes['shipmentIndex'][0])
    {




















        $resourcePath = '/v2/shipments/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantShipmentNos,
            'merchantShipmentNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantOrderNos,
            'merchantOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $method,
            'method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shippedFromCountryCodes,
            'shippedFromCountryCodes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromShipmentDate,
            'fromShipmentDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toShipmentDate,
            'toShipmentDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromCreateDate,
            'fromCreateDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toCreateDate,
            'toCreateDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromUpdateDate,
            'fromUpdateDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toUpdateDate,
            'toUpdateDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentType,
            'fulfillmentType', // param base name
            'ShipmentFulfillmentType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelShipmentNos,
            'channelShipmentNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelOrderNos,
            'channelOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelExportStatus,
            'channelExportStatus', // param base name
            'ChannelExportStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelExportAttempts,
            'channelExportAttempts', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDeliveredAt,
            'fromDeliveredAt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDeliveredAt,
            'toDeliveredAt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentShippingLabel
     *
     * Gets a shipping label
     *
     * @param  string $merchantShipmentNo The unique shipment reference as used by the merchant. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentShippingLabel'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function shipmentShippingLabel($merchantShipmentNo, string $contentType = self::contentTypes['shipmentShippingLabel'][0])
    {
        list($response) = $this->shipmentShippingLabelWithHttpInfo($merchantShipmentNo, $contentType);
        return $response;
    }

    /**
     * Operation shipmentShippingLabelWithHttpInfo
     *
     * Gets a shipping label
     *
     * @param  string $merchantShipmentNo The unique shipment reference as used by the merchant. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentShippingLabel'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentShippingLabelWithHttpInfo($merchantShipmentNo, string $contentType = self::contentTypes['shipmentShippingLabel'][0])
    {
        $request = $this->shipmentShippingLabelRequest($merchantShipmentNo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentShippingLabelAsync
     *
     * Gets a shipping label
     *
     * @param  string $merchantShipmentNo The unique shipment reference as used by the merchant. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentShippingLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentShippingLabelAsync($merchantShipmentNo, string $contentType = self::contentTypes['shipmentShippingLabel'][0])
    {
        return $this->shipmentShippingLabelAsyncWithHttpInfo($merchantShipmentNo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentShippingLabelAsyncWithHttpInfo
     *
     * Gets a shipping label
     *
     * @param  string $merchantShipmentNo The unique shipment reference as used by the merchant. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentShippingLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentShippingLabelAsyncWithHttpInfo($merchantShipmentNo, string $contentType = self::contentTypes['shipmentShippingLabel'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->shipmentShippingLabelRequest($merchantShipmentNo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentShippingLabel'
     *
     * @param  string $merchantShipmentNo The unique shipment reference as used by the merchant. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentShippingLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentShippingLabelRequest($merchantShipmentNo, string $contentType = self::contentTypes['shipmentShippingLabel'][0])
    {

        // verify the required parameter 'merchantShipmentNo' is set
        if ($merchantShipmentNo === null || (is_array($merchantShipmentNo) && count($merchantShipmentNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantShipmentNo when calling shipmentShippingLabel'
            );
        }


        $resourcePath = '/v2/orders/{merchantShipmentNo}/shippinglabel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantShipmentNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantShipmentNo' . '}',
                ObjectSerializer::toPathValue($merchantShipmentNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.shippingLabel', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentUpdate
     *
     * Updates a shipment
     *
     * @param  string $merchantShipmentNo The merchant&#39;s shipment reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentTrackingRequest|null $merchantShipmentTrackingRequest The updated tracking information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentUpdate'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function shipmentUpdate($merchantShipmentNo, $merchantShipmentTrackingRequest = null, string $contentType = self::contentTypes['shipmentUpdate'][0])
    {
        list($response) = $this->shipmentUpdateWithHttpInfo($merchantShipmentNo, $merchantShipmentTrackingRequest, $contentType);
        return $response;
    }

    /**
     * Operation shipmentUpdateWithHttpInfo
     *
     * Updates a shipment
     *
     * @param  string $merchantShipmentNo The merchant&#39;s shipment reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentTrackingRequest|null $merchantShipmentTrackingRequest The updated tracking information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentUpdate'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentUpdateWithHttpInfo($merchantShipmentNo, $merchantShipmentTrackingRequest = null, string $contentType = self::contentTypes['shipmentUpdate'][0])
    {
        $request = $this->shipmentUpdateRequest($merchantShipmentNo, $merchantShipmentTrackingRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentUpdateAsync
     *
     * Updates a shipment
     *
     * @param  string $merchantShipmentNo The merchant&#39;s shipment reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentTrackingRequest|null $merchantShipmentTrackingRequest The updated tracking information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentUpdateAsync($merchantShipmentNo, $merchantShipmentTrackingRequest = null, string $contentType = self::contentTypes['shipmentUpdate'][0])
    {
        return $this->shipmentUpdateAsyncWithHttpInfo($merchantShipmentNo, $merchantShipmentTrackingRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentUpdateAsyncWithHttpInfo
     *
     * Updates a shipment
     *
     * @param  string $merchantShipmentNo The merchant&#39;s shipment reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentTrackingRequest|null $merchantShipmentTrackingRequest The updated tracking information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentUpdateAsyncWithHttpInfo($merchantShipmentNo, $merchantShipmentTrackingRequest = null, string $contentType = self::contentTypes['shipmentUpdate'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->shipmentUpdateRequest($merchantShipmentNo, $merchantShipmentTrackingRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentUpdate'
     *
     * @param  string $merchantShipmentNo The merchant&#39;s shipment reference. (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantShipmentTrackingRequest|null $merchantShipmentTrackingRequest The updated tracking information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentUpdateRequest($merchantShipmentNo, $merchantShipmentTrackingRequest = null, string $contentType = self::contentTypes['shipmentUpdate'][0])
    {

        // verify the required parameter 'merchantShipmentNo' is set
        if ($merchantShipmentNo === null || (is_array($merchantShipmentNo) && count($merchantShipmentNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantShipmentNo when calling shipmentUpdate'
            );
        }



        $resourcePath = '/v2/shipments/{merchantShipmentNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantShipmentNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantShipmentNo' . '}',
                ObjectSerializer::toPathValue($merchantShipmentNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantShipmentTrackingRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantShipmentTrackingRequest));
            } else {
                $httpBody = $merchantShipmentTrackingRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
