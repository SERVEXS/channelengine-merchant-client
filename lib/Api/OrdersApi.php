<?php
/**
 * OrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.19.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChannelEngine\Merchant\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ChannelEngine\Merchant\ApiClient\ApiException;
use ChannelEngine\Merchant\ApiClient\Configuration;
use ChannelEngine\Merchant\ApiClient\HeaderSelector;
use ChannelEngine\Merchant\ApiClient\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'orderAcknowledge' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'orderGetByFilter' => [
            'application/json',
        ],
        'orderGetNew' => [
            'application/json',
        ],
        'orderInvoice' => [
            'application/json',
        ],
        'orderMarkExportAsFailed' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'orderPackingSlip' => [
            'application/json',
        ],
        'orderUpdate' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'orderUploadInvoice' => [
            'multipart/form-data',
        ],
        'orderUploadInvoiceAsString' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderAcknowledge
     *
     * Acknowledges orders
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest|null $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAcknowledge'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderAcknowledge($merchantOrderAcknowledgementRequest = null, string $contentType = self::contentTypes['orderAcknowledge'][0])
    {
        list($response) = $this->orderAcknowledgeWithHttpInfo($merchantOrderAcknowledgementRequest, $contentType);
        return $response;
    }

    /**
     * Operation orderAcknowledgeWithHttpInfo
     *
     * Acknowledges orders
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest|null $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAcknowledge'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderAcknowledgeWithHttpInfo($merchantOrderAcknowledgementRequest = null, string $contentType = self::contentTypes['orderAcknowledge'][0])
    {
        $request = $this->orderAcknowledgeRequest($merchantOrderAcknowledgementRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderAcknowledgeAsync
     *
     * Acknowledges orders
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest|null $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAcknowledgeAsync($merchantOrderAcknowledgementRequest = null, string $contentType = self::contentTypes['orderAcknowledge'][0])
    {
        return $this->orderAcknowledgeAsyncWithHttpInfo($merchantOrderAcknowledgementRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderAcknowledgeAsyncWithHttpInfo
     *
     * Acknowledges orders
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest|null $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAcknowledgeAsyncWithHttpInfo($merchantOrderAcknowledgementRequest = null, string $contentType = self::contentTypes['orderAcknowledge'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->orderAcknowledgeRequest($merchantOrderAcknowledgementRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderAcknowledge'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest|null $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderAcknowledgeRequest($merchantOrderAcknowledgementRequest = null, string $contentType = self::contentTypes['orderAcknowledge'][0])
    {



        $resourcePath = '/v2/orders/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantOrderAcknowledgementRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantOrderAcknowledgementRequest));
            } else {
                $httpBody = $merchantOrderAcknowledgementRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetByFilter
     *
     * Gets orders by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[]|null $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[]|null $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  string[]|null $commercialOrderNos Filter on commercial order numbers. (optional)
     * @param  \DateTime|null $fromDate Filter on the order date, starting from this date. This date is inclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $toDate Filter on the order date, until this date. This date is exclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime|null $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool|null $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace. &lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool|null $onlyWithCancellationRequests Filter on orders containing cancellation requests. &lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped. &lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[]|null $channelIds Filter orders on channel(s). (optional)
     * @param  int[]|null $stockLocationIds Filter on stock locations (optional)
     * @param  bool|null $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime|null $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toAcknowledgedDate Filter on the order acknowledged date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromClosedAtDate Filter on the order ClosedAt date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toClosedAtDate Filter on the order ClosedAt date, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetByFilter'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse
     */
    public function orderGetByFilter($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $commercialOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $fromClosedAtDate = null, $toClosedAtDate = null, $page = null, string $contentType = self::contentTypes['orderGetByFilter'][0])
    {
        list($response) = $this->orderGetByFilterWithHttpInfo($statuses, $emailAddresses, $merchantOrderNos, $channelOrderNos, $commercialOrderNos, $fromDate, $toDate, $fromCreatedAtDate, $toCreatedAtDate, $excludeMarketplaceFulfilledOrdersAndLines, $fulfillmentType, $onlyWithCancellationRequests, $channelIds, $stockLocationIds, $isAcknowledged, $fromUpdatedAtDate, $toUpdatedAtDate, $fromAcknowledgedDate, $toAcknowledgedDate, $fromClosedAtDate, $toClosedAtDate, $page, $contentType);
        return $response;
    }

    /**
     * Operation orderGetByFilterWithHttpInfo
     *
     * Gets orders by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[]|null $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[]|null $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  string[]|null $commercialOrderNos Filter on commercial order numbers. (optional)
     * @param  \DateTime|null $fromDate Filter on the order date, starting from this date. This date is inclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $toDate Filter on the order date, until this date. This date is exclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime|null $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool|null $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace. &lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool|null $onlyWithCancellationRequests Filter on orders containing cancellation requests. &lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped. &lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[]|null $channelIds Filter orders on channel(s). (optional)
     * @param  int[]|null $stockLocationIds Filter on stock locations (optional)
     * @param  bool|null $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime|null $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toAcknowledgedDate Filter on the order acknowledged date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromClosedAtDate Filter on the order ClosedAt date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toClosedAtDate Filter on the order ClosedAt date, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetByFilter'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetByFilterWithHttpInfo($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $commercialOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $fromClosedAtDate = null, $toClosedAtDate = null, $page = null, string $contentType = self::contentTypes['orderGetByFilter'][0])
    {
        $request = $this->orderGetByFilterRequest($statuses, $emailAddresses, $merchantOrderNos, $channelOrderNos, $commercialOrderNos, $fromDate, $toDate, $fromCreatedAtDate, $toCreatedAtDate, $excludeMarketplaceFulfilledOrdersAndLines, $fulfillmentType, $onlyWithCancellationRequests, $channelIds, $stockLocationIds, $isAcknowledged, $fromUpdatedAtDate, $toUpdatedAtDate, $fromAcknowledgedDate, $toAcknowledgedDate, $fromClosedAtDate, $toClosedAtDate, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetByFilterAsync
     *
     * Gets orders by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[]|null $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[]|null $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  string[]|null $commercialOrderNos Filter on commercial order numbers. (optional)
     * @param  \DateTime|null $fromDate Filter on the order date, starting from this date. This date is inclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $toDate Filter on the order date, until this date. This date is exclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime|null $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool|null $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace. &lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool|null $onlyWithCancellationRequests Filter on orders containing cancellation requests. &lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped. &lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[]|null $channelIds Filter orders on channel(s). (optional)
     * @param  int[]|null $stockLocationIds Filter on stock locations (optional)
     * @param  bool|null $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime|null $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toAcknowledgedDate Filter on the order acknowledged date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromClosedAtDate Filter on the order ClosedAt date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toClosedAtDate Filter on the order ClosedAt date, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetByFilterAsync($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $commercialOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $fromClosedAtDate = null, $toClosedAtDate = null, $page = null, string $contentType = self::contentTypes['orderGetByFilter'][0])
    {
        return $this->orderGetByFilterAsyncWithHttpInfo($statuses, $emailAddresses, $merchantOrderNos, $channelOrderNos, $commercialOrderNos, $fromDate, $toDate, $fromCreatedAtDate, $toCreatedAtDate, $excludeMarketplaceFulfilledOrdersAndLines, $fulfillmentType, $onlyWithCancellationRequests, $channelIds, $stockLocationIds, $isAcknowledged, $fromUpdatedAtDate, $toUpdatedAtDate, $fromAcknowledgedDate, $toAcknowledgedDate, $fromClosedAtDate, $toClosedAtDate, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetByFilterAsyncWithHttpInfo
     *
     * Gets orders by filter
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[]|null $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[]|null $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  string[]|null $commercialOrderNos Filter on commercial order numbers. (optional)
     * @param  \DateTime|null $fromDate Filter on the order date, starting from this date. This date is inclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $toDate Filter on the order date, until this date. This date is exclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime|null $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool|null $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace. &lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool|null $onlyWithCancellationRequests Filter on orders containing cancellation requests. &lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped. &lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[]|null $channelIds Filter orders on channel(s). (optional)
     * @param  int[]|null $stockLocationIds Filter on stock locations (optional)
     * @param  bool|null $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime|null $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toAcknowledgedDate Filter on the order acknowledged date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromClosedAtDate Filter on the order ClosedAt date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toClosedAtDate Filter on the order ClosedAt date, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetByFilterAsyncWithHttpInfo($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $commercialOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $fromClosedAtDate = null, $toClosedAtDate = null, $page = null, string $contentType = self::contentTypes['orderGetByFilter'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse';
        $request = $this->orderGetByFilterRequest($statuses, $emailAddresses, $merchantOrderNos, $channelOrderNos, $commercialOrderNos, $fromDate, $toDate, $fromCreatedAtDate, $toCreatedAtDate, $excludeMarketplaceFulfilledOrdersAndLines, $fulfillmentType, $onlyWithCancellationRequests, $channelIds, $stockLocationIds, $isAcknowledged, $fromUpdatedAtDate, $toUpdatedAtDate, $fromAcknowledgedDate, $toAcknowledgedDate, $fromClosedAtDate, $toClosedAtDate, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetByFilter'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[]|null $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[]|null $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[]|null $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[]|null $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  string[]|null $commercialOrderNos Filter on commercial order numbers. (optional)
     * @param  \DateTime|null $fromDate Filter on the order date, starting from this date. This date is inclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $toDate Filter on the order date, until this date. This date is exclusive. &lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime|null $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime|null $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive. &lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool|null $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType|null $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace. &lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool|null $onlyWithCancellationRequests Filter on orders containing cancellation requests. &lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped. &lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[]|null $channelIds Filter orders on channel(s). (optional)
     * @param  int[]|null $stockLocationIds Filter on stock locations (optional)
     * @param  bool|null $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime|null $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toAcknowledgedDate Filter on the order acknowledged date, until this date. This date is exclusive. (optional)
     * @param  \DateTime|null $fromClosedAtDate Filter on the order ClosedAt date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime|null $toClosedAtDate Filter on the order ClosedAt date, until this date. This date is exclusive. (optional)
     * @param  int|null $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderGetByFilterRequest($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $commercialOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $fromClosedAtDate = null, $toClosedAtDate = null, $page = null, string $contentType = self::contentTypes['orderGetByFilter'][0])
    {
























        $resourcePath = '/v2/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $emailAddresses,
            'emailAddresses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantOrderNos,
            'merchantOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelOrderNos,
            'channelOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $commercialOrderNos,
            'commercialOrderNos', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromCreatedAtDate,
            'fromCreatedAtDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toCreatedAtDate,
            'toCreatedAtDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludeMarketplaceFulfilledOrdersAndLines,
            'excludeMarketplaceFulfilledOrdersAndLines', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentType,
            'fulfillmentType', // param base name
            'FulfillmentType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onlyWithCancellationRequests,
            'onlyWithCancellationRequests', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelIds,
            'channelIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stockLocationIds,
            'stockLocationIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isAcknowledged,
            'isAcknowledged', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromUpdatedAtDate,
            'fromUpdatedAtDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toUpdatedAtDate,
            'toUpdatedAtDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromAcknowledgedDate,
            'fromAcknowledgedDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toAcknowledgedDate,
            'toAcknowledgedDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromClosedAtDate,
            'fromClosedAtDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toClosedAtDate,
            'toClosedAtDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetNew
     *
     * Gets new orders
     *
     * @param  int|null $stockLocationId The ChannelEngine id of the stock location. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetNew'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse
     */
    public function orderGetNew($stockLocationId = null, string $contentType = self::contentTypes['orderGetNew'][0])
    {
        list($response) = $this->orderGetNewWithHttpInfo($stockLocationId, $contentType);
        return $response;
    }

    /**
     * Operation orderGetNewWithHttpInfo
     *
     * Gets new orders
     *
     * @param  int|null $stockLocationId The ChannelEngine id of the stock location. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetNew'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetNewWithHttpInfo($stockLocationId = null, string $contentType = self::contentTypes['orderGetNew'][0])
    {
        $request = $this->orderGetNewRequest($stockLocationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetNewAsync
     *
     * Gets new orders
     *
     * @param  int|null $stockLocationId The ChannelEngine id of the stock location. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetNewAsync($stockLocationId = null, string $contentType = self::contentTypes['orderGetNew'][0])
    {
        return $this->orderGetNewAsyncWithHttpInfo($stockLocationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetNewAsyncWithHttpInfo
     *
     * Gets new orders
     *
     * @param  int|null $stockLocationId The ChannelEngine id of the stock location. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetNewAsyncWithHttpInfo($stockLocationId = null, string $contentType = self::contentTypes['orderGetNew'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse';
        $request = $this->orderGetNewRequest($stockLocationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetNew'
     *
     * @param  int|null $stockLocationId The ChannelEngine id of the stock location. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderGetNewRequest($stockLocationId = null, string $contentType = self::contentTypes['orderGetNew'][0])
    {



        $resourcePath = '/v2/orders/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stockLocationId,
            'stockLocationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderInvoice
     *
     * Generates an order invoice
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInvoice'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderInvoice($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderInvoice'][0])
    {
        list($response) = $this->orderInvoiceWithHttpInfo($merchantOrderNo, $useCustomerCulture, $contentType);
        return $response;
    }

    /**
     * Operation orderInvoiceWithHttpInfo
     *
     * Generates an order invoice
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInvoice'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderInvoiceWithHttpInfo($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderInvoice'][0])
    {
        $request = $this->orderInvoiceRequest($merchantOrderNo, $useCustomerCulture, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderInvoiceAsync
     *
     * Generates an order invoice
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderInvoiceAsync($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderInvoice'][0])
    {
        return $this->orderInvoiceAsyncWithHttpInfo($merchantOrderNo, $useCustomerCulture, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderInvoiceAsyncWithHttpInfo
     *
     * Generates an order invoice
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderInvoiceAsyncWithHttpInfo($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderInvoice'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->orderInvoiceRequest($merchantOrderNo, $useCustomerCulture, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderInvoice'
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderInvoiceRequest($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderInvoice'][0])
    {

        // verify the required parameter 'merchantOrderNo' is set
        if ($merchantOrderNo === null || (is_array($merchantOrderNo) && count($merchantOrderNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantOrderNo when calling orderInvoice'
            );
        }



        $resourcePath = '/v2/orders/{merchantOrderNo}/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $useCustomerCulture,
            'useCustomerCulture', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchantOrderNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantOrderNo' . '}',
                ObjectSerializer::toPathValue($merchantOrderNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderMarkExportAsFailed
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\BulkMerchantMarkExportAsFailedForOrdersRequest|null $bulkMerchantMarkExportAsFailedForOrdersRequest bulkMerchantMarkExportAsFailedForOrdersRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMarkExportAsFailed'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderMarkExportAsFailed($bulkMerchantMarkExportAsFailedForOrdersRequest = null, string $contentType = self::contentTypes['orderMarkExportAsFailed'][0])
    {
        list($response) = $this->orderMarkExportAsFailedWithHttpInfo($bulkMerchantMarkExportAsFailedForOrdersRequest, $contentType);
        return $response;
    }

    /**
     * Operation orderMarkExportAsFailedWithHttpInfo
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\BulkMerchantMarkExportAsFailedForOrdersRequest|null $bulkMerchantMarkExportAsFailedForOrdersRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMarkExportAsFailed'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderMarkExportAsFailedWithHttpInfo($bulkMerchantMarkExportAsFailedForOrdersRequest = null, string $contentType = self::contentTypes['orderMarkExportAsFailed'][0])
    {
        $request = $this->orderMarkExportAsFailedRequest($bulkMerchantMarkExportAsFailedForOrdersRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderMarkExportAsFailedAsync
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\BulkMerchantMarkExportAsFailedForOrdersRequest|null $bulkMerchantMarkExportAsFailedForOrdersRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMarkExportAsFailed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderMarkExportAsFailedAsync($bulkMerchantMarkExportAsFailedForOrdersRequest = null, string $contentType = self::contentTypes['orderMarkExportAsFailed'][0])
    {
        return $this->orderMarkExportAsFailedAsyncWithHttpInfo($bulkMerchantMarkExportAsFailedForOrdersRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderMarkExportAsFailedAsyncWithHttpInfo
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\BulkMerchantMarkExportAsFailedForOrdersRequest|null $bulkMerchantMarkExportAsFailedForOrdersRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMarkExportAsFailed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderMarkExportAsFailedAsyncWithHttpInfo($bulkMerchantMarkExportAsFailedForOrdersRequest = null, string $contentType = self::contentTypes['orderMarkExportAsFailed'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->orderMarkExportAsFailedRequest($bulkMerchantMarkExportAsFailedForOrdersRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderMarkExportAsFailed'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\BulkMerchantMarkExportAsFailedForOrdersRequest|null $bulkMerchantMarkExportAsFailedForOrdersRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMarkExportAsFailed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderMarkExportAsFailedRequest($bulkMerchantMarkExportAsFailedForOrdersRequest = null, string $contentType = self::contentTypes['orderMarkExportAsFailed'][0])
    {



        $resourcePath = '/v2/orders/mark-export-as-failed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulkMerchantMarkExportAsFailedForOrdersRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulkMerchantMarkExportAsFailedForOrdersRequest));
            } else {
                $httpBody = $bulkMerchantMarkExportAsFailedForOrdersRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderPackingSlip
     *
     * Generates a packing slip
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPackingSlip'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderPackingSlip($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderPackingSlip'][0])
    {
        list($response) = $this->orderPackingSlipWithHttpInfo($merchantOrderNo, $useCustomerCulture, $contentType);
        return $response;
    }

    /**
     * Operation orderPackingSlipWithHttpInfo
     *
     * Generates a packing slip
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPackingSlip'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderPackingSlipWithHttpInfo($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderPackingSlip'][0])
    {
        $request = $this->orderPackingSlipRequest($merchantOrderNo, $useCustomerCulture, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderPackingSlipAsync
     *
     * Generates a packing slip
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPackingSlip'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPackingSlipAsync($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderPackingSlip'][0])
    {
        return $this->orderPackingSlipAsyncWithHttpInfo($merchantOrderNo, $useCustomerCulture, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderPackingSlipAsyncWithHttpInfo
     *
     * Generates a packing slip
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPackingSlip'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPackingSlipAsyncWithHttpInfo($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderPackingSlip'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->orderPackingSlipRequest($merchantOrderNo, $useCustomerCulture, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderPackingSlip'
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool|null $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPackingSlip'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderPackingSlipRequest($merchantOrderNo, $useCustomerCulture = false, string $contentType = self::contentTypes['orderPackingSlip'][0])
    {

        // verify the required parameter 'merchantOrderNo' is set
        if ($merchantOrderNo === null || (is_array($merchantOrderNo) && count($merchantOrderNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantOrderNo when calling orderPackingSlip'
            );
        }



        $resourcePath = '/v2/orders/{merchantOrderNo}/packingslip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $useCustomerCulture,
            'useCustomerCulture', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchantOrderNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantOrderNo' . '}',
                ObjectSerializer::toPathValue($merchantOrderNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderUpdate
     *
     * Updates an order comment
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest|null $merchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderUpdate($merchantOrderCommentUpdateRequest = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {
        list($response) = $this->orderUpdateWithHttpInfo($merchantOrderCommentUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation orderUpdateWithHttpInfo
     *
     * Updates an order comment
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest|null $merchantOrderCommentUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderUpdateWithHttpInfo($merchantOrderCommentUpdateRequest = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {
        $request = $this->orderUpdateRequest($merchantOrderCommentUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderUpdateAsync
     *
     * Updates an order comment
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest|null $merchantOrderCommentUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUpdateAsync($merchantOrderCommentUpdateRequest = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {
        return $this->orderUpdateAsyncWithHttpInfo($merchantOrderCommentUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderUpdateAsyncWithHttpInfo
     *
     * Updates an order comment
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest|null $merchantOrderCommentUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUpdateAsyncWithHttpInfo($merchantOrderCommentUpdateRequest = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->orderUpdateRequest($merchantOrderCommentUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderUpdate'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest|null $merchantOrderCommentUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderUpdateRequest($merchantOrderCommentUpdateRequest = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {



        $resourcePath = '/v2/orders/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantOrderCommentUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantOrderCommentUpdateRequest));
            } else {
                $httpBody = $merchantOrderCommentUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderUploadInvoice
     *
     * Uploads an order invoice
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  \SplFileObject $invoice PDF invoice file up to 1 MB with additional data. (required)
     * @param  string|null $invoiceNumber The invoice number used in the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoice'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderUploadInvoice($merchantOrderNo, $invoice, $invoiceNumber = null, string $contentType = self::contentTypes['orderUploadInvoice'][0])
    {
        list($response) = $this->orderUploadInvoiceWithHttpInfo($merchantOrderNo, $invoice, $invoiceNumber, $contentType);
        return $response;
    }

    /**
     * Operation orderUploadInvoiceWithHttpInfo
     *
     * Uploads an order invoice
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  \SplFileObject $invoice PDF invoice file up to 1 MB with additional data. (required)
     * @param  string|null $invoiceNumber The invoice number used in the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoice'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderUploadInvoiceWithHttpInfo($merchantOrderNo, $invoice, $invoiceNumber = null, string $contentType = self::contentTypes['orderUploadInvoice'][0])
    {
        $request = $this->orderUploadInvoiceRequest($merchantOrderNo, $invoice, $invoiceNumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderUploadInvoiceAsync
     *
     * Uploads an order invoice
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  \SplFileObject $invoice PDF invoice file up to 1 MB with additional data. (required)
     * @param  string|null $invoiceNumber The invoice number used in the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUploadInvoiceAsync($merchantOrderNo, $invoice, $invoiceNumber = null, string $contentType = self::contentTypes['orderUploadInvoice'][0])
    {
        return $this->orderUploadInvoiceAsyncWithHttpInfo($merchantOrderNo, $invoice, $invoiceNumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderUploadInvoiceAsyncWithHttpInfo
     *
     * Uploads an order invoice
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  \SplFileObject $invoice PDF invoice file up to 1 MB with additional data. (required)
     * @param  string|null $invoiceNumber The invoice number used in the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUploadInvoiceAsyncWithHttpInfo($merchantOrderNo, $invoice, $invoiceNumber = null, string $contentType = self::contentTypes['orderUploadInvoice'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->orderUploadInvoiceRequest($merchantOrderNo, $invoice, $invoiceNumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderUploadInvoice'
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  \SplFileObject $invoice PDF invoice file up to 1 MB with additional data. (required)
     * @param  string|null $invoiceNumber The invoice number used in the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderUploadInvoiceRequest($merchantOrderNo, $invoice, $invoiceNumber = null, string $contentType = self::contentTypes['orderUploadInvoice'][0])
    {

        // verify the required parameter 'merchantOrderNo' is set
        if ($merchantOrderNo === null || (is_array($merchantOrderNo) && count($merchantOrderNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantOrderNo when calling orderUploadInvoice'
            );
        }

        // verify the required parameter 'invoice' is set
        if ($invoice === null || (is_array($invoice) && count($invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice when calling orderUploadInvoice'
            );
        }

        if ($invoiceNumber !== null && strlen($invoiceNumber) > 50) {
            throw new \InvalidArgumentException('invalid length for "$invoiceNumber" when calling OrdersApi.orderUploadInvoice, must be smaller than or equal to 50.');
        }
        if ($invoiceNumber !== null && strlen($invoiceNumber) < 0) {
            throw new \InvalidArgumentException('invalid length for "$invoiceNumber" when calling OrdersApi.orderUploadInvoice, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/orders/{merchantOrderNo}/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantOrderNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantOrderNo' . '}',
                ObjectSerializer::toPathValue($merchantOrderNo),
                $resourcePath
            );
        }

        // form params
        if ($invoice !== null) {
            $multipart = true;
            $formParams['invoice'] = [];
            $paramFiles = is_array($invoice) ? $invoice : [$invoice];
            foreach ($paramFiles as $paramFile) {
                $formParams['invoice'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($invoiceNumber !== null) {
            $formParams['invoiceNumber'] = ObjectSerializer::toFormValue($invoiceNumber);
        }

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderUploadInvoiceAsString
     *
     * Uploads an order invoice PDF from Base64 string.
     *
     * @param  string $merchantOrderNo merchantOrderNo (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantInvoiceUploadRequest|null $merchantInvoiceUploadRequest merchantInvoiceUploadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoiceAsString'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderUploadInvoiceAsString($merchantOrderNo, $merchantInvoiceUploadRequest = null, string $contentType = self::contentTypes['orderUploadInvoiceAsString'][0])
    {
        list($response) = $this->orderUploadInvoiceAsStringWithHttpInfo($merchantOrderNo, $merchantInvoiceUploadRequest, $contentType);
        return $response;
    }

    /**
     * Operation orderUploadInvoiceAsStringWithHttpInfo
     *
     * Uploads an order invoice PDF from Base64 string.
     *
     * @param  string $merchantOrderNo (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantInvoiceUploadRequest|null $merchantInvoiceUploadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoiceAsString'] to see the possible values for this operation
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderUploadInvoiceAsStringWithHttpInfo($merchantOrderNo, $merchantInvoiceUploadRequest = null, string $contentType = self::contentTypes['orderUploadInvoiceAsString'][0])
    {
        $request = $this->orderUploadInvoiceAsStringRequest($merchantOrderNo, $merchantInvoiceUploadRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderUploadInvoiceAsStringAsync
     *
     * Uploads an order invoice PDF from Base64 string.
     *
     * @param  string $merchantOrderNo (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantInvoiceUploadRequest|null $merchantInvoiceUploadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoiceAsString'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUploadInvoiceAsStringAsync($merchantOrderNo, $merchantInvoiceUploadRequest = null, string $contentType = self::contentTypes['orderUploadInvoiceAsString'][0])
    {
        return $this->orderUploadInvoiceAsStringAsyncWithHttpInfo($merchantOrderNo, $merchantInvoiceUploadRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderUploadInvoiceAsStringAsyncWithHttpInfo
     *
     * Uploads an order invoice PDF from Base64 string.
     *
     * @param  string $merchantOrderNo (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantInvoiceUploadRequest|null $merchantInvoiceUploadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoiceAsString'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUploadInvoiceAsStringAsyncWithHttpInfo($merchantOrderNo, $merchantInvoiceUploadRequest = null, string $contentType = self::contentTypes['orderUploadInvoiceAsString'][0])
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->orderUploadInvoiceAsStringRequest($merchantOrderNo, $merchantInvoiceUploadRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderUploadInvoiceAsString'
     *
     * @param  string $merchantOrderNo (required)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantInvoiceUploadRequest|null $merchantInvoiceUploadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUploadInvoiceAsString'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderUploadInvoiceAsStringRequest($merchantOrderNo, $merchantInvoiceUploadRequest = null, string $contentType = self::contentTypes['orderUploadInvoiceAsString'][0])
    {

        // verify the required parameter 'merchantOrderNo' is set
        if ($merchantOrderNo === null || (is_array($merchantOrderNo) && count($merchantOrderNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantOrderNo when calling orderUploadInvoiceAsString'
            );
        }



        $resourcePath = '/v2/orders/{merchantOrderNo}/invoice-base64';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantOrderNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantOrderNo' . '}',
                ObjectSerializer::toPathValue($merchantOrderNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantInvoiceUploadRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantInvoiceUploadRequest));
            } else {
                $httpBody = $merchantInvoiceUploadRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
