<?php
/**
 * IRefund
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.19.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChannelEngine\Merchant\ApiClient\Model;

use \ArrayAccess;
use \ChannelEngine\Merchant\ApiClient\ObjectSerializer;

/**
 * IRefund Class Doc Comment
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IRefund implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IRefund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'reason' => '\ChannelEngine\Merchant\ApiClient\Model\RefundReason',
        'channelExportStatus' => '\ChannelEngine\Merchant\ApiClient\Model\ModuleChannelExportStatus',
        'subTotalInclTax' => 'float',
        'originalSubTotalInclTax' => 'float',
        'originalSubTotalTax' => 'float',
        'shippingCostInclTax' => 'float',
        'shippingCostTax' => 'float',
        'originalShippingCostInclTax' => 'float',
        'originalShippingCostTax' => 'float',
        'totalInclTax' => 'float',
        'totalTax' => 'float',
        'originalTotalInclTax' => 'float',
        'originalTotalTax' => 'float',
        'merchantComment' => 'string',
        'merchantRefundNo' => 'string',
        'channelRefundNo' => 'string',
        'channelOrderNo' => 'string',
        'commercialOrderNo' => 'string',
        'createdByType' => '\ChannelEngine\Merchant\ApiClient\Model\CreatedByType',
        'refundDate' => '\DateTime',
        'externalBatchNo' => 'string',
        'channelAcknowledgedDate' => '\DateTime',
        'merchantAcknowledgedDate' => '\DateTime',
        'orderId' => 'int',
        'channelId' => 'int',
        'returnId' => 'int',
        'channelReturnNo' => 'string',
        'currency' => '\ChannelEngine\Merchant\ApiClient\Model\IRefundCurrency',
        'lines' => '\ChannelEngine\Merchant\ApiClient\Model\IRefundLine[]',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'deletedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'reason' => null,
        'channelExportStatus' => null,
        'subTotalInclTax' => 'decimal',
        'originalSubTotalInclTax' => 'decimal',
        'originalSubTotalTax' => 'decimal',
        'shippingCostInclTax' => 'decimal',
        'shippingCostTax' => 'decimal',
        'originalShippingCostInclTax' => 'decimal',
        'originalShippingCostTax' => 'decimal',
        'totalInclTax' => 'decimal',
        'totalTax' => 'decimal',
        'originalTotalInclTax' => 'decimal',
        'originalTotalTax' => 'decimal',
        'merchantComment' => null,
        'merchantRefundNo' => null,
        'channelRefundNo' => null,
        'channelOrderNo' => null,
        'commercialOrderNo' => null,
        'createdByType' => null,
        'refundDate' => 'date-time',
        'externalBatchNo' => null,
        'channelAcknowledgedDate' => 'date-time',
        'merchantAcknowledgedDate' => 'date-time',
        'orderId' => 'int32',
        'channelId' => 'int32',
        'returnId' => 'int32',
        'channelReturnNo' => null,
        'currency' => null,
        'lines' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'deletedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'reason' => false,
        'channelExportStatus' => false,
        'subTotalInclTax' => false,
        'originalSubTotalInclTax' => false,
        'originalSubTotalTax' => false,
        'shippingCostInclTax' => false,
        'shippingCostTax' => false,
        'originalShippingCostInclTax' => false,
        'originalShippingCostTax' => false,
        'totalInclTax' => false,
        'totalTax' => false,
        'originalTotalInclTax' => false,
        'originalTotalTax' => false,
        'merchantComment' => true,
        'merchantRefundNo' => true,
        'channelRefundNo' => true,
        'channelOrderNo' => true,
        'commercialOrderNo' => true,
        'createdByType' => false,
        'refundDate' => false,
        'externalBatchNo' => true,
        'channelAcknowledgedDate' => true,
        'merchantAcknowledgedDate' => true,
        'orderId' => false,
        'channelId' => false,
        'returnId' => true,
        'channelReturnNo' => true,
        'currency' => false,
        'lines' => true,
        'createdAt' => false,
        'updatedAt' => false,
        'deletedAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'reason' => 'Reason',
        'channelExportStatus' => 'ChannelExportStatus',
        'subTotalInclTax' => 'SubTotalInclTax',
        'originalSubTotalInclTax' => 'OriginalSubTotalInclTax',
        'originalSubTotalTax' => 'OriginalSubTotalTax',
        'shippingCostInclTax' => 'ShippingCostInclTax',
        'shippingCostTax' => 'ShippingCostTax',
        'originalShippingCostInclTax' => 'OriginalShippingCostInclTax',
        'originalShippingCostTax' => 'OriginalShippingCostTax',
        'totalInclTax' => 'TotalInclTax',
        'totalTax' => 'TotalTax',
        'originalTotalInclTax' => 'OriginalTotalInclTax',
        'originalTotalTax' => 'OriginalTotalTax',
        'merchantComment' => 'MerchantComment',
        'merchantRefundNo' => 'MerchantRefundNo',
        'channelRefundNo' => 'ChannelRefundNo',
        'channelOrderNo' => 'ChannelOrderNo',
        'commercialOrderNo' => 'CommercialOrderNo',
        'createdByType' => 'CreatedByType',
        'refundDate' => 'RefundDate',
        'externalBatchNo' => 'ExternalBatchNo',
        'channelAcknowledgedDate' => 'ChannelAcknowledgedDate',
        'merchantAcknowledgedDate' => 'MerchantAcknowledgedDate',
        'orderId' => 'OrderId',
        'channelId' => 'ChannelId',
        'returnId' => 'ReturnId',
        'channelReturnNo' => 'ChannelReturnNo',
        'currency' => 'Currency',
        'lines' => 'Lines',
        'createdAt' => 'CreatedAt',
        'updatedAt' => 'UpdatedAt',
        'deletedAt' => 'DeletedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'reason' => 'setReason',
        'channelExportStatus' => 'setChannelExportStatus',
        'subTotalInclTax' => 'setSubTotalInclTax',
        'originalSubTotalInclTax' => 'setOriginalSubTotalInclTax',
        'originalSubTotalTax' => 'setOriginalSubTotalTax',
        'shippingCostInclTax' => 'setShippingCostInclTax',
        'shippingCostTax' => 'setShippingCostTax',
        'originalShippingCostInclTax' => 'setOriginalShippingCostInclTax',
        'originalShippingCostTax' => 'setOriginalShippingCostTax',
        'totalInclTax' => 'setTotalInclTax',
        'totalTax' => 'setTotalTax',
        'originalTotalInclTax' => 'setOriginalTotalInclTax',
        'originalTotalTax' => 'setOriginalTotalTax',
        'merchantComment' => 'setMerchantComment',
        'merchantRefundNo' => 'setMerchantRefundNo',
        'channelRefundNo' => 'setChannelRefundNo',
        'channelOrderNo' => 'setChannelOrderNo',
        'commercialOrderNo' => 'setCommercialOrderNo',
        'createdByType' => 'setCreatedByType',
        'refundDate' => 'setRefundDate',
        'externalBatchNo' => 'setExternalBatchNo',
        'channelAcknowledgedDate' => 'setChannelAcknowledgedDate',
        'merchantAcknowledgedDate' => 'setMerchantAcknowledgedDate',
        'orderId' => 'setOrderId',
        'channelId' => 'setChannelId',
        'returnId' => 'setReturnId',
        'channelReturnNo' => 'setChannelReturnNo',
        'currency' => 'setCurrency',
        'lines' => 'setLines',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'deletedAt' => 'setDeletedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'reason' => 'getReason',
        'channelExportStatus' => 'getChannelExportStatus',
        'subTotalInclTax' => 'getSubTotalInclTax',
        'originalSubTotalInclTax' => 'getOriginalSubTotalInclTax',
        'originalSubTotalTax' => 'getOriginalSubTotalTax',
        'shippingCostInclTax' => 'getShippingCostInclTax',
        'shippingCostTax' => 'getShippingCostTax',
        'originalShippingCostInclTax' => 'getOriginalShippingCostInclTax',
        'originalShippingCostTax' => 'getOriginalShippingCostTax',
        'totalInclTax' => 'getTotalInclTax',
        'totalTax' => 'getTotalTax',
        'originalTotalInclTax' => 'getOriginalTotalInclTax',
        'originalTotalTax' => 'getOriginalTotalTax',
        'merchantComment' => 'getMerchantComment',
        'merchantRefundNo' => 'getMerchantRefundNo',
        'channelRefundNo' => 'getChannelRefundNo',
        'channelOrderNo' => 'getChannelOrderNo',
        'commercialOrderNo' => 'getCommercialOrderNo',
        'createdByType' => 'getCreatedByType',
        'refundDate' => 'getRefundDate',
        'externalBatchNo' => 'getExternalBatchNo',
        'channelAcknowledgedDate' => 'getChannelAcknowledgedDate',
        'merchantAcknowledgedDate' => 'getMerchantAcknowledgedDate',
        'orderId' => 'getOrderId',
        'channelId' => 'getChannelId',
        'returnId' => 'getReturnId',
        'channelReturnNo' => 'getChannelReturnNo',
        'currency' => 'getCurrency',
        'lines' => 'getLines',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'deletedAt' => 'getDeletedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('channelExportStatus', $data ?? [], null);
        $this->setIfExists('subTotalInclTax', $data ?? [], null);
        $this->setIfExists('originalSubTotalInclTax', $data ?? [], null);
        $this->setIfExists('originalSubTotalTax', $data ?? [], null);
        $this->setIfExists('shippingCostInclTax', $data ?? [], null);
        $this->setIfExists('shippingCostTax', $data ?? [], null);
        $this->setIfExists('originalShippingCostInclTax', $data ?? [], null);
        $this->setIfExists('originalShippingCostTax', $data ?? [], null);
        $this->setIfExists('totalInclTax', $data ?? [], null);
        $this->setIfExists('totalTax', $data ?? [], null);
        $this->setIfExists('originalTotalInclTax', $data ?? [], null);
        $this->setIfExists('originalTotalTax', $data ?? [], null);
        $this->setIfExists('merchantComment', $data ?? [], null);
        $this->setIfExists('merchantRefundNo', $data ?? [], null);
        $this->setIfExists('channelRefundNo', $data ?? [], null);
        $this->setIfExists('channelOrderNo', $data ?? [], null);
        $this->setIfExists('commercialOrderNo', $data ?? [], null);
        $this->setIfExists('createdByType', $data ?? [], null);
        $this->setIfExists('refundDate', $data ?? [], null);
        $this->setIfExists('externalBatchNo', $data ?? [], null);
        $this->setIfExists('channelAcknowledgedDate', $data ?? [], null);
        $this->setIfExists('merchantAcknowledgedDate', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('channelId', $data ?? [], null);
        $this->setIfExists('returnId', $data ?? [], null);
        $this->setIfExists('channelReturnNo', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\RefundReason|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\RefundReason|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets channelExportStatus
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\ModuleChannelExportStatus|null
     */
    public function getChannelExportStatus()
    {
        return $this->container['channelExportStatus'];
    }

    /**
     * Sets channelExportStatus
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\ModuleChannelExportStatus|null $channelExportStatus channelExportStatus
     *
     * @return self
     */
    public function setChannelExportStatus($channelExportStatus)
    {
        if (is_null($channelExportStatus)) {
            throw new \InvalidArgumentException('non-nullable channelExportStatus cannot be null');
        }
        $this->container['channelExportStatus'] = $channelExportStatus;

        return $this;
    }

    /**
     * Gets subTotalInclTax
     *
     * @return float|null
     */
    public function getSubTotalInclTax()
    {
        return $this->container['subTotalInclTax'];
    }

    /**
     * Sets subTotalInclTax
     *
     * @param float|null $subTotalInclTax subTotalInclTax
     *
     * @return self
     */
    public function setSubTotalInclTax($subTotalInclTax)
    {
        if (is_null($subTotalInclTax)) {
            throw new \InvalidArgumentException('non-nullable subTotalInclTax cannot be null');
        }
        $this->container['subTotalInclTax'] = $subTotalInclTax;

        return $this;
    }

    /**
     * Gets originalSubTotalInclTax
     *
     * @return float|null
     */
    public function getOriginalSubTotalInclTax()
    {
        return $this->container['originalSubTotalInclTax'];
    }

    /**
     * Sets originalSubTotalInclTax
     *
     * @param float|null $originalSubTotalInclTax originalSubTotalInclTax
     *
     * @return self
     */
    public function setOriginalSubTotalInclTax($originalSubTotalInclTax)
    {
        if (is_null($originalSubTotalInclTax)) {
            throw new \InvalidArgumentException('non-nullable originalSubTotalInclTax cannot be null');
        }
        $this->container['originalSubTotalInclTax'] = $originalSubTotalInclTax;

        return $this;
    }

    /**
     * Gets originalSubTotalTax
     *
     * @return float|null
     */
    public function getOriginalSubTotalTax()
    {
        return $this->container['originalSubTotalTax'];
    }

    /**
     * Sets originalSubTotalTax
     *
     * @param float|null $originalSubTotalTax originalSubTotalTax
     *
     * @return self
     */
    public function setOriginalSubTotalTax($originalSubTotalTax)
    {
        if (is_null($originalSubTotalTax)) {
            throw new \InvalidArgumentException('non-nullable originalSubTotalTax cannot be null');
        }
        $this->container['originalSubTotalTax'] = $originalSubTotalTax;

        return $this;
    }

    /**
     * Gets shippingCostInclTax
     *
     * @return float|null
     */
    public function getShippingCostInclTax()
    {
        return $this->container['shippingCostInclTax'];
    }

    /**
     * Sets shippingCostInclTax
     *
     * @param float|null $shippingCostInclTax shippingCostInclTax
     *
     * @return self
     */
    public function setShippingCostInclTax($shippingCostInclTax)
    {
        if (is_null($shippingCostInclTax)) {
            throw new \InvalidArgumentException('non-nullable shippingCostInclTax cannot be null');
        }
        $this->container['shippingCostInclTax'] = $shippingCostInclTax;

        return $this;
    }

    /**
     * Gets shippingCostTax
     *
     * @return float|null
     */
    public function getShippingCostTax()
    {
        return $this->container['shippingCostTax'];
    }

    /**
     * Sets shippingCostTax
     *
     * @param float|null $shippingCostTax shippingCostTax
     *
     * @return self
     */
    public function setShippingCostTax($shippingCostTax)
    {
        if (is_null($shippingCostTax)) {
            throw new \InvalidArgumentException('non-nullable shippingCostTax cannot be null');
        }
        $this->container['shippingCostTax'] = $shippingCostTax;

        return $this;
    }

    /**
     * Gets originalShippingCostInclTax
     *
     * @return float|null
     */
    public function getOriginalShippingCostInclTax()
    {
        return $this->container['originalShippingCostInclTax'];
    }

    /**
     * Sets originalShippingCostInclTax
     *
     * @param float|null $originalShippingCostInclTax originalShippingCostInclTax
     *
     * @return self
     */
    public function setOriginalShippingCostInclTax($originalShippingCostInclTax)
    {
        if (is_null($originalShippingCostInclTax)) {
            throw new \InvalidArgumentException('non-nullable originalShippingCostInclTax cannot be null');
        }
        $this->container['originalShippingCostInclTax'] = $originalShippingCostInclTax;

        return $this;
    }

    /**
     * Gets originalShippingCostTax
     *
     * @return float|null
     */
    public function getOriginalShippingCostTax()
    {
        return $this->container['originalShippingCostTax'];
    }

    /**
     * Sets originalShippingCostTax
     *
     * @param float|null $originalShippingCostTax originalShippingCostTax
     *
     * @return self
     */
    public function setOriginalShippingCostTax($originalShippingCostTax)
    {
        if (is_null($originalShippingCostTax)) {
            throw new \InvalidArgumentException('non-nullable originalShippingCostTax cannot be null');
        }
        $this->container['originalShippingCostTax'] = $originalShippingCostTax;

        return $this;
    }

    /**
     * Gets totalInclTax
     *
     * @return float|null
     */
    public function getTotalInclTax()
    {
        return $this->container['totalInclTax'];
    }

    /**
     * Sets totalInclTax
     *
     * @param float|null $totalInclTax totalInclTax
     *
     * @return self
     */
    public function setTotalInclTax($totalInclTax)
    {
        if (is_null($totalInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalInclTax cannot be null');
        }
        $this->container['totalInclTax'] = $totalInclTax;

        return $this;
    }

    /**
     * Gets totalTax
     *
     * @return float|null
     */
    public function getTotalTax()
    {
        return $this->container['totalTax'];
    }

    /**
     * Sets totalTax
     *
     * @param float|null $totalTax totalTax
     *
     * @return self
     */
    public function setTotalTax($totalTax)
    {
        if (is_null($totalTax)) {
            throw new \InvalidArgumentException('non-nullable totalTax cannot be null');
        }
        $this->container['totalTax'] = $totalTax;

        return $this;
    }

    /**
     * Gets originalTotalInclTax
     *
     * @return float|null
     */
    public function getOriginalTotalInclTax()
    {
        return $this->container['originalTotalInclTax'];
    }

    /**
     * Sets originalTotalInclTax
     *
     * @param float|null $originalTotalInclTax originalTotalInclTax
     *
     * @return self
     */
    public function setOriginalTotalInclTax($originalTotalInclTax)
    {
        if (is_null($originalTotalInclTax)) {
            throw new \InvalidArgumentException('non-nullable originalTotalInclTax cannot be null');
        }
        $this->container['originalTotalInclTax'] = $originalTotalInclTax;

        return $this;
    }

    /**
     * Gets originalTotalTax
     *
     * @return float|null
     */
    public function getOriginalTotalTax()
    {
        return $this->container['originalTotalTax'];
    }

    /**
     * Sets originalTotalTax
     *
     * @param float|null $originalTotalTax originalTotalTax
     *
     * @return self
     */
    public function setOriginalTotalTax($originalTotalTax)
    {
        if (is_null($originalTotalTax)) {
            throw new \InvalidArgumentException('non-nullable originalTotalTax cannot be null');
        }
        $this->container['originalTotalTax'] = $originalTotalTax;

        return $this;
    }

    /**
     * Gets merchantComment
     *
     * @return string|null
     */
    public function getMerchantComment()
    {
        return $this->container['merchantComment'];
    }

    /**
     * Sets merchantComment
     *
     * @param string|null $merchantComment merchantComment
     *
     * @return self
     */
    public function setMerchantComment($merchantComment)
    {
        if (is_null($merchantComment)) {
            array_push($this->openAPINullablesSetToNull, 'merchantComment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantComment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantComment'] = $merchantComment;

        return $this;
    }

    /**
     * Gets merchantRefundNo
     *
     * @return string|null
     */
    public function getMerchantRefundNo()
    {
        return $this->container['merchantRefundNo'];
    }

    /**
     * Sets merchantRefundNo
     *
     * @param string|null $merchantRefundNo merchantRefundNo
     *
     * @return self
     */
    public function setMerchantRefundNo($merchantRefundNo)
    {
        if (is_null($merchantRefundNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantRefundNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantRefundNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantRefundNo'] = $merchantRefundNo;

        return $this;
    }

    /**
     * Gets channelRefundNo
     *
     * @return string|null
     */
    public function getChannelRefundNo()
    {
        return $this->container['channelRefundNo'];
    }

    /**
     * Sets channelRefundNo
     *
     * @param string|null $channelRefundNo channelRefundNo
     *
     * @return self
     */
    public function setChannelRefundNo($channelRefundNo)
    {
        if (is_null($channelRefundNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelRefundNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelRefundNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelRefundNo'] = $channelRefundNo;

        return $this;
    }

    /**
     * Gets channelOrderNo
     *
     * @return string|null
     */
    public function getChannelOrderNo()
    {
        return $this->container['channelOrderNo'];
    }

    /**
     * Sets channelOrderNo
     *
     * @param string|null $channelOrderNo channelOrderNo
     *
     * @return self
     */
    public function setChannelOrderNo($channelOrderNo)
    {
        if (is_null($channelOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelOrderNo'] = $channelOrderNo;

        return $this;
    }

    /**
     * Gets commercialOrderNo
     *
     * @return string|null
     */
    public function getCommercialOrderNo()
    {
        return $this->container['commercialOrderNo'];
    }

    /**
     * Sets commercialOrderNo
     *
     * @param string|null $commercialOrderNo commercialOrderNo
     *
     * @return self
     */
    public function setCommercialOrderNo($commercialOrderNo)
    {
        if (is_null($commercialOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'commercialOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commercialOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commercialOrderNo'] = $commercialOrderNo;

        return $this;
    }

    /**
     * Gets createdByType
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\CreatedByType|null
     */
    public function getCreatedByType()
    {
        return $this->container['createdByType'];
    }

    /**
     * Sets createdByType
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\CreatedByType|null $createdByType createdByType
     *
     * @return self
     */
    public function setCreatedByType($createdByType)
    {
        if (is_null($createdByType)) {
            throw new \InvalidArgumentException('non-nullable createdByType cannot be null');
        }
        $this->container['createdByType'] = $createdByType;

        return $this;
    }

    /**
     * Gets refundDate
     *
     * @return \DateTime|null
     */
    public function getRefundDate()
    {
        return $this->container['refundDate'];
    }

    /**
     * Sets refundDate
     *
     * @param \DateTime|null $refundDate refundDate
     *
     * @return self
     */
    public function setRefundDate($refundDate)
    {
        if (is_null($refundDate)) {
            throw new \InvalidArgumentException('non-nullable refundDate cannot be null');
        }
        $this->container['refundDate'] = $refundDate;

        return $this;
    }

    /**
     * Gets externalBatchNo
     *
     * @return string|null
     */
    public function getExternalBatchNo()
    {
        return $this->container['externalBatchNo'];
    }

    /**
     * Sets externalBatchNo
     *
     * @param string|null $externalBatchNo externalBatchNo
     *
     * @return self
     */
    public function setExternalBatchNo($externalBatchNo)
    {
        if (is_null($externalBatchNo)) {
            array_push($this->openAPINullablesSetToNull, 'externalBatchNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalBatchNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalBatchNo'] = $externalBatchNo;

        return $this;
    }

    /**
     * Gets channelAcknowledgedDate
     *
     * @return \DateTime|null
     */
    public function getChannelAcknowledgedDate()
    {
        return $this->container['channelAcknowledgedDate'];
    }

    /**
     * Sets channelAcknowledgedDate
     *
     * @param \DateTime|null $channelAcknowledgedDate channelAcknowledgedDate
     *
     * @return self
     */
    public function setChannelAcknowledgedDate($channelAcknowledgedDate)
    {
        if (is_null($channelAcknowledgedDate)) {
            array_push($this->openAPINullablesSetToNull, 'channelAcknowledgedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelAcknowledgedDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelAcknowledgedDate'] = $channelAcknowledgedDate;

        return $this;
    }

    /**
     * Gets merchantAcknowledgedDate
     *
     * @return \DateTime|null
     */
    public function getMerchantAcknowledgedDate()
    {
        return $this->container['merchantAcknowledgedDate'];
    }

    /**
     * Sets merchantAcknowledgedDate
     *
     * @param \DateTime|null $merchantAcknowledgedDate merchantAcknowledgedDate
     *
     * @return self
     */
    public function setMerchantAcknowledgedDate($merchantAcknowledgedDate)
    {
        if (is_null($merchantAcknowledgedDate)) {
            array_push($this->openAPINullablesSetToNull, 'merchantAcknowledgedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantAcknowledgedDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantAcknowledgedDate'] = $merchantAcknowledgedDate;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param int|null $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets channelId
     *
     * @return int|null
     */
    public function getChannelId()
    {
        return $this->container['channelId'];
    }

    /**
     * Sets channelId
     *
     * @param int|null $channelId channelId
     *
     * @return self
     */
    public function setChannelId($channelId)
    {
        if (is_null($channelId)) {
            throw new \InvalidArgumentException('non-nullable channelId cannot be null');
        }
        $this->container['channelId'] = $channelId;

        return $this;
    }

    /**
     * Gets returnId
     *
     * @return int|null
     */
    public function getReturnId()
    {
        return $this->container['returnId'];
    }

    /**
     * Sets returnId
     *
     * @param int|null $returnId returnId
     *
     * @return self
     */
    public function setReturnId($returnId)
    {
        if (is_null($returnId)) {
            array_push($this->openAPINullablesSetToNull, 'returnId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['returnId'] = $returnId;

        return $this;
    }

    /**
     * Gets channelReturnNo
     *
     * @return string|null
     */
    public function getChannelReturnNo()
    {
        return $this->container['channelReturnNo'];
    }

    /**
     * Sets channelReturnNo
     *
     * @param string|null $channelReturnNo channelReturnNo
     *
     * @return self
     */
    public function setChannelReturnNo($channelReturnNo)
    {
        if (is_null($channelReturnNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelReturnNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelReturnNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelReturnNo'] = $channelReturnNo;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\IRefundCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\IRefundCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\IRefundLine[]|null
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\IRefundLine[]|null $lines lines
     *
     * @return self
     */
    public function setLines($lines)
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt deletedAt
     *
     * @return self
     */
    public function setDeletedAt($deletedAt)
    {
        if (is_null($deletedAt)) {
            array_push($this->openAPINullablesSetToNull, 'deletedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


