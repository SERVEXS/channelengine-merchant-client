<?php
/**
 * IDocumentByFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.19.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChannelEngine\Merchant\ApiClient\Model;

use \ArrayAccess;
use \ChannelEngine\Merchant\ApiClient\ObjectSerializer;

/**
 * IDocumentByFilter Class Doc Comment
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IDocumentByFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IDocumentByFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'channelId' => 'int',
        'globalChannelId' => 'int',
        'orderId' => 'int',
        'channelOrderNo' => 'string',
        'merchantOrderNo' => 'string',
        'returnId' => 'int',
        'merchantReturnNo' => 'string',
        'fileName' => 'string',
        'documentNo' => 'string',
        'type' => '\ChannelEngine\Merchant\ApiClient\Model\OrderDocumentType',
        'linkedWith' => '\ChannelEngine\Merchant\ApiClient\Model\OrderDocumentLinkedWith',
        'source' => '\ChannelEngine\Merchant\ApiClient\Model\OrderDocumentSource',
        'mediaType' => '\ChannelEngine\Merchant\ApiClient\Model\OrderDocumentMediaType',
        'isMerchantAcknowledged' => 'bool',
        'isFileDeleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'channelId' => 'int32',
        'globalChannelId' => 'int32',
        'orderId' => 'int32',
        'channelOrderNo' => null,
        'merchantOrderNo' => null,
        'returnId' => 'int32',
        'merchantReturnNo' => null,
        'fileName' => null,
        'documentNo' => null,
        'type' => null,
        'linkedWith' => null,
        'source' => null,
        'mediaType' => null,
        'isMerchantAcknowledged' => null,
        'isFileDeleted' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'channelId' => false,
        'globalChannelId' => false,
        'orderId' => false,
        'channelOrderNo' => true,
        'merchantOrderNo' => true,
        'returnId' => true,
        'merchantReturnNo' => true,
        'fileName' => true,
        'documentNo' => true,
        'type' => false,
        'linkedWith' => false,
        'source' => false,
        'mediaType' => false,
        'isMerchantAcknowledged' => false,
        'isFileDeleted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'channelId' => 'ChannelId',
        'globalChannelId' => 'GlobalChannelId',
        'orderId' => 'OrderId',
        'channelOrderNo' => 'ChannelOrderNo',
        'merchantOrderNo' => 'MerchantOrderNo',
        'returnId' => 'ReturnId',
        'merchantReturnNo' => 'MerchantReturnNo',
        'fileName' => 'FileName',
        'documentNo' => 'DocumentNo',
        'type' => 'Type',
        'linkedWith' => 'LinkedWith',
        'source' => 'Source',
        'mediaType' => 'MediaType',
        'isMerchantAcknowledged' => 'IsMerchantAcknowledged',
        'isFileDeleted' => 'IsFileDeleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channelId' => 'setChannelId',
        'globalChannelId' => 'setGlobalChannelId',
        'orderId' => 'setOrderId',
        'channelOrderNo' => 'setChannelOrderNo',
        'merchantOrderNo' => 'setMerchantOrderNo',
        'returnId' => 'setReturnId',
        'merchantReturnNo' => 'setMerchantReturnNo',
        'fileName' => 'setFileName',
        'documentNo' => 'setDocumentNo',
        'type' => 'setType',
        'linkedWith' => 'setLinkedWith',
        'source' => 'setSource',
        'mediaType' => 'setMediaType',
        'isMerchantAcknowledged' => 'setIsMerchantAcknowledged',
        'isFileDeleted' => 'setIsFileDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channelId' => 'getChannelId',
        'globalChannelId' => 'getGlobalChannelId',
        'orderId' => 'getOrderId',
        'channelOrderNo' => 'getChannelOrderNo',
        'merchantOrderNo' => 'getMerchantOrderNo',
        'returnId' => 'getReturnId',
        'merchantReturnNo' => 'getMerchantReturnNo',
        'fileName' => 'getFileName',
        'documentNo' => 'getDocumentNo',
        'type' => 'getType',
        'linkedWith' => 'getLinkedWith',
        'source' => 'getSource',
        'mediaType' => 'getMediaType',
        'isMerchantAcknowledged' => 'getIsMerchantAcknowledged',
        'isFileDeleted' => 'getIsFileDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('channelId', $data ?? [], null);
        $this->setIfExists('globalChannelId', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('channelOrderNo', $data ?? [], null);
        $this->setIfExists('merchantOrderNo', $data ?? [], null);
        $this->setIfExists('returnId', $data ?? [], null);
        $this->setIfExists('merchantReturnNo', $data ?? [], null);
        $this->setIfExists('fileName', $data ?? [], null);
        $this->setIfExists('documentNo', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('linkedWith', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('mediaType', $data ?? [], null);
        $this->setIfExists('isMerchantAcknowledged', $data ?? [], null);
        $this->setIfExists('isFileDeleted', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channelId
     *
     * @return int|null
     */
    public function getChannelId()
    {
        return $this->container['channelId'];
    }

    /**
     * Sets channelId
     *
     * @param int|null $channelId channelId
     *
     * @return self
     */
    public function setChannelId($channelId)
    {
        if (is_null($channelId)) {
            throw new \InvalidArgumentException('non-nullable channelId cannot be null');
        }
        $this->container['channelId'] = $channelId;

        return $this;
    }

    /**
     * Gets globalChannelId
     *
     * @return int|null
     */
    public function getGlobalChannelId()
    {
        return $this->container['globalChannelId'];
    }

    /**
     * Sets globalChannelId
     *
     * @param int|null $globalChannelId globalChannelId
     *
     * @return self
     */
    public function setGlobalChannelId($globalChannelId)
    {
        if (is_null($globalChannelId)) {
            throw new \InvalidArgumentException('non-nullable globalChannelId cannot be null');
        }
        $this->container['globalChannelId'] = $globalChannelId;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param int|null $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets channelOrderNo
     *
     * @return string|null
     */
    public function getChannelOrderNo()
    {
        return $this->container['channelOrderNo'];
    }

    /**
     * Sets channelOrderNo
     *
     * @param string|null $channelOrderNo channelOrderNo
     *
     * @return self
     */
    public function setChannelOrderNo($channelOrderNo)
    {
        if (is_null($channelOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelOrderNo'] = $channelOrderNo;

        return $this;
    }

    /**
     * Gets merchantOrderNo
     *
     * @return string|null
     */
    public function getMerchantOrderNo()
    {
        return $this->container['merchantOrderNo'];
    }

    /**
     * Sets merchantOrderNo
     *
     * @param string|null $merchantOrderNo merchantOrderNo
     *
     * @return self
     */
    public function setMerchantOrderNo($merchantOrderNo)
    {
        if (is_null($merchantOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantOrderNo'] = $merchantOrderNo;

        return $this;
    }

    /**
     * Gets returnId
     *
     * @return int|null
     */
    public function getReturnId()
    {
        return $this->container['returnId'];
    }

    /**
     * Sets returnId
     *
     * @param int|null $returnId returnId
     *
     * @return self
     */
    public function setReturnId($returnId)
    {
        if (is_null($returnId)) {
            array_push($this->openAPINullablesSetToNull, 'returnId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['returnId'] = $returnId;

        return $this;
    }

    /**
     * Gets merchantReturnNo
     *
     * @return string|null
     */
    public function getMerchantReturnNo()
    {
        return $this->container['merchantReturnNo'];
    }

    /**
     * Sets merchantReturnNo
     *
     * @param string|null $merchantReturnNo merchantReturnNo
     *
     * @return self
     */
    public function setMerchantReturnNo($merchantReturnNo)
    {
        if (is_null($merchantReturnNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantReturnNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantReturnNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantReturnNo'] = $merchantReturnNo;

        return $this;
    }

    /**
     * Gets fileName
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName
     *
     * @param string|null $fileName fileName
     *
     * @return self
     */
    public function setFileName($fileName)
    {
        if (is_null($fileName)) {
            array_push($this->openAPINullablesSetToNull, 'fileName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fileName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets documentNo
     *
     * @return string|null
     */
    public function getDocumentNo()
    {
        return $this->container['documentNo'];
    }

    /**
     * Sets documentNo
     *
     * @param string|null $documentNo documentNo
     *
     * @return self
     */
    public function setDocumentNo($documentNo)
    {
        if (is_null($documentNo)) {
            array_push($this->openAPINullablesSetToNull, 'documentNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentNo'] = $documentNo;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\OrderDocumentType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\OrderDocumentType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets linkedWith
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\OrderDocumentLinkedWith|null
     */
    public function getLinkedWith()
    {
        return $this->container['linkedWith'];
    }

    /**
     * Sets linkedWith
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\OrderDocumentLinkedWith|null $linkedWith linkedWith
     *
     * @return self
     */
    public function setLinkedWith($linkedWith)
    {
        if (is_null($linkedWith)) {
            throw new \InvalidArgumentException('non-nullable linkedWith cannot be null');
        }
        $this->container['linkedWith'] = $linkedWith;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\OrderDocumentSource|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\OrderDocumentSource|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets mediaType
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\OrderDocumentMediaType|null
     */
    public function getMediaType()
    {
        return $this->container['mediaType'];
    }

    /**
     * Sets mediaType
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\OrderDocumentMediaType|null $mediaType mediaType
     *
     * @return self
     */
    public function setMediaType($mediaType)
    {
        if (is_null($mediaType)) {
            throw new \InvalidArgumentException('non-nullable mediaType cannot be null');
        }
        $this->container['mediaType'] = $mediaType;

        return $this;
    }

    /**
     * Gets isMerchantAcknowledged
     *
     * @return bool|null
     */
    public function getIsMerchantAcknowledged()
    {
        return $this->container['isMerchantAcknowledged'];
    }

    /**
     * Sets isMerchantAcknowledged
     *
     * @param bool|null $isMerchantAcknowledged isMerchantAcknowledged
     *
     * @return self
     */
    public function setIsMerchantAcknowledged($isMerchantAcknowledged)
    {
        if (is_null($isMerchantAcknowledged)) {
            throw new \InvalidArgumentException('non-nullable isMerchantAcknowledged cannot be null');
        }
        $this->container['isMerchantAcknowledged'] = $isMerchantAcknowledged;

        return $this;
    }

    /**
     * Gets isFileDeleted
     *
     * @return bool|null
     */
    public function getIsFileDeleted()
    {
        return $this->container['isFileDeleted'];
    }

    /**
     * Sets isFileDeleted
     *
     * @param bool|null $isFileDeleted isFileDeleted
     *
     * @return self
     */
    public function setIsFileDeleted($isFileDeleted)
    {
        if (is_null($isFileDeleted)) {
            throw new \InvalidArgumentException('non-nullable isFileDeleted cannot be null');
        }
        $this->container['isFileDeleted'] = $isFileDeleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


